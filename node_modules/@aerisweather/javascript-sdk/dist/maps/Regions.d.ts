import { ICoordinate, ICoordinateBounds } from '../interfaces/ICoordinate';
/**
 * A data type that represents a pre-defined region based on a center coordinate or coordinate
 * bounds.
 */
export declare type RegionType = {
    /**
     * The region's name.
     *
     * @type {string}
     */
    name: string;
    /**
     * The region's URL slug.
     *
     * @type {string}
     */
    slug?: string;
    /**
     * The center coordinate for the region.
     *
     * @type {ICoordinate}
     */
    center?: ICoordinate;
    /**
     * The coordinate bounds for the region. This value takes precedence over `center`.
     *
     * @type {ICoordinateBounds}
     */
    bounds?: ICoordinateBounds;
};
/**
 * The `Regions` module provides a store for declaring geographical regions based on a center
 * coordinate or coordinate bounds.
 */
export declare module Regions {
    /**
     * Returns the region configuration associated with the specified key, if any.
     *
     * @param {string} key
     */
    const get: (key: string) => RegionType;
    /**
     * Sets the region configuration associated with the specified key.
     *
     * @param {string} key
     * @param {RegionType} region
     */
    const set: (key: string, region: RegionType) => void;
    /**
     * Returns the region URL slug associated with the specified key, if any.
     *
     * @param {string} key
     */
    const slug: (key: string) => string;
    const asArray: (keys: string[], format: {
        [key: string]: string;
    }) => any;
}
