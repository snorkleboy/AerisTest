"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Regions = void 0;

/**
 * @ignore
 */
var store = {
  us: {
    name: 'United States',
    bounds: {
      north: 56.26,
      west: -131.39,
      south: 15.45,
      east: -61.17
    }
  },
  usne: {
    name: 'Northeast',
    bounds: {
      north: 50.37,
      west: -87.71,
      south: 36.42,
      east: -61.96
    }
  },
  usec: {
    name: 'Mid-Atlantic',
    bounds: {
      north: 42.16,
      west: -88.18,
      south: 31.62,
      east: -70.55
    }
  },
  usse: {
    name: 'Southeast',
    bounds: {
      north: 38.85,
      west: -99.23,
      south: 22.31,
      east: -73.48
    }
  },
  usnc: {
    name: 'Northern Plains',
    bounds: {
      north: 51.18,
      west: -107.80,
      south: 37.44,
      east: -82.05
    }
  },
  usov: {
    name: 'Lower Ohio Valley',
    bounds: {
      north: 43.10,
      west: -97.10,
      south: 32.70,
      east: -79.48
    }
  },
  usce: {
    name: 'Central Plains',
    bounds: {
      north: 47.37,
      west: -110.83,
      south: 34.78,
      east: -88.42
    }
  },
  ussc: {
    name: 'Southern Plains',
    bounds: {
      north: 40.85,
      west: -111.05,
      south: 24.69,
      east: -85.30
    }
  },
  usnw: {
    name: 'Pacific Northwest',
    bounds: {
      north: 52.50,
      west: -129.33,
      south: 39.13,
      east: -103.53
    }
  },
  uswc: {
    name: 'West Coast',
    bounds: {
      north: 45.95,
      west: -129.02,
      south: 33.06,
      east: -106.61
    }
  },
  ussw: {
    name: 'Southwest',
    bounds: {
      north: 44.15,
      west: -127.01,
      south: 28.70,
      east: -101.21
    }
  },
  usak: {
    name: 'Alaska',
    bounds: {
      north: 72.87,
      west: -196.96,
      south: 48.81,
      east: -127.18
    }
  },
  ushi: {
    name: 'Hawaii',
    bounds: {
      north: 24.61,
      west: -162.77,
      south: 16.55,
      east: -151.30
    }
  },
  ca: {
    name: 'Canada',
    bounds: {
      north: 75.85,
      west: -146.95,
      south: 38.96,
      east: -43.95
    }
  },
  mx: {
    name: 'Mexico',
    bounds: {
      north: 36.63,
      west: -119.40,
      south: 11.44,
      east: -82.13
    }
  },
  crb: {
    name: 'Caribbean',
    bounds: {
      north: 29.57,
      west: -91.45,
      south: 5.18,
      east: -57.00
    }
  },
  nam: {
    name: 'North America',
    bounds: {
      north: 75.32,
      west: -185.45,
      south: -4.57,
      east: -22.68
    }
  },
  sam: {
    name: 'South America',
    bounds: {
      north: 19.97,
      west: -125.51,
      south: -58.45,
      east: -1.75
    }
  },
  eur: {
    name: 'Europe',
    bounds: {
      north: 72.50,
      west: -41.50,
      south: 30.30,
      east: 59.41
    }
  },
  afr: {
    name: 'Africa',
    bounds: {
      north: 44.47,
      west: -44.83,
      south: -41.25,
      east: 82.10
    }
  },
  mide: {
    name: 'Middle East',
    bounds: {
      north: 46.01,
      west: 23.29,
      south: 8.93,
      east: 80.77
    }
  },
  aus: {
    name: 'Australia',
    bounds: {
      north: -0.18,
      west: 107.05,
      south: -50.01,
      east: 184.22
    }
  },
  nas: {
    name: 'Northern Asia',
    bounds: {
      north: 81.09,
      west: 24.61,
      south: 22.27,
      east: 189.84
    }
  },
  sas: {
    name: 'Southern Asia',
    bounds: {
      north: 55.97,
      west: 59.59,
      south: -15.45,
      east: 171.04
    }
  },
  asia: {
    name: 'Asia',
    bounds: {
      north: 78.06,
      west: 12.66,
      south: -14.94,
      east: 206.02
    }
  },
  world: {
    name: 'World',
    bounds: {
      north: 85.00,
      west: -170.16,
      south: -67.07,
      east: 191.60
    }
  }
};
/**
 * The `Regions` module provides a store for declaring geographical regions based on a center
 * coordinate or coordinate bounds.
 */

var Regions;
exports.Regions = Regions;

(function (Regions) {
  /**
   * Returns the region configuration associated with the specified key, if any.
   *
   * @param {string} key
   */
  Regions.get = function (key) {
    return store[key];
  };
  /**
   * Sets the region configuration associated with the specified key.
   *
   * @param {string} key
   * @param {RegionType} region
   */


  Regions.set = function (key, region) {
    store[key] = region;
  };
  /**
   * Returns the region URL slug associated with the specified key, if any.
   *
   * @param {string} key
   */


  Regions.slug = function (key) {
    var region = Regions.get(key);

    if (region) {
      return region.slug || ("" + region.name).toLowerCase().replace(/\s+/, '-');
    }

    return undefined;
  };

  Regions.asArray = function (keys, format) {
    var items = [];
    keys.forEach(function (code) {
      var region = Regions.get(code);

      if (region) {
        var obj_1 = {};
        Object.keys(format).forEach(function (key) {
          var src = format[key];
          var dest = key;

          if (src === 'key' || src === 'code') {
            obj_1[dest] = code;
          } else if (src === 'slug') {
            obj_1[dest] = Regions.slug(code);
          } else {
            obj_1[dest] = region[src];
          }
        });
        items.push(obj_1);
      }
    });
    return items;
  };
})(Regions || (exports.Regions = Regions = {}));