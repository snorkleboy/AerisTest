"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Views = void 0;

var _InteractiveMap2 = _interopRequireDefault(require("./interactive/InteractiveMap"));

var _MapView = _interopRequireDefault(require("./views/map/MapView"));

var _LegendView = _interopRequireDefault(require("./views/legends/LegendView"));

var _sources = require("./interactive/sources");

var mapUtils = _interopRequireWildcard(require("./utils"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

/**
 * @ignore
 * Private class extension to better handle naming conflicts within this public interface.
 *
 * @class _InteractiveMap
 * @extends {Map}
 */
var _InteractiveMap =
/** @class */
function (_super) {
  __extends(_InteractiveMap, _super);

  function _InteractiveMap() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return _InteractiveMap;
}(_InteractiveMap2.default);
/**
 * @ignore
 */


var _account;
/**
 * @ignore
 */


var _servers;
/**
 * The `Views` module provides the public interface for all mapping functionality, including both
 * static and interactive map views.
 */


var Views;
exports.Views = Views;

(function (Views) {
  /**
   * Provides access to the `View` module's utility functions.
   *
   * @readonly
   * @type { [key: string]: Function }
   */
  Views.utils = __assign({}, mapUtils);
  /**
   * Data source classes that can be used to add custom datasets to an `InteractiveMap` instance.
   *
   * @readonly
   * @type {
   * 			Tile: TileSource,
   * 			Vector: VectorSource,
   * 			GeoJson: GeoJsonSource,
   *          Text: TextSource
   * 		}
   */

  Views.datasources = {
    Tile: _sources.TileSource,
    Vector: _sources.VectorSource,
    GeoJson: _sources.GeoJsonSource,
    Text: _sources.TextSource
  };
  /**
   * Sets the Aeris account instance to use with the `Views` module.
   *
   * @param {Account} account
   */

  Views.setAccount = function (account) {
    _account = account;
  };
  /**
   * Sets the base paths for the API servers to use with data and image requests.
   *
   * @param {IServers} servers
   */


  Views.setServers = function (servers) {
    _servers = servers;
  };
  /**
   * Initializes and returns a new `Map` instance.
   *
   * @param {*} target
   * @param {InteractiveMapOptions} [opts]
   * @param {(map: Map) => void} [onInit]
   * @returns {InteractiveMap}
   */


  Views.InteractiveMap = function (target, opts, onInit) {
    opts = opts || {};
    opts.account = _account;
    opts.servers = opts.servers || _servers;
    return new _InteractiveMap(target, opts, onInit);
  };
  /**
   * Initializes and returns a new `MapView` instance.
   *
   * @param {HTMLElement} target
   * @param {MapViewOptions} [opts]
   * @returns {MapView}
   */


  Views.Map = function (target, opts) {
    opts = opts || {};
    opts.account = _account;
    opts.servers = opts.servers || _servers;
    return new _MapView.default(target, opts);
  };
  /**
   * Initializes and returns a new `LegendView` instance.
   *
   * @param {HTMLElement} target
   * @param {LegendOptions} [opts]
   * @returns {LegendView}
   */


  Views.Legend = function (target, opts) {
    opts = opts || {};
    opts.account = _account;
    return new _LegendView.default(target, opts);
  };
})(Views || (exports.Views = Views = {}));