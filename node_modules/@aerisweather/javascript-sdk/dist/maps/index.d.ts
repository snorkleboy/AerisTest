import { IServers } from '../AerisWeather';
import InteractiveMap from './interactive/InteractiveMap';
import MapView from './views/map/MapView';
import LegendView from './views/legends/LegendView';
import Account from '../account/Account';
import { TileSource, VectorSource, GeoJsonSource, TextSource } from './interactive/sources';
import { InteractiveMapOptions } from './interactive/types';
import { MapViewOptions } from './views/map/types';
import { LegendOptions } from './views/legends/types';
/**
 * The `Views` module provides the public interface for all mapping functionality, including both
 * static and interactive map views.
 */
export declare module Views {
    /**
     * Provides access to the `View` module's utility functions.
     *
     * @readonly
     * @type { [key: string]: Function }
     */
    const utils: any;
    /**
     * Data source classes that can be used to add custom datasets to an `InteractiveMap` instance.
     *
     * @readonly
     * @type {
     * 			Tile: TileSource,
     * 			Vector: VectorSource,
     * 			GeoJson: GeoJsonSource,
     *          Text: TextSource
     * 		}
     */
    const datasources: {
        Tile: typeof TileSource;
        Vector: typeof VectorSource;
        GeoJson: typeof GeoJsonSource;
        Text: typeof TextSource;
    };
    /**
     * Sets the Aeris account instance to use with the `Views` module.
     *
     * @param {Account} account
     */
    const setAccount: (account: Account) => void;
    /**
     * Sets the base paths for the API servers to use with data and image requests.
     *
     * @param {IServers} servers
     */
    const setServers: (servers: IServers) => void;
    /**
     * Initializes and returns a new `Map` instance.
     *
     * @param {*} target
     * @param {InteractiveMapOptions} [opts]
     * @param {(map: Map) => void} [onInit]
     * @returns {InteractiveMap}
     */
    const InteractiveMap: (target: any, opts?: InteractiveMapOptions, onInit?: (map: InteractiveMap) => void) => InteractiveMap;
    /**
     * Initializes and returns a new `MapView` instance.
     *
     * @param {HTMLElement} target
     * @param {MapViewOptions} [opts]
     * @returns {MapView}
     */
    const Map: (target: HTMLElement, opts?: MapViewOptions) => MapView;
    /**
     * Initializes and returns a new `LegendView` instance.
     *
     * @param {HTMLElement} target
     * @param {LegendOptions} [opts]
     * @returns {LegendView}
     */
    const Legend: (target: HTMLElement, opts?: LegendOptions) => LegendView;
}
