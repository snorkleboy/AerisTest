"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.config = void 0;

var _ApiRequest = require("../../../../network/api/ApiRequest");

var _utils = require("../../../../utils");

/**
 * @private
*/
var color = function (code) {
  code = (code || '').toUpperCase();

  switch (code) {
    case 'TR.A':
      return '#ffe401';

    case 'TR.W':
      return '#ff9000';

    case 'HU.A':
      return '#ff00d2';

    case 'HU.W':
      return '#ff0017';

    default:
      return '#000000';
  }
};
/**
 * @private
*/


var config = {
  request: {
    endpoint: 'tropicalcyclones',
    action: _ApiRequest.ApiAction.ID,
    parameters: {
      filter: 'geo',
      fields: 'id,profile,breakPointAlerts',
      limit: 50
    }
  },
  style: {
    polyline: function (data) {
      var type = (0, _utils.get)(data, 'alertType');
      return {
        stroke: {
          color: color(type),
          width: 6
        }
      };
    }
  },
  data: {
    properties: {
      id: 'id',
      category: '[path].alertType',
      path: 'breakPointAlerts'
    },
    formatter: function (data) {
      var records = !(0, _utils.isArray)(data) ? [data] : data; // convert array of breakpoint geometries into MultiLineString features based on group

      records.forEach(function (record) {
        var groups = {};
        (record.breakPointAlerts || []).forEach(function (line) {
          var type = line.alertType;

          if (!groups[type]) {
            groups[type] = [];
          }

          groups[type].push(line.coords.coordinates);
        });
        var features = [];
        Object.keys(groups).forEach(function (group) {
          features.push({
            type: 'Feature',
            properties: {
              id: record.id + "-" + group,
              alertType: group
            },
            geometry: {
              type: 'MultiLineString',
              coordinates: groups[group]
            }
          });
        });
        record.breakPointAlerts = features;
      });
      return data;
    }
  }
};
exports.config = config;
var _default = config;
exports.default = _default;