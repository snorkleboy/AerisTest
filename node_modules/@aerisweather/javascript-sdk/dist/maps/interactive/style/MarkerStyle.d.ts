import ShapeStyle from './ShapeStyle';
import { AnchorType } from '../../../display/SVG';
import { IPoint } from '../../../interfaces/ICoordinate';
export declare type CalloutFormatter = () => string;
/**
 * A data type that provides style options for text on a map.
 */
export declare type TextStyle = {
    /**
     * Text value to display.
     *
     * @type {string}
     */
    value: string;
    /**
     * Position of the element within its parent container. Supports an anchor string for
     * relative positioning, or an { x, y } point for absolute positioning.
     *
     * @type {AnchorType | IPoint};
     */
    position?: AnchorType | IPoint;
    /**
     * Position translation amount in x and y coordinates.
     *
     * @type {IPoint}
     */
    translate?: {
        x?: number;
        y?: number;
    };
    /**
     * Defines a list of transform definitions that are applied to the element.
     *
     * @type {string}
     */
    transform?: string;
    /**
     * Determines how the text container is aligned relative to its position.
     *
     * @type {'start' | 'middle' | 'end'}
     */
    anchor?: 'start' | 'middle' | 'end';
    /**
     * Font size.
     *
     * @type {number}
     */
    size?: number;
    /**
     * Font style, e.g. `normal` or `bold`.
     *
     * @type {string}
     */
    style?: string;
    /**
     * Text color.
     *
     * @type {string}
     */
    color?: string;
    /**
     * Amount of padding to insert around the text as `[x, y]`, where `x` is the amount of
     * padding on the left and right, and `y` is the amount of padding on the top and
     * bottom.
     *
     * @type {number[]}
     */
    padding?: number[];
    /**
     * Whether to automatically size the marker based on the width and height of the text.
     * Default is `true`.
     *
     * @type {boolean}
     */
    autosize?: boolean;
};
/**
 * A data type that provides style options for marker objects on a map.
 */
export declare type MarkerStyle = {
    /**
     * Style class name to add to the marker's DOM element.
     *
     * @type {string}
     */
    className?: string;
    /**
     * HTML content to use when rendering the icon.
     *
     * @type {string}
     */
    html?: string;
    /**
     * Provides the icon options for the style. If a value for `html` is provided, the marker will
     * be rendered as HTML and this value will be ignored.
     *
     * @type {string}
     */
    icon?: {
        /**
         * The URL to the icon image (absolute or relative to the script path).
         *
         * @type {string}
         */
        url: string;
        /**
         * URL to a retina sized version of the icon image. If not provided, the `url` icon path
         * will be used for retina devices.
         *
         * @type {string}
         */
        retinaUrl?: string;
        /**
         * The point coordinates of the tip of the icon (relative to the top-left corner).
         *
         * @type {number[]}
         */
        anchor?: number[];
    };
    /**
     * Provides the options for rendering the icon as an SVG element. If a value for `html` is
     * provided, the marker will be rendered as HTML and this value will be ignored.
     *
     * @type {ShapeStyle}
     */
    svg?: {
        /**
         * The shape options.
         *
         * @type {{
         * 			type: string;
         * 		}}
         */
        shape?: ShapeStyle & {
            /**
             * Type of shape to render. Supports: `circle`, `rect`, and `path`. Default value is `circle`.
             *
             * @type {string}
             */
            type: string;
            /**
             * Position of the element within its parent container. Supports an anchor string for
             * relative positioning, or an { x, y } point for absolute positioning.
             *
             * @type {AnchorType | IPoint};
             */
            position?: AnchorType | IPoint;
            /**
             * Position translation amount in x and y coordinates.
             *
             * @type {IPoint}
             */
            translate?: {
                x?: number;
                y?: number;
            };
        };
        image?: {
            /**
             * Image URL.
             *
             * @type {string}
             */
            url: string;
            /**
             * Position of the element within its parent container. Supports an anchor string for
             * relative positioning, or an { x, y } point for absolute positioning.
             *
             * @type {AnchorType | IPoint};
             */
            position?: AnchorType | IPoint;
            /**
             * Position translation amount in x and y axis.
             *
             * @type {IPoint}
             */
            translate?: {
                x?: number;
                y?: number;
            };
            /**
             * Defines a list of transform definitions that are applied to the element.
             *
             * @type {string}
             */
            transform?: string;
            /**
             * Image size.
             *
             * @type {number[]}
             */
            size?: number[];
        };
        /**
         * The text style options.
         *
         * @type {{
         * 			value: string;
         * 			x: number;
         * 			y: number;
         * 			size: number;
         * 			style?: string;
         * 			color?: string;
         * 			padding?: number[];
         * 		}}
         */
        text?: TextStyle | TextStyle[];
    };
    /**
     * Size of the icon as `[width, height]`, e.g. `[20,15]`
     *
     * @type {number[]}
     */
    size?: number[];
    /**
     * The z-index to apply to the marker when rendering on the map.
     *
     * @type {number}
     */
    zIndex?: number;
    /**
     * Minimum distance, in screen pixels/points, between rendered markers on the map. If not
     * specified or `0`, then all markers will be rendered (default).
     */
    spacing?: number;
    /**
     * Function used to format the marker callout content based on the provided object data.
     */
    callout?: string | CalloutFormatter;
};
export declare type MarkerStyleProvider = MarkerStyle | ((data: any) => MarkerStyle);
export declare type MarkerOptions = {
    data?: any;
    style: MarkerStyleProvider;
};
