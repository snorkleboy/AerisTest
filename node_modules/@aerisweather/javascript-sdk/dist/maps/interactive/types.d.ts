import Account from '../../account/Account';
import ApiRequest, { ApiAction } from '../../network/api/ApiRequest';
import RasterStyle from './style/RasterStyle';
import { MarkerStyleProvider } from './style/MarkerStyle';
import { ShapeStyleProvider } from './style/ShapeStyle';
import { ICoordinate } from '../../interfaces/ICoordinate';
import { AnimationOptions } from '../anim/Animation';
import { IServers } from '../../AerisWeather';
import VectorStyle from './style/VectorStyle';
export declare type LayerStyleGroups = {
    raster?: RasterStyle;
    marker?: MarkerStyleProvider;
    polygon?: ShapeStyleProvider;
    polyline?: ShapeStyleProvider;
};
export declare type LayerStyle = RasterStyle | VectorStyle;
/**
 * A data type that represents the configuration options for a map content source instance.
 */
export declare type LayerOptions = {
    /**
     * Unique identifier for the layer.
     *
     * @type {string}
     */
    id?: string;
    /**
     * The map content source type to use. If not provided, the default for the associated layer
     * code will be used.
     *
     * The following types are supported:
     * - `tile`: render the layer using raster tiles
     * - `vector`: render the layer using vector elements, e.g. markers, polygons and/or polylines
     * - `geojson`: render GeoJSON data using vector elements, e.g. markers, polygons and/or polylines
     * - `text`: render the layer using text labels
     *
     * @type {'tile' | 'vector' | 'text'}
     */
    type?: 'tile' | 'vector' | 'geojson' | 'text';
    /**
     * Style options for the layer.
     *
     * @type {(RasterStyle | VectorStyle)}
     */
    style?: RasterStyle | VectorStyle;
    /**
     * Either an instance of ApiRequest or configuration options to use when requesting data for the layer (for vector content sources only).
     *
     * @type {ApiRequest | {
     *      endpoint?: string;
     * 		action?: ApiAction;
     * 		parameters?: any;
     * 	}}
     */
    request?: ApiRequest | {
        /**
         * API endpoint to use for the request.
         *
         * @type {string}
         */
        endpoint?: string;
        /**
         * API action to use for the request. Default value is `ApiAction.WITHIN` for point content
         * sources and `ApiAction.SEARCH` for shape content sources.
         *
         * @type {ApiAction}
         */
        action?: ApiAction;
        /**
         * Defines the request parameters to use when requesting data for the layer.
         */
        parameters?: any;
    };
    /**
     * Configuration options for the data associated with the layer.
     */
    data?: {
        /**
         * Defines the property key paths to use for the time and value information for point
         * content sources.
         */
        properties?: {
            /**
             * Property key path to use for an object's identifier.
             *
             * @type {string}
             */
            id: string;
            /**
             * Key path to the root of the node containing the array of data elements (e.g. `features`).
             * If not provided, then the root node is assumed to contain the array of data elements.
             *
             * @type {string | string[]}
             */
            root?: string;
            /**
             * Property key path to use for an object's category or grouping, if any.
             *
             * If the model is represented as a polygon or polyline by a valid `path` key path and
             * each path's category is defined on the path object, prefix this category key path
             * with `[path]`. This will use category property relative to the path's object instead
             * of the model's root object.
             *
             * @type {string}
             */
            category?: string;
            /**
             * Property key path to use for the object's date/time. Can be a single value or an object
             * providing a range as `from` and `to` property key paths.
             */
            timestamp?: string | {
                from: string;
                to: string;
            };
            /**
             * Key path of the property that contains the data's value for each object in the
             * response. This can also be a function that receives the model's data and returns
             * the value to use in case additional formatting needs to occur on the value.
             */
            value?: string | ((data: any) => string);
            /**
             * Property key path that contains the point/coordinate data for the layer. This value
             * can also be an array of key paths, in which case the points will be combined when
             * rendering the data source's points on the map.
             *
             * @type {(string | string[])}
             */
            points?: string | string[];
            /**
             * Property key path to use for the object's coordinate path that defines the shape.
             * If the value of this property is an array, then multiple paths will be rendered on
             * the map for the model.
             *
             * @type {string}
             */
            path?: string;
        };
        /**
         * Time offset to use for the layer's data. If an offset is defined, then the layer will
         * only display data for that time interval regardless of the global timeline time
         * interval and its animation will be disabled.
         *
         * This property is only used for raster weather layers and can be an interval offset as a
         * number or a time offset as a string supported by Aeris Maps (AMP). Refer to the Aeris Maps
         * documentation at https://www.aerisweather.com/support/docs/aeris-maps/getting-started/time-offsets/
         */
        offset?: number | string;
        /**
         * An optional formatter function that can be used to format layer data before being processed
         * for rendering on the map. This function receives the entire dataset loaded for the
         * layer and should return the formatted data to use when rendering map elements.
         *
         * @type {(data: any) => any}
         */
        formatter?: ((data: any) => any);
        /**
         * A function that returns the geographical coordinate based on the model object.
         *
         * @type {(data: any) => ICoordinate}
         */
        coordinate?: ((data: any) => ICoordinate);
        /**
         * A function that returns the shape's GeoJSON geometry based on the model object.
         *
         * @type {(data: any) => any}
         */
        geometry?: ((data: any) => any);
        /**
         * A Boolean indicating whether the data's coordinate arrays are reversed from the GeoJSON
         * standard (e.g. `[lat, lon]` instead of the default of `[lon, lat]`).
         */
        reversedCoord?: boolean;
    };
};
/**
 * A data type that represents the data objects that can be added to a map view.
 */
export declare type LayerDataType = {
    /** Marker objects by identifier */
    markers?: any;
    /** Polygon objects */
    polygons?: any[];
    /** Polyline objects */
    polylines?: any[];
};
/**
 * A data type that represents the configuration options for a `Map` instance.
 */
export declare type InteractiveMapOptions = {
    /**
     * Aeris account to use when requesting map data and imagery.
     *
     * @type {Account}
     */
    account?: Account;
    /**
     * Base paths for the API servers to use with data and image requests.
     *
     * @type {IServers}
     */
    servers?: IServers;
    /**
     * Map strategy.
     *
     * The following strategy values are supported:
     * - `leaflet`: Uses the Leaflet.js mapping library
     * - `mapbox`: Uses the MapboxGL mapping library
     * - 'openlayers': Uses the OpenLayers mapping library
     * - 'google': Uses the Google Maps mapping library
     *
     * @type {string}
     */
    strategy?: string;
    /**
     * Configuration options to pass to the native map constructor for the specific mapping
     * strategy.
     *
     * @type {any}
     */
    map?: any;
    /**
     * Center coordinate to initialize the map view.
     *
     * @type {ICoordinate}
     */
    center?: ICoordinate;
    /**
     * Zoom level to initialize the map view.
     *
     * @type {number}
     */
    zoom?: number;
    /**
     * Configuration options for the map's animation timeline.
     *
     * @type {AnimationOptions}
     * @see {Timeline}
     */
    timeline?: AnimationOptions & {
        /**
         * Whether the map should display past data layers for both past and future time periods.
         * Default value is `false`.
         */
        alwaysShowPast?: boolean;
        /**
         * Whether the map should display future data layers for both past and future time periods.
         * Default value is `false`.
         */
        alwaysShowFuture?: boolean;
    };
    /**
     * Style overrides per layer code.
     *
     * @type {{ [layer: string]: LayerStyleGroups | LayerStyle }}
     */
    styles?: {
        [layer: string]: LayerStyleGroups | LayerStyle;
    };
    /**
     * Initial layers to add to the map at initialization.
     *
     * @type {(string | string[] | { layer: string; options?: LayerOptions; }[])}
     */
    layers?: string | string[] | {
        layer: string;
        options?: LayerOptions;
    }[];
    /**
     * Data update interval, in seconds. Default value is `0`, which disables auto-updating.
     *
     * @type {number}
     */
    refresh?: number;
    /**
     * Whether map content source data should be reloaded automatically when the map bounds have
     * changed.
     *
     * Default value is `true`. Set this value to `false` to reduce data and map unit usage.
     *
     * @type {boolean}
     */
    reloadOnBoundsChange?: boolean;
};
