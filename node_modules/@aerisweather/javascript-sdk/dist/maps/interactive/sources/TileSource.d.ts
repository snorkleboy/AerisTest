import EventDispatcher from '../../../event/EventDispatcher';
import ITileLayer from '../../interfaces/ITileLayer';
import TileAnimation, { ITileAnimationProvider } from '../../anim/TileAnimation';
import ImageAnimation from '../../anim/ImageAnimation';
import MapRequest from '../../../network/maps/MapRequest';
import RasterStyle from '../style/RasterStyle';
import { IAnimatableSource } from '../../interfaces/IAnimatableSource';
/**
 * An interface that is implemented by an object that provides the necessary data for a tile layer-based overlay.
 */
export interface ITileDataSource {
    /**
     * Asks the data source to return a new tile layer source for the specified layer code and date.
     * @param layer
     * @param date
     */
    tileLayer(layer: string, date: Date, opts?: any): TileSource;
}
/**
 * A data type that provides the configuration options for a tile source instance.
 */
export declare type TileSourceOptions = {
    /**
     * Unique identifier for the source.
     *
     * @type {string}
     */
    id?: string;
    /**
     * The timestamp to use for the source data, either as a `Date` or an Epoch time in milliseconds.
     *
     * This value will be ignored if a value for `offset` is defined.
     *
     * @type {(Date | number)}
     */
    time: Date | number;
    /**
     * Time offset to use for the source's data.
     *
     * If an offset is defined, then the tile source will only display data for that time interval
     * regardless of the timestamp property and its internal animation will be disabled. Use this
     * property if you want to always show data for the same interval.
     *
     * @type {number | string}
     */
    offset?: number | string;
    /**
     * A Boolean indicating whether the tile source represents future data.
     *
     * @type {boolean}
     */
    future?: boolean;
    /**
     * Style associated with the source.
     *
     * @type {RasterStyle}
     */
    style?: RasterStyle;
    /**
     * Whether this tile source should always be visible regardless of past or future state. Default value is `false`.
     *
     * @type {boolean}
     */
    alwaysShow?: boolean;
    /**
     * Animation options for the tile source.
     */
    animation?: {
        /**
         * Whether animation is enabled.
         *
         * @type {boolean}
         */
        enabled: boolean;
        /**
         * Type of animation, either `tile` or `image`. Default value is `tile`.
         *
         * @type {string}
         */
        type: string;
    };
};
/**
 * `TileSource` is an abstract object that is responsible for managing a single tile layer on a map view and providing
 * additional functionality for the layer, such as controlling a layer's opacity and loading and running animations.
 *
 * This class is intended to be subclassed by each supported mapping strategy in order to configure the appropriate underlying
 * layer instance that is added to the strategy's map view.
 */
export default class TileSource extends EventDispatcher implements ITileLayer, IAnimatableSource, ITileAnimationProvider {
    /**
     * Data key associated with the data source.
     *
     * @type {string}
     * @memberof TileSource
     */
    key: string;
    /**
     * Whether the data source is enabled.
     *
     * @type {boolean}
     * @memberof TileSource
     */
    enabled: boolean;
    /**
     * The receiver's data source.
     *
     * @type {ITileDataSource}
     * @memberof TileSource
     */
    dataSource?: ITileDataSource;
    protected _overlay: any;
    protected _timestamp: Date;
    protected _opacity: number;
    protected _opts: any;
    protected _animation: TileAnimation | ImageAnimation;
    protected _service: MapRequest;
    protected _hidden: boolean;
    /**
     * Initializes a new tile source instance configured with the specified AMP layer code and tile url template string.
     *
     * @param {string} layer
     * @param {string} url
     * @param {TileSourceOptions} [opts]
     * @memberof TileSource
     */
    constructor(key: string, service: MapRequest, opts?: TileSourceOptions);
    /**
     * Identifier associated with the data source.
     *
     * @type {string}
     * @memberof TileSource
     */
    identifier: string;
    /** Tile template URL */
    readonly url: string;
    /** Underlying map layer instance that is added to a map view */
    readonly overlay: any;
    /** Current timestamp to use when requesting tile data */
    timestamp: Date;
    readonly service: MapRequest;
    /**
     * Returns the animation associated with the static layer.
     */
    readonly animation: TileAnimation | ImageAnimation;
    /**
     * Returns the url template string to use for tile requests based on the current timestamp.
     */
    urlTemplate(): string;
    isFuture(): boolean;
    updateVisibility(): void;
    canShow(): boolean;
    isAnimationActive(): boolean;
    isAnimating(): boolean;
    /**
     * Shows the tile layer.
     */
    show(): void;
    /**
     * Hides the tile layer.
     */
    hide(): void;
    remove(): void;
    /**
     * Returns whether the source is currently visible.
     *
     * @returns {boolean}
     * @memberof TileSource
     */
    isVisible(): boolean;
    /**
     * Updates the opacity of the tile layer.
     * @param value
     */
    setOpacity(value: number): void;
    /**
     * Updates the z-index order of the tile layer on the parent map view.
     * @param value
     */
    setOrder(value: number): void;
    destroy(): void;
    /** Animation Provider */
    animationLayerForDate(animation: TileAnimation, date: Date): Promise<ITileLayer>;
}
