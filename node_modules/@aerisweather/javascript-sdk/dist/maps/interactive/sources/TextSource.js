"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ApiRequest = require("../../../network/api/ApiRequest");

var _VectorSource = _interopRequireDefault(require("./VectorSource"));

var _TextAnimation = _interopRequireDefault(require("../../anim/TextAnimation"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

/**
 * `TextSource` is an object that is responsible for loading data and managing a series of text
 * annotations on a map view.
 */
var TextSource =
/** @class */
function (_super) {
  __extends(TextSource, _super);
  /**
   * Initializes a new point data source instance configured with the specified AMP layer code
   * and API service.
   *
   * @param layer
   * @param service
   * @param opts
   */


  function TextSource(key, opts) {
    var _this = _super.call(this, key, opts) || this;

    if (_this._opts.animatable) {
      var anim = new _TextAnimation.default();
      anim.provider = _this;
      anim.on('data:add', function (e) {
        return _this.trigger('markers:add', {
          markers: e.data.items
        });
      });
      anim.on('data:remove', function (e) {
        return _this.trigger('markers:remove', {
          markers: e.data.items
        });
      });
      anim.on('data:update', function (e) {
        return _this.trigger('markers:update', {
          markers: e.data.items
        });
      });
      _this._animation = anim;
    }

    return _this;
  }
  /**
   * Requests data for the layer based on the provided geographical map bounds and date range.
   *
   * @param bounds
   * @param from
   * @param to
   * @returns A Promise containing the resulting marker data objects.
   */


  TextSource.prototype.load = function (params) {
    this._animationMarkers = null;
    return _super.prototype.load.call(this, params);
  };

  TextSource.prototype._processRecord = function (record) {
    record = (0, _utils.cloneDeep)(record);
    var keypath = (0, _utils.get)(this._opts, 'data.properties.value');

    if (!(0, _utils.isFunction)(keypath)) {
      keypath = (keypath || '').replace(/^periods\./, ''); // set initial marker text to first period value

      if (record.periods) {
        keypath = "periods[0]." + keypath;
      }
    }

    record.value = record.value || ((0, _utils.isFunction)(keypath) ? keypath(record) : (0, _utils.get)(record, keypath));
    return record;
  };
  /**
   * Requests data required for animating text values across an animation's time range. This data
   * set is usually different than that returned by `load()`.
   *
   * @returns A Promise containing the resulting marker data objects.
   */


  TextSource.prototype._loadAnimationData = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      var limit = _this.service.param('limit') || 300;

      var plimit = _this.service.param('plimit');

      var sort = _this.service.param('sort') || 'dt:-1';
      var style = _this.style.marker || _this.style;

      _this.service.action(_ApiRequest.ApiAction.WITHIN).plimit(100).limit(limit).sort(sort).get().then(function (result) {
        _this.service.plimit(plimit);

        var elements = {}; // use existing marker references but use the multi-period data instead

        (result.data || []).forEach(function (item) {
          var record = _this._processRecord(item);

          var loc = record.loc || {};
          var coord = {
            lat: loc.lat,
            lon: loc.long || loc.lon
          };
          var id = record.id || coord.lat + "," + coord.long;
          var el = _this.markersById ? _this.markersById[id] : null;
          var itemStyle = (0, _utils.isFunction)(style) ? style(record) : style;

          if (el) {
            elements[id] = {
              renderable: el.renderable,
              data: (0, _utils.extend)({}, el.data, record),
              style: el.style
            };
          } else if ((0, _utils.isset)(itemStyle.spacing) === false) {
            var marker = _this.strategy.factory.marker(_this.key, {
              lat: coord.lat,
              lon: coord.lon
            }, itemStyle);

            elements[id] = {
              data: __assign({}, record, {
                awxjs_source: _this.key
              }),
              renderable: marker,
              style: itemStyle
            };
          }
        });
        resolve(elements);
      }).catch(function (e) {
        console.error('Error requesting animation data for TextSource', e); // eslint-disable-line no-console

        reject(e);
      });
    });
  };
  /**
   * Animation Provider
   */


  TextSource.prototype.animationData = function (animation) {
    return __awaiter(this, void 0, void 0, function () {
      var _a, markers, timeProp, valueProp, items;

      var _this = this;

      return __generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!!this._animationMarkers) return [3
            /*break*/
            , 2];
            _a = this;
            return [4
            /*yield*/
            , this._loadAnimationData()];

          case 1:
            _a._animationMarkers = _b.sent();
            _b.label = 2;

          case 2:
            markers = this._animationMarkers;
            timeProp = ((0, _utils.get)(this._opts, 'data.properties.timestamp') || '').replace(/^periods\./, '');
            valueProp = (0, _utils.get)(this._opts, 'data.properties.value');

            if (!(0, _utils.isFunction)(valueProp)) {
              valueProp = (valueProp || '').replace(/^periods\./, '');
            }

            items = Object.keys(markers).reduce(function (result, id) {
              var _a = markers[id],
                  data = _a.data,
                  renderable = _a.renderable;

              if (data && data.periods) {
                var lastVal_1;
                var periods = data.periods.reduce(function (p, record) {
                  var ts = (0, _utils.get)(record, timeProp) * 1000;
                  var val = '';

                  if ((0, _utils.isFunction)(valueProp)) {
                    val = valueProp(record);
                  } else {
                    val = (0, _utils.get)(record, valueProp);
                  }

                  if (val !== lastVal_1) {
                    p[ts] = val;
                    lastVal_1 = val;
                  }

                  return p;
                }, {});
                result[id] = {
                  data: periods,
                  renderable: renderable,
                  style: _this.style
                };
                return result;
              }

              return null;
            }, {});
            return [2
            /*return*/
            , items];
        }
      });
    });
  };

  return TextSource;
}(_VectorSource.default);

var _default = TextSource;
exports.default = _default;
module.exports = exports.default;