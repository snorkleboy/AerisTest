import EventDispatcher from '../../event/EventDispatcher';
import Account from '../../account/Account';
import IMapStrategy, { IMapStrategyDataSource } from '../interfaces/IMapStrategy';
import Timeline from '../anim/Timeline';
import { InteractiveMapOptions, LayerOptions } from './types';
import { ICoordinate, ICoordinateBounds } from '../../interfaces/ICoordinate';
import MapLayerConfig from './MapLayerConfig';
import MapRequest from '../../network/maps/MapRequest';
export declare type MapState = {
    center: ICoordinate;
    bounds: ICoordinateBounds;
    zoom: number;
};
/**
 * An `InteractiveMap` object provides an abstract interface for displaying weather-related data on an interactive map view using
 * one of the supported third-party mapping libraries.
 *
 * @export
 * @class InteractiveMap
 * @extends {EventDispatcher}
 * @implements {IMapStrategyDataSource}
 */
export default class InteractiveMap extends EventDispatcher implements IMapStrategyDataSource {
    private _opts;
    private _strategy;
    private _account;
    private _timeline;
    private _sources;
    private _layers;
    private _config;
    private _ready;
    private _indicator;
    private _sourceOrder;
    private _layersById;
    private _stateForData;
    private _refreshInterval;
    /**
     * Initializes a map instance with the specified target and configuration object.
     *
     * @param {*} target Either the `HTMLElement` where you want your map view to be rendered, or
     * an existing map object instance that pertains to one of the supported third-party mapping
     * libraries. If a map object instance if provided, then that instance will be used for
     * rendering weather data instead of the library creating a new instance.
     * @param {InteractiveMapOptions} [opts] Map configuration
     * @param {(map: InteractiveMap) => void} [onInit] Optional callback to be called when the map
     * view has been fully initialized
     * @memberof InteractiveMap
     */
    constructor(target: any, opts?: InteractiveMapOptions, onInit?: (map: InteractiveMap) => void);
    /**
     * Returns the underlying third-party map object instance associated with the current map strategy.
     *
     * @readonly
     * @memberof InteractiveMap
     */
    readonly map: any;
    /**
     * Returns the current map strategy being used.
     *
     * @readonly
     * @type {IMapStrategy}
     * @memberof InteractiveMap
     */
    readonly strategy: IMapStrategy;
    /**
     * Configuration and style manager for the map content sources and associated layers.
     *
     * @readonly
     * @type {MapLayerConfig}
     * @memberof InteractiveMap
     */
    readonly config: MapLayerConfig;
    /**
     * Returns the map's animation timeline.
     *
     * @readonly
     * @type {Timeline}
     * @memberof InteractiveMap
     */
    readonly timeline: Timeline;
    /**
     * The Aeris account to use when requesting data for the map.
     *
     * @type {Account}
     * @memberof InteractiveMap
     */
    account: Account;
    /**
     * Returns whether the map is ready, meaning the underlying map view and events have been fully
     * setup and initialized.
     *
     * @returns {boolean}
     * @memberof InteractiveMap
     */
    isReady(): boolean;
    /**
     * Returns the map's center coordinate.
     *
     * @returns {ICoordinate}
     * @memberof InteractiveMap
     */
    getCenter(): ICoordinate;
    /**
     * Sets the map's center coordinate.
     *
     * @param {ICoordinate} coord
     * @memberof InteractiveMap
     */
    setCenter(coord: ICoordinate): void;
    /**
     * Returns the current map zoom level.
     *
     * @returns {number}
     * @memberof InteractiveMap
     */
    getZoom(): number;
    /**
     * Sets the map zoom level.
     *
     * @param {number} zoom
     * @memberof InteractiveMap
     */
    setZoom(zoom: number): void;
    /**
     * Sets the map's center coordinate and zoom level.
     *
     * @param {ICoordinate} center
     * @param {number} zoom
     * @memberof InteractiveMap
     */
    setView(center: ICoordinate, zoom: number): void;
    /**
     * Returns the geographical bounds for the visible map region.
     *
     * @returns {ICoordinateBounds}
     * @memberof InteractiveMap
     */
    getBounds(): ICoordinateBounds;
    /**
     * Sets the map bounds to contain the specified geographical bounds.
     *
     * @param {ICoordinateBounds} bounds
     * @memberof InteractiveMap
     */
    setBounds(bounds: ICoordinateBounds): void;
    /**
     * Sets the map bounds to contain the specified geographical bounds with optional padding insets.
     *
     * @param {ICoordinateBounds} bounds
     * @param {number[]} [padding]
     * @memberof InteractiveMap
     */
    fitBounds(bounds: ICoordinateBounds, padding?: number[]): void;
    /**
     * AMP Layers
     */
    /**
     * Adds an AMP layer to the map for the specified layer code.
     *
     * @param {string} layer
     * @param {LayerOptions} [opts]
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addLayer(layer: string, opts?: LayerOptions): InteractiveMap;
    /**
     * Adds a series of AMP layers for the specified array of layer codes.
     *
     * @param {string[]} layers
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addLayers(layers: string[]): InteractiveMap;
    /**
     * Removes an AMP layer from the map for the specified layer code.
     *
     * @param {string} layer
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeLayer(layer: string): InteractiveMap;
    /**
     * Removes an AMP layer from the map for the specified identifier.
     *
     * @param {string} id
     * @returns
     * @memberof InteractiveMap
     */
    removeLayerForId(id: string): this;
    /**
     * Removes a series of AMP layers associated with the specified array of layer codes.
     *
     * @param {string[]} layers
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeLayers(layers: string[]): InteractiveMap;
    /**
     * Updates the layer's zIndex order by bringing it to the top of the layer stack. This only
     * affects tile and image layers.
     *
     * @param {string} layer
     * @memberof InteractiveMap
     */
    bringLayerToFront(layer: string): void;
    /**
     * Updates the layer's zIndex order by sending it to the bottom of the layer stack. This only
     * affects tile and image layers.
     *
     * @param {string} layer
     * @memberof InteractiveMap
     */
    sendLayerToBack(layer: string): void;
    /**
     * Updates the layer's zIndex order. This only affects tile and image layers.
     *
     * @param {string} layer
     * @param {number} zIndex
     * @memberof InteractiveMap
     */
    setLayerOrder(layer: string, zIndex: number): void;
    /**
     * Returns the map content source associated with the specified layer code, if any.
     *
     * @param {string} layer
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSourceForLayer(layer: string): any;
    /**
     * Returns the map content source associated with the specified identifier, if any.
     *
     * @param {string} id
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSourceForId(id: string): any;
    /**
     * Instantiates and returns a new map content source instance based on the specified type and
     * configuration options.
     *
     * @param {string} key
     * @param {string} type
     * @param {any} config
     * @returns {any}
     * @memberof InteractiveMap
     */
    createSource(key: string, type: string, config: any): any;
    /**
     * Content Sources
     */
    /**
     * Adds a new map content source for the specified layer code.
     *
     * @param {*} source
     * @param {string} key
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    addSource(source: any, key: string): InteractiveMap;
    /**
     * Removes the map content source associated with the specified layer code.
     *
     * @param {*} source
     * @returns {InteractiveMap}
     * @memberof InteractiveMap
     */
    removeSource(source: any): InteractiveMap;
    /**
     * Returns the map content source associated with the specified key, if any.
     *
     * @param {string} key
     * @returns {*}
     * @memberof InteractiveMap
     */
    getSource(key: string): any;
    /**
     * Presents a callout bubble on the map from the specified target. The target can either be an
     * `ICoordinate` object or a native marker object for the current mapping strategy.
     *
     * @param {*} target
     * @param {*} content
     * @memberof InteractiveMap
     */
    showCallout(target: any, content: any): void;
    /**
     * Updates the map timeline and all active map content sources on the map.
     *
     * @memberof InteractiveMap
     */
    update(): void;
    /**
     * Enables auto-updating of map data on regular intervals based on the specified number of
     * seconds.
     *
     * @param {number} interval
     * @memberof InteractiveMap
     */
    enableAutoUpdate(seconds: number): void;
    /**
     * Disables auto-updating of map data.
     *
     * @memberof InteractiveMap
     */
    disableAutoUpdate(): void;
    /**
     * @ignore
     *
     * @memberof InteractiveMap
     */
    _updateTimeline(): void;
    /**
     * @ignore
     * Updates point and shape map content sources by loading new data for the current map bounds.
     *
     * @memberof InteractiveMap
     */
    _loadForBounds(force?: boolean): void;
    /**
     * @ignore
     * Updates existing map content sources for the specified date and time.
     *
     * @param {(number | Date)} date
     * @memberof InteractiveMap
     */
    _updateSourcesForDate(date: number | Date): void;
    /**
     * @ignore
     * Called before the map's visible region changes, either from a center or zoom change.
     *
     * @memberof InteractiveMap
     */
    _beforeBoundsChange(): void;
    /**
     * @ignore
     * Called after the map's visible region changes, either from a center or zoom change. This method will also request an update
     * for all point and shape layers that are active on the map and require new data for the visible region change.
     *
     * @memberof InteractiveMap
     */
    _afterBoundsChange(): void;
    /**
     * Events that can be triggered by a `Map` instance.
     *
     * @static
     * @memberof InteractiveMap
     */
    static Event: {
        READY: string;
        /** Fired when the map is initialized once its center and zoom have been set for the first time. */
        LOAD: string;
        /** Fired when the user clicks (or taps) the map. */
        CLICK: string;
        /** Fired when the user double-clicks (or double-taps) the map. */
        DBL_CLICK: string;
        /** Fired when the user pushes the mouse button on the map. */
        MOUSE_DOWN: string;
        /** Fired when the user releases the mouse button on the map. */
        MOUSE_UP: string;
        /** Fired when the mouse enters the map. */
        MOUSE_OVER: string;
        /** Fired when the mouse leaves the map. */
        MOUSE_OUT: string;
        /** Fired while the mouse moves over the map. */
        MOUSE_MOVE: string;
        /** Fired when the map is resized. */
        RESIZE: string;
        /** Fired when the map viewport changes, either after a bounds/center or zoom change. */
        CHANGE_BOUNDS: string;
        /** Fired when the visible map bounds is about to change, either before a center change, pan or zoom. */
        BEFORE_CHANGE_BOUNDS: string;
        /** Fired after the visible map bounds has changed as a result of a center change, pan or zoom. */
        AFTER_CHANGE_BOUNDS: string;
        /** Fired when the center of the map viewport has changed. */
        CHANGE_CENTER: string;
        /** Fired when the zoom level has changed. */
        CHANGE_ZOOM: string;
        /** Fired repeatedly during any movement of the pan, including pan and fly animations. */
        MOVE: string;
        /** Fired when the map starts changing (e.g. user starts dragging the map). */
        MOVE_START: string;
        /** Fired when the center of the map stops changning (e.g. user stopped dragging the map). */
        MOVE_END: string;
        /** Fired repeatedly during any change in zoom level, including zoom and fly animations. */
        ZOOM: string;
        /** Fired when the map zoom is about to change (e.g. before zoom animation). */
        ZOOM_START: string;
        /** Fired when the map has changed, after any animations. */
        ZOOM_END: string;
        /** Fired when the user clicks (or taps) a marker on the map. */
        MARKER_CLICK: string;
        /** Fired repeatedly while the user drags a marker. */
        MARKER_DRAG: string;
        /** Fired when the user starts dragging a marker. */
        MARKER_DRAG_START: string;
        /** Fired when the user stops dragging a marker. */
        MARKER_DRAG_END: string;
        /** Fired when the user clicks (or taps) a shape on the map. */
        SHAPE_CLICK: string;
        /** Fired when the map timeline begins playback. */
        TIMELINE_PLAY: string;
        /** Fired when the map timeline stops playback. */
        TIMELINE_STOP: string;
        /** Fired when the current time/date for the map timeline changes. */
        TIMELINE_CHANGE: string;
        /** Fired when a layer is added to the map. */
        LAYER_ADD: string;
        /** Fired when a layer is removed from the map. */
        LAYER_REMOVE: string;
        LAYER_UPDATE: string;
        /** Fired when a content source is added to the map. */
        SOURCE_ADD: string;
        /** Fired when a content source is removed from the map. */
        SOURCE_REMOVE: string;
        /** Fired when a vector content source has loaded new data. */
        VECTOR_LOAD: string;
    };
    private _dblClickTimer;
    /**
     * @ignore
     * Sets up the event mappings between the internal strategy and Map instance.
     *
     * @memberof InteractiveMap
     */
    _setupEvents(): void;
    /**
     * @ignore
     * @private
     * @memberof InteractiveMap
     */
    private _checkReady;
    /**
     * Data Sources
     */
    /**
     * @ignore
     * @param {string} layer
     * @returns {MapRequest}
     * @memberof InteractiveMap
     */
    requestForMap(layer: string): MapRequest;
    /**
     * @ignore
     * @param config
     * @returns {ApiRequest}
     * @memberof InteractiveMap
     */
    private requestForConfig;
}
