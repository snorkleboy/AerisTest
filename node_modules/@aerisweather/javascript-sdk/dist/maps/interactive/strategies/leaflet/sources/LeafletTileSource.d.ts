import TileSource from '../../../sources/TileSource';
import TileAnimation from '../../../../anim/TileAnimation';
import ITileLayer from '../../../../interfaces/ITileLayer';
import MapRequest from '../../../../../network/maps/MapRequest';
/**
 * `LeafletTileSource` is a subclass of `TileSource` that creates and manages a single tile layer to
 * be used with an `LeafletMapStrategy`.
 *
 * @export
 * @class LeafletTileSource
 * @extends {TileSource}
 */
export default class LeafletTileSource extends TileSource {
    private _visible;
    private _exists;
    constructor(key: string, service: MapRequest, opts?: any);
    readonly overlay: L.TileLayer;
    timestamp: Date;
    /**
     * Shows the layer associated with the source.
     *
     * @memberof LeafletTileSource
     */
    show(): void;
    /**
     * Hides the layer associated with the source.
     *
     * @memberof LeafletTileSource
     */
    hide(): void;
    /**
     * Flags the source for removal from the managing map strategy.
     *
     * @memberof LeafletTileSource
     */
    remove(): void;
    /**
     * Changes the opacity of source's layer.
     *
     * @param {number} value
     * @memberof LeafletTileSource
     */
    setOpacity(value: number): void;
    /**
     * Changes the z-index of the source's layer.
     *
     * @param {number} value
     * @memberof LeafletTileSource
     */
    setOrder(value: number): void;
    /**
     * Animation Providers
     */
    animationLayerForDate(animation: TileAnimation, date: Date): Promise<ITileLayer>;
}
