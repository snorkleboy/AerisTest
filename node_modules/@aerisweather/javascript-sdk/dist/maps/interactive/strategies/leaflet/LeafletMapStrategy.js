"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _MapStrategy = _interopRequireDefault(require("../MapStrategy"));

var _LeafletOverlayFactory = _interopRequireDefault(require("./LeafletOverlayFactory"));

var _LeafletTileSource = _interopRequireDefault(require("./sources/LeafletTileSource"));

var _utils = require("../../../utils");

var _utils2 = require("../../../../utils");

var _DOM = _interopRequireDefault(require("../../../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}(); // / <reference path="../../../../../node_modules/@types/leaflet/index.d.ts" />


/**
 * A map strategy for working with the third-party Leaflet mapping library.
 *
 * @export
 * @class LeafletMapStrategy
 * @extends {EventDispatcher}
 * @implements {IMapStrategy}
 */
var LeafletMapStrategy =
/** @class */
function (_super) {
  __extends(LeafletMapStrategy, _super);

  function LeafletMapStrategy(target, opts) {
    var _this = _super.call(this, target, (0, _utils2.extend)({
      style: null,
      map: {
        worldCopyJump: true
      }
    }, opts)) || this;

    _this._clickedMapLayer = false;
    return _this;
  }

  Object.defineProperty(LeafletMapStrategy.prototype, "$el", {
    get: function () {
      return (0, _DOM.default)(this.map.getContainer());
    },
    enumerable: true,
    configurable: true
  });

  LeafletMapStrategy.prototype.loadDependencies = function () {
    return new Promise(function (resolve, reject) {
      if (typeof L === 'undefined' || typeof L.map === 'undefined') {
        var version = '1.4.0';
        Promise.all([(0, _utils2.loadStyles)("https://unpkg.com/leaflet@" + version + "/dist/leaflet.css"), (0, _utils2.loadScript)("https://unpkg.com/leaflet@" + version + "/dist/leaflet.js")]).then(function () {
          resolve();
        });
      } else {
        resolve();
      }
    });
  };

  LeafletMapStrategy.prototype.setupMap = function (target) {
    var _this = this;

    this._factory = new _LeafletOverlayFactory.default();
    this._eventMapping = {
      load: 'load',
      unload: 'unload',
      resize: 'resize',
      click: 'click',
      dblclick: 'dblclick',
      mousedown: 'mousedown',
      mouseup: 'mouseup',
      mouseover: 'mouseover',
      mouseout: 'mouseout',
      mousemove: 'mousemove',
      zoom: 'zoom',
      zoomstart: 'zoom:start',
      zoomend: 'zoom:end',
      move: 'move',
      movestart: 'move:start',
      moveend: 'move:end',
      popupopen: 'popupopen',
      popupclose: 'popupclose'
    }; // set view properties from native map options if defined

    var mapOpts = this.opts.map;

    if (mapOpts) {
      var center = mapOpts.center,
          zoom = mapOpts.zoom;

      if (center && (0, _utils2.isset)(center.lat) && (0, _utils2.isset)(center.lng)) {
        (0, _utils2.set)(this.opts, 'center', {
          lat: center.lat,
          lon: center.lng
        });
      }

      if (zoom) {
        (0, _utils2.set)(this.opts, 'zoom', zoom);
      }
    } // constructor allows passing either an HTMLElement or instance of L.Map
    // if L.Map instance is provided then don't create a new map instance


    if ((0, _utils.isLeaflet)(target)) {
      this._map = target;
    } else {
      if ((0, _utils2.isString)(target)) {
        target = (0, _DOM.default)(target);
      }

      if ((0, _utils2.isArray)(target) && target.length > 0) {
        target = target[0]; // eslint-disable-line no-restricted-globals
      } else if ((0, _utils2.isDOM)(target)) {
        var obj = target;
        target = obj[0];
      }

      this._map = L.map(target, this.opts.map);

      if (!(0, _utils2.isset)(this.opts.center)) {
        (0, _utils2.set)(this.opts, 'center', {
          lat: 43.0,
          lon: -93.0
        });
      }

      if (!(0, _utils2.isset)(this.opts.zoom)) {
        (0, _utils2.set)(this.opts, 'zoom', 7);
      }

      this.map.createPane('base');
      this.map.getPane('base').style.zIndex = "199";
      var baseUrl = (0, _utils2.get)(this.opts, 'style');

      if (!(0, _utils2.isEmpty)(baseUrl)) {
        this._baseLayer = L.tileLayer(baseUrl, {
          pane: 'base'
        });
      } else {
        this._baseLayer = L.tileLayer('https://{s}.tile.osm.org/{z}/{x}/{y}.png', {
          attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors',
          pane: 'base'
        });
      }

      this._baseLayer.addTo(this.map);
    } // create 'admin' pane for AMP overlays


    this.map.createPane('admin');
    this.map.getPane('admin').style.zIndex = "210";
    setTimeout(function () {
      _this.trigger('map:ready');
    }, 250);
  };
  /**
   * Updates the base layer using tiles from the provided URL.
   *
   * @param {string} url
   * @memberof LeafletMapStrategy
   */


  LeafletMapStrategy.prototype.setBaseUrl = function (url) {
    if ((0, _utils2.isEmpty)(url)) return;

    if (this._baseLayer) {
      this._baseLayer.remove();
    }

    this._baseLayer = L.tileLayer(url, {
      pane: 'base'
    });

    this._baseLayer.addTo(this.map);
  };

  LeafletMapStrategy.prototype.setView = function (center, zoom) {
    this.map.setView({
      lat: center.lat,
      lng: center.lon
    }, zoom);
  };

  LeafletMapStrategy.prototype.getCenter = function () {
    var coord = this._map.getCenter();

    return {
      lat: coord.lat,
      lon: coord.lng
    };
  };

  LeafletMapStrategy.prototype.setCenter = function (coord) {
    this._map.setView({
      lat: coord.lat,
      lng: coord.lon
    }, this.getZoom());
  };

  LeafletMapStrategy.prototype.getZoom = function () {
    return this._map.getZoom();
  };

  LeafletMapStrategy.prototype.setZoom = function (zoom) {
    this._map.setZoom(zoom);
  };

  LeafletMapStrategy.prototype.getBounds = function () {
    var b = this.map.getBounds();
    return {
      north: b.getNorth(),
      west: b.getWest(),
      south: b.getSouth(),
      east: b.getEast()
    };
  };

  LeafletMapStrategy.prototype.setBounds = function (bounds) {
    var sw = new L.LatLng(bounds.south, bounds.west);
    var ne = new L.LatLng(bounds.north, bounds.east);
    this.map.fitBounds(new L.LatLngBounds(sw, ne));
  };

  LeafletMapStrategy.prototype.fitBounds = function (bounds, padding) {
    if (padding === void 0) {
      padding = [10, 10];
    }

    var sw = new L.LatLng(bounds.south, bounds.west);
    var ne = new L.LatLng(bounds.north, bounds.east);
    var b = new L.LatLngBounds(sw, ne);
    this.map.fitBounds(b, {
      padding: L.point(padding[0], padding[1])
    });
  };
  /** Sources */


  LeafletMapStrategy.prototype.isTile = function (source) {
    return source instanceof _LeafletTileSource.default;
  };

  LeafletMapStrategy.prototype.isMarker = function (el) {
    return el instanceof L.Marker;
  };

  LeafletMapStrategy.prototype.isPolygon = function (el) {
    return el instanceof L.Polygon;
  };

  LeafletMapStrategy.prototype.isPolyline = function (el) {
    return el instanceof L.Polyline;
  };
  /** Overlays */


  LeafletMapStrategy.prototype.addOverlay = function (overlay) {
    if (overlay instanceof L.Layer || overlay instanceof L.TileLayer) {
      overlay.addTo(this.map);
    }
  };

  LeafletMapStrategy.prototype.removeOverlay = function (overlay) {
    if (overlay instanceof L.Layer || overlay instanceof L.TileLayer) {
      overlay.remove();
    }
  };
  /** Markers */


  LeafletMapStrategy.prototype.addMarker = function (marker, data) {
    var _this = this;

    if (this.isMarker(marker)) {
      marker.addTo(this.map);
      marker.on('click', function () {
        return _this.trigger('marker:click', {
          data: data,
          marker: marker
        });
      });
    }

    _super.prototype.addMarker.call(this, marker); // console.error(`Cannot add marker ${marker}, invalid map object`, marker);

  };

  LeafletMapStrategy.prototype.removeMarker = function (marker) {
    if (this.isMarker(marker)) {
      marker.off('click');
      marker.remove();
    }

    _super.prototype.removeMarker.call(this, marker);
  };

  LeafletMapStrategy.prototype.updateMarker = function (marker, options, layer) {
    if (layer === void 0) {
      layer = null;
    }

    if (!options) return;

    if (this.isMarker(marker)) {
      var value = (0, _utils2.get)(options, 'data.value');
      var style = (0, _utils2.get)(options, 'style') || {};

      if ((0, _utils2.isFunction)(style)) {
        style = style({
          value: value
        });
      }

      var icon = this.factory.markerIcon(style);

      if (icon) {
        marker.setIcon(icon);
      }
    }
  };

  LeafletMapStrategy.prototype.bindCalloutToMarker = function (marker, content) {//
  };
  /** Polygons & Polylines */


  LeafletMapStrategy.prototype.addShape = function (shape, data) {
    var _this = this;

    if (this.isPolygon(shape) || this.isPolyline(shape)) {
      shape.addTo(this.map);
      shape.on('click', function (e) {
        _this._clickedMapLayer = true;

        _this.trigger('shape:click', {
          data: data,
          shape: shape
        });

        setTimeout(function () {
          _this._clickedMapLayer = false;
        }, 100);
      });
      return;
    }

    _super.prototype.addShape.call(this, shape, data);
  };

  LeafletMapStrategy.prototype.removeShape = function (shape) {
    if (this.isPolygon(shape) || this.isPolyline(shape)) {
      shape.off('click');
      shape.remove();
      return;
    }

    _super.prototype.removeShape.call(this, shape);
  };

  LeafletMapStrategy.prototype.showShape = function (shape) {
    this.addShape(shape);
  };

  LeafletMapStrategy.prototype.hideShape = function (shape) {
    this.removeShape(shape);
  };
  /** Conversions */


  LeafletMapStrategy.prototype.coordToPoint = function (coord) {
    if (!coord) return null;
    var p = this.map.latLngToContainerPoint({
      lat: coord.lat,
      lng: coord.lon
    });
    return {
      x: p.x,
      y: p.y
    };
  };

  LeafletMapStrategy.prototype.pointToCoord = function (point) {
    if (!point) return null;
    var c = this.map.containerPointToLatLng([point.x, point.y]);
    return {
      lat: c.lat,
      lon: c.lng
    };
  };
  /** Callout */


  LeafletMapStrategy.prototype.showCallout = function (target, content) {
    if ((0, _utils.isCoordObject)(target)) {
      this.map.openPopup(content, new L.LatLng(target.lat, target.lon));
    } else if (this.isMarker(target)) {
      target.unbindPopup().bindPopup(content).openPopup();
    }
  };

  LeafletMapStrategy.prototype._setupEvents = function () {
    var _this = this;

    _super.prototype._setupEvents.call(this);

    this.map.on('moveend', function (e) {
      _this.trigger('change:bounds');

      _this.trigger('change:center');
    });
    this.map.on('zoomend', function (e) {
      _this.trigger('change:zoom');
    });
  };

  LeafletMapStrategy.prototype._shouldTriggerEvent = function (name) {
    if (name === 'click') {
      return this._clickedMapLayer === false;
    }

    return true;
  };

  LeafletMapStrategy.prototype._dataForMapEvent = function (name, event) {
    if (!event) return null;
    var data = null;

    switch (name) {
      case 'click':
      case 'dblclick':
        data = {
          coord: {
            lat: event.latlng.lat,
            lon: event.latlng.lng
          },
          point: {
            x: event.containerPoint.x,
            y: event.containerPoint.y
          }
        };
        break;

      default:
        break;
    }

    return data;
  };

  return LeafletMapStrategy;
}(_MapStrategy.default);

var _default = LeafletMapStrategy;
exports.default = _default;
module.exports = exports.default;