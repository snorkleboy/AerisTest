import MapStrategy from '../MapStrategy';
import IMapStrategy from '../../../interfaces/IMapStrategy';
import OpenLayersOverlayFactory from './OpenLayersOverlayFactory';
import { ICoordinate, ICoordinateBounds, IPoint } from '../../../../interfaces/ICoordinate';
import { MarkerOptions } from '../../style/MarkerStyle';
declare global {
    const ol: any;
}
/**
 * A map strategy for working with the third-party OpenLayers mapping library.
 *
 * @export
 * @class OpenLayersMapStrategy
 * @extends {MapStrategy}
 * @implements {IMapStrategy}
 */
export default class OpenLayersMapStrategy extends MapStrategy<ol.Map, OpenLayersOverlayFactory> implements IMapStrategy {
    private _activePopup;
    private _hasLoaded;
    private _clickedMapLayer;
    private _shapeDataById;
    readonly $el: any;
    protected loadDependencies(): Promise<void>;
    protected setupMap(target: HTMLElement | HTMLElement[] | ol.Map): void;
    setView(center: ICoordinate, zoom: number): void;
    getCenter(): ICoordinate;
    setCenter(coord: ICoordinate): void;
    getZoom(): number;
    setZoom(zoom: number): void;
    getBounds(): ICoordinateBounds;
    setBounds(bounds: ICoordinateBounds): void;
    fitBounds(bounds: ICoordinateBounds, padding?: number[]): void;
    /** Sources */
    isTile(source: any): boolean;
    isMarker(el: any): boolean;
    isPolygon(el: any): boolean;
    isPolyline(el: any): boolean;
    /** Overlays */
    addOverlay(overlay: any, index?: number): void;
    removeOverlay(overlay: any): void;
    /** Markers */
    addMarker(marker: any, data?: any): void;
    removeMarker(marker: any): void;
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    showMarkers(markers: any[], show: boolean): void;
    /** Polygons & Polylines */
    addShape(shape: any, data?: any): void;
    removeShape(shape: any): void;
    showShape(shape: any): void;
    hideShape(shape: any): void;
    containsLayer(layer: ol.layer.Layer): boolean;
    /** Conversions */
    coordToPoint(coord: ICoordinate): IPoint;
    pointToCoord(point: IPoint): ICoordinate;
    getInsertIndex(layer: ol.layer.Layer, positionOffset: number): number;
    getIndexBoundForGeom(type: string, min?: boolean): number;
    /** Callout */
    showCallout(target: any, content: any): void;
    protected _setupEvents(): void;
    protected _shouldTriggerEvent(name: string): boolean;
    protected _dataForMapEvent(name: string, event: any): any;
}
