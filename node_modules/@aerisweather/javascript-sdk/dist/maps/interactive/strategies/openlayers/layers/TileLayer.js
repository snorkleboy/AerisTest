"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */


;
/**
 * `TileLayer` is a container class that is responsible for creating and managing a OpenLayers
 * source and associated layer representation on a OpenLayers map.
 */

var OpenLayersTileLayer =
/** @class */
function (_super) {
  __extends(OpenLayersTileLayer, _super);

  function OpenLayersTileLayer(layer, type, id) {
    if (type === void 0) {
      type = 'tile';
    }

    if (id === void 0) {
      id = undefined;
    }

    var _this = _super.call(this, layer, id) || this;

    _this._opts = {};
    _this._loadCounter = {
      loading: 0,
      loaded: 0
    };
    _this._type = type;
    return _this;
  }
  /**
   * Updates the tile or image url for the layer.
   *
   * @param {string} url
   * @memberof TileLayer
   */


  OpenLayersTileLayer.prototype.setUrl = function (url) {
    this._opts.url = url;

    if (this.map) {
      this.invalidate();
    }
  };
  /**
   * Updates the bounds for the layer when rendered as an image.
   *
   * @param {ICoordinateBounds} bounds
   * @memberof TileLayer
   */


  OpenLayersTileLayer.prototype.setBounds = function (bounds) {
    this._opts.bounds = bounds;
  };
  /**
   * Forces a redraw of the layer on the map.
   *
   * @returns
   * @memberof TileLayer
   */


  OpenLayersTileLayer.prototype.invalidate = function () {
    var _this = this;

    var map = this.map;
    this.remove();
    this._source = new ol.source.XYZ({
      url: this._opts.url
    });
    this.layer = new ol.layer.Tile({
      source: this._source
    });
    this._loadCounter = {
      loading: 0,
      loaded: 0
    };

    this._source.on('tileloadstart', function (e) {
      _this._loadCounter.loading += 1;
    });

    this._source.on(['tileloadend', 'tileloaderror'], function (e) {
      _this._loadCounter.loaded += 1;

      if (_this._loadCounter.loaded === _this._loadCounter.loading) {
        _this.trigger('load');
      }
    });

    if (map) {
      this.addTo(map, this._targetIndex);
    }
  };

  return OpenLayersTileLayer;
}(_Layer.default);

var _default = OpenLayersTileLayer;
exports.default = _default;
module.exports = exports.default;