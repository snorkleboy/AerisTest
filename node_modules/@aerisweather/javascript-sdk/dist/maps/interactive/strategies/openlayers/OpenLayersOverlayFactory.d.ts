import IOverlayFactory, { PolygonDef } from '../../../interfaces/IOverlayFactory';
import { Marker } from './layers';
import OpenLayersTileSource from './sources/OpenLayersTileSource';
import { ICoordinate } from '../../../../interfaces/ICoordinate';
import { MarkerStyle } from '../../style/MarkerStyle';
import ShapeStyle from '../../style/ShapeStyle';
import MapRequest from '../../../../network/maps/MapRequest';
/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class OpenLayersOverlayFactory
 * @implements {IOverlayFactory}
 * @implements {IPointDataSource}
 */
export default class OpenLayersOverlayFactory implements IOverlayFactory {
    /**
     * Returns a map tile source instance configured with the specified layer code and url template
     * string.
     *
     * @param {string} layer
     * @param {MapRequest} service
     * @param {*} [opts]
     * @returns {OSMTileSource}
     * @memberof OSMOverlayFactory
     */
    tileLayer(layer: string, service: MapRequest, opts?: any): OpenLayersTileSource;
    /**
     * Returns a map annotation instance at the provided coordinate and configured for the
     * specified layer code and configuration.
     *
     * @param {string} layer
     * @param {ICoordinate} coord
     * @param {MarkerStyle} style
     * @returns {L.Marker}
     * @memberof OSMOverlayFactory
     */
    marker(layer: string, coord: ICoordinate, style: MarkerStyle): Marker;
    /**
     * Returns an annotation icon based on the provided configuration.
     *
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof OSMOverlayFactory
     */
    markerIcon(style: MarkerStyle): any;
    /**
     * Returns a polygon instance configured for the specified layer code and configuration.
     *
     * @param {string} layer
     * @param {Polygon[]} shapes
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof OSMOverlayFactory
     */
    polygon(layer: string, shapes: PolygonDef[], style: ShapeStyle): any;
    polyline(layer: string, points: ICoordinate[], style: ShapeStyle): any;
}
