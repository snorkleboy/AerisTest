"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../../../../event/EventDispatcher"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/openlayers/index.d.ts" />

/* eslint-enable spaced-comment */


/**
 * `Layer` is a container class that is responsible for creating and managing a OpenLayers
 * source and associated layer representation on a OpenLayers map.
 */
var OpenLayersLayer =
/** @class */
function (_super) {
  __extends(OpenLayersLayer, _super);

  function OpenLayersLayer(layer, id) {
    if (id === void 0) {
      id = undefined;
    }

    var _this = _super.call(this) || this;

    _this._hidden = false;
    _this._idPrefix = "aeris-layer";
    _this.id = id || layer;
    return _this;
  }

  Object.defineProperty(OpenLayersLayer.prototype, "layerId", {
    /**
     * Layer identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof OpenLayersLayer
     */
    get: function () {
      var id = this.id ? "-" + this.id : '';
      return "" + this._idPrefix + id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OpenLayersLayer.prototype, "map", {
    /**
     * Map currently associated with the layer.
     *
     * @readonly
     * @type {mapboxgl.Map}
     * @memberof Layer
     */
    get: function () {
      return this._map;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(OpenLayersLayer.prototype, "isHidden", {
    /**
     * Returns whether the layer is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof Layer
     */
    get: function () {
      return this._hidden;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds the layer to the specified map.
   *
   * @param {mapboxgl.Map} map
   * @param {number} index
   * @memberof Layer
   */

  OpenLayersLayer.prototype.addTo = function (map, index) {
    if (this.map === map) return;
    this._map = map;
    this._targetIndex = index;

    if (this.layer) {
      if (index >= 0) {
        map.getLayers().insertAt(index, this.layer);
      } else {
        map.addLayer(this.layer);
      }
    } else {
      this.invalidate();
    }
  };
  /**
   * Removes the layer from the map it is currently active on.
   *
   * @returns
   * @memberof Layer
   */


  OpenLayersLayer.prototype.remove = function () {
    if (!this.map) return;

    if (this.layer) {
      this.map.removeLayer(this.layer);
    }

    this._map = null;
  };
  /**
   * Shows the layer on the map.
   *
   * @memberof Layer
   */


  OpenLayersLayer.prototype.show = function () {
    this._hidden = false;

    if (this.layer) {
      this.layer.setVisible(true);
    }
  };
  /**
   * Hides the layer on the map.
   *
   * @memberof Layer
   */


  OpenLayersLayer.prototype.hide = function () {
    this._hidden = true;

    if (this.layer) {
      this.layer.setVisible(false);
    }
  };
  /**
   * Changes the opacity of the layer.
   *
   * @param {number} value
   * @memberof Layer
   */


  OpenLayersLayer.prototype.setOpacity = function (value) {
    if (this.layer) {
      this.layer.setOpacity(value);
    }
  };

  OpenLayersLayer.prototype.setZIndex = function (index) {
    if (this.layer) {
      this.layer.setZIndex(index);
    }
  };
  /**
   * Returns whether the layer currently exists on the map.
   *
   * @returns {boolean}
   * @memberof Layer
   */


  OpenLayersLayer.prototype.exists = function () {
    var map = this.map;

    if (!map) {
      return false;
    } // return (map.getLayer(this.layerId) !== undefined);


    return false;
  };
  /**
   * Forces a redraw of the layer on the map.
   *
   * @returns
   * @memberof Layer
   */


  OpenLayersLayer.prototype.invalidate = function () {
    throw new Error('Subclasses must override `invalidate`');
  };

  return OpenLayersLayer;
}(_EventDispatcher.default);

var _default = OpenLayersLayer;
exports.default = _default;
module.exports = exports.default;