/// <reference types="googlemaps" />
import EventDispatcher from '../../../../../event/EventDispatcher';
/**
 * `Layer` is a container class that is responsible for creating and managing a Google Maps
 * source and associated layer representation on a Google Maps map.
 */
export default class GoogleLayer extends EventDispatcher {
    id: string;
    source: any;
    private _map;
    private _hidden;
    private _relativeTo;
    protected _targetIndex: number;
    constructor(layer: string, id?: string);
    /**
     * Map currently associated with the layer.
     *
     * @readonly
     * @type {google.maps.Map}
     * @memberof Layer
     */
    readonly map: google.maps.Map;
    /**
     * Returns whether the layer is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof Layer
     */
    readonly isHidden: boolean;
    /**
     * Adds the layer to the specified map.
     *
     * @param {google.maps.Map} map
     * @param {number} index
     * @memberof Layer
     */
    addTo(map: google.maps.Map, index?: number): void;
    /**
     * Removes the layer from the map it is currently active on.
     *
     * @returns
     * @memberof Layer
     */
    remove(): void;
    /**
     * Shows the layer on the map.
     *
     * @memberof Layer
     */
    show(): void;
    /**
     * Hides the layer on the map.
     *
     * @memberof Layer
     */
    hide(): void;
    /**
     * Changes the opacity of the layer.
     *
     * @param {number} value
     * @memberof Layer
     */
    setOpacity(value: number): void;
    setZIndex(index: number): void;
    /**
     * Returns whether the layer currently exists on the map.
     *
     * @returns {boolean}
     * @memberof Layer
     */
    exists(): boolean;
    /**
     * Forces a redraw of the layer on the map.
     *
     * @returns
     * @memberof Layer
     */
    invalidate(): void;
}
