"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

var _utils = require("../../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var GoogleTileLayer =
/** @class */
function (_super) {
  __extends(GoogleTileLayer, _super);

  function GoogleTileLayer(layer, id) {
    if (id === void 0) {
      id = undefined;
    }

    var _this = _super.call(this, layer, id) || this;

    _this._opts = {};
    _this._opts.opacity = 1;
    _this._layer = new google.maps.ImageMapType({
      tileSize: new google.maps.Size(256, 256),
      getTileUrl: function (tileCoord, zoom) {
        var url = _this._opts.url;

        if (!(0, _utils.isset)(url)) {
          return null;
        }

        var vars = {
          x: tileCoord.x,
          y: tileCoord.y,
          z: zoom
        };
        Object.keys(vars).forEach(function (k) {
          url = url.replace(new RegExp("{" + k + "}"), "" + vars[k]);
        });
        return url;
      }
    });

    _this._layer.addListener('tilesloaded', function () {
      _this.trigger('load', {
        overlay: _this._layer
      });
    });

    return _this;
  }

  Object.defineProperty(GoogleTileLayer.prototype, "layer", {
    get: function () {
      return this._layer;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Updates the tile or image url for the layer.
   *
   * @param {string} url
   * @memberof TileLayer
   */

  GoogleTileLayer.prototype.setUrl = function (url) {
    this._opts.url = url;

    if (this.map) {
      this.invalidate();
    }
  };
  /**
   * Adds the layer to the specified map.
   *
   * @param {google.maps.Map} map
   * @param {number} index
   * @memberof Layer
   */


  GoogleTileLayer.prototype.addTo = function (map, index) {
    _super.prototype.addTo.call(this, map);

    this.map.overlayMapTypes.push(this.layer);
  };
  /**
   * Removes the layer from the map it is currently active on.
   *
   * @returns
   * @memberof Layer
   */


  GoogleTileLayer.prototype.remove = function () {
    if (this.map) {
      var overlayIndex = this.map.overlayMapTypes.getArray().indexOf(this.layer);

      if (overlayIndex !== -1) {
        this.map.overlayMapTypes.removeAt(overlayIndex);
      }
    }

    _super.prototype.remove.call(this);
  };
  /**
   * Shows the layer on the map.
   *
   * @memberof Layer
   */


  GoogleTileLayer.prototype.show = function () {
    _super.prototype.show.call(this);

    if (this.layer) {
      this.layer.setOpacity(this._opts.opacity);
    }
  };
  /**
   * Hides the layer on the map.
   *
   * @memberof Layer
   */


  GoogleTileLayer.prototype.hide = function () {
    _super.prototype.hide.call(this);

    if (this.layer) {
      this.layer.setOpacity(0);
    }
  };
  /**
   * Changes the opacity of the layer.
   *
   * @param {number} value
   * @memberof Layer
   */


  GoogleTileLayer.prototype.setOpacity = function (value) {
    this._opts.opacity = value;

    if (this.layer) {
      this.layer.setOpacity(value);
    }
  };

  GoogleTileLayer.prototype.setZIndex = function (index) {
    console.warn('[Aeris] - Google Maps does not currently support changing the zIndex for an existing tile layer');
  };
  /**
   * Forces a redraw of the layer on the map.
   *
   * @returns
   * @memberof Layer
   */


  GoogleTileLayer.prototype.invalidate = function () {
    var _this = this;

    var map = this.map;
    this.remove();
    setTimeout(function () {
      _this.addTo(map);
    }, 200);
  };

  return GoogleTileLayer;
}(_Layer.default);

var _default = GoogleTileLayer;
exports.default = _default;
module.exports = exports.default;