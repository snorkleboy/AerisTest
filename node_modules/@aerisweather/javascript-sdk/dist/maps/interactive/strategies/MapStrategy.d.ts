import EventDispatcher from '../../../event/EventDispatcher';
import { IMapStrategyDataSource } from '../../interfaces/IMapStrategy';
import IOverlayFactory from '../../interfaces/IOverlayFactory';
import { TileSource } from '../sources';
import { MarkerOptions } from '../style/MarkerStyle';
import { ICoordinate } from '../../../interfaces/ICoordinate';
/**
 * An abstract map strategy class that provides the core functionality required for a specific
 * mapping strategy. This class should be subclassed per each strategy instead of being
 * instantiated directly.
 *
 * @export
 * @class MapStrategy
 * @extends {EventDispatcher}
 */
export default class MapStrategy<Map, OverlayFactory extends IOverlayFactory> extends EventDispatcher {
    dataSource: IMapStrategyDataSource;
    protected _map: Map;
    protected _factory: OverlayFactory;
    protected _eventMapping: {
        [key: string]: string | string[];
    };
    protected _setInitialView: boolean;
    private _opts;
    private _ready;
    private _sources;
    private _sourceOrder;
    constructor(target: HTMLElement | HTMLElement[] | string | Map, opts?: any);
    readonly $el: any;
    readonly map: Map;
    readonly factory: OverlayFactory;
    readonly opts: {
        [key: string]: any;
    };
    isReady(): boolean;
    private init;
    protected loadDependencies(): Promise<void>;
    protected setupMap(target: any): void;
    setView(center: ICoordinate, zoom: number): void;
    setCenter(coord: ICoordinate): void;
    setZoom(zoom: number): void;
    /** Sources */
    addSource(source: any): void;
    removeSource(source: any): void;
    isTile(source: any): boolean;
    isVector(source: any): boolean;
    isText(source: any): boolean;
    isMarker(el: any): boolean;
    isPolygon(el: any): boolean;
    isPolyline(el: any): boolean;
    /** Overlays */
    addOverlay(overlay: any): void;
    addOverlays(overlays: any[]): void;
    removeOverlay(overlay: any): void;
    removeOverlays(overlays: any[]): void;
    /** Markers */
    addMarker(marker: any, data?: any): void;
    addMarkers(markers: any[]): void;
    removeMarker(marker: any): void;
    removeMarkers(markers: any[]): void;
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    bindCalloutToMarker(marker: any, content: string): void;
    /** Polygons & Polylines */
    addShape(shape: any, data?: any): void;
    addShapes(shapes: any[], data?: any): void;
    removeShape(shape: any): void;
    removeShapes(shapes: any[]): void;
    showShape(shape: any): void;
    showShapes(shapes: any[]): void;
    hideShape(shape: any): void;
    hideShapes(shapes: any[]): void;
    /** Callout */
    showCallout(marker: any, content: any): void;
    clear(): void;
    protected _setupEvents(): void;
    protected _shouldTriggerEvent(name: string): boolean;
    protected _dataForMapEvent(name: string, event: Event): any;
    tileLayer(layer: string, date: Date, opts?: any): TileSource;
}
