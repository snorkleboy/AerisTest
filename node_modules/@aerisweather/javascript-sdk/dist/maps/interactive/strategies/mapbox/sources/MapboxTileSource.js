"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _TileSource = _interopRequireDefault(require("../../../sources/TileSource"));

var _TileLayer = _interopRequireDefault(require("../layers/TileLayer"));

var _Mercator = require("../../../../proj/Mercator");

var _MapRequest = require("../../../../../network/maps/MapRequest");

var _utils = require("../../../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * `MapboxTileSource` is a subclass of `TileSource` that creates and manages a single tile layer to
 * be used with an `MapboxMapStrategy`.
 *
 * @export
 * @class MapboxTileSource
 * @extends {TileSource}
 */
var MapboxTileSource =
/** @class */
function (_super) {
  __extends(MapboxTileSource, _super);

  function MapboxTileSource(key, service, opts) {
    var _this = _super.call(this, key, service, (0, _utils.extend)({
      animation: {
        type: 'image'
      }
    }, opts)) || this;

    _this._overlay = new _TileLayer.default(key);
    _this._animationOverlay = new _TileLayer.default(key, 'image', key + "-anim");

    if (opts.id) {
      _this._overlay.id = opts.id;
      _this._animationOverlay.id = opts.id + "-anim";
    }

    var opacity = (0, _utils.get)(opts, 'style.opacity');

    if ((0, _utils.isset)(opacity)) {
      _this._overlay.setOpacity(opacity);

      _this._animationOverlay.setOpacity(opacity);
    }

    _this._overlay.parentId = (0, _utils.get)(opts, 'style.belowLayer');
    _this._animationOverlay.parentId = _this._overlay.layerId;
    _this.timestamp = _this._opts.time;
    var animOverlay = _this._animationOverlay;
    var anim = _this.animation;
    anim.provider = _this;
    anim.on('show', function (e) {
      _this.show();
    });
    anim.on('hide', function (e) {
      _this.hide();
    });
    anim.on('play load:progress', function (e) {
      if (!animOverlay.map) {
        animOverlay.addTo(_this.overlay.map);
      }

      if (_this.isVisible()) {
        _this.overlay.hide();

        animOverlay.show();
      }
    });
    anim.on('stop', function (e) {
      animOverlay.hide();

      _this.overlay.show();
    });
    anim.on('load:image advance:image', function (e) {
      var image = e.data.img;

      if (image) {
        animOverlay.setImage(image.src);
      }
    });
    return _this;
  }

  Object.defineProperty(MapboxTileSource.prototype, "overlay", {
    get: function () {
      return this._overlay;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxTileSource.prototype, "timestamp", {
    set: function (value) {
      value = new Date(value.getFullYear(), value.getMonth(), value.getDate(), value.getHours(), value.getMinutes()); // eslint-disable-line max-len

      if (!this._timestamp || value.getTime() !== this._timestamp.getTime()) {
        this._timestamp = value;

        if (this.isAnimating() === false) {
          this.updateVisibility();
        }

        if (this.overlay && (this.canShow() || !this.overlay.exists())) {
          this.overlay.setUrl(this.urlTemplate());
        }
      }
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Shows the layer associated with the source.
   *
   * @memberof MapboxTileSource
   */

  MapboxTileSource.prototype.show = function () {
    this._hidden = false;

    if (this.animation.isAnimating() && this._animationOverlay) {
      this._animationOverlay.show();
    } else if (this.overlay) {
      this.overlay.show();
    }
  };
  /**
   * Hides the layer associated with the source.
   *
   * @memberof MapboxTileSource
   */


  MapboxTileSource.prototype.hide = function () {
    this._hidden = true;

    if (this.overlay) {
      this.overlay.hide();
    }

    if (this._animationOverlay) {
      this._animationOverlay.hide();
    }
  };
  /**
   * Flags the source for removal from the managing map strategy.
   *
   * @memberof MapboxTileSource
   */


  MapboxTileSource.prototype.remove = function () {
    this.trigger('layer:remove', {
      layer: this.overlay
    });
  };
  /**
   * Changes the opacity of source's layer.
   *
   * @param {number} value
   * @memberof MapboxTileSource
   */


  MapboxTileSource.prototype.setOpacity = function (value) {
    this._opacity = value;

    if (this.overlay) {
      this.overlay.setOpacity(value);
    }

    if (this._animationOverlay) {
      this._animationOverlay.setOpacity(value);
    }
  };
  /**
   * Changes the z-index of the source's layer.
   *
   * @param {number} value
   * @memberof MapboxTileSource
   */


  MapboxTileSource.prototype.setOrder = function (value) {
    if (this.overlay) {
      this.overlay.setZIndex(value);
    }

    if (this._animationOverlay) {
      this._animationOverlay.setZIndex(value);
    }
  };
  /**
   * Animation Providers
   */


  MapboxTileSource.prototype.animationUrlForDate = function (animation, date) {
    var map = this.overlay.map;

    if (!map) {
      return null;
    }

    var b = map.getBounds();
    var zoom = map.getZoom() + 1;

    var tl = _Mercator.Mercator.coordToTile({
      lat: b.getNorth(),
      lon: b.getWest()
    }, zoom);

    var br = _Mercator.Mercator.coordToTile({
      lat: b.getSouth(),
      lon: b.getEast()
    }, zoom);

    var nw = _Mercator.Mercator.tileToCoord(tl, zoom);

    var se = _Mercator.Mercator.tileToCoord({
      x: br.x + 1,
      y: br.y + 1
    }, zoom);

    var size = {
      width: (Math.abs(tl.x - br.x) + 1) * 256,
      height: (Math.abs(tl.y - br.y) + 1) * 256
    };
    var bounds = {
      north: nw.lat,
      south: se.lat,
      west: nw.lon,
      east: se.lon
    };
    var request = this.service.clone().type(_MapRequest.MapRequestType.IMAGE);
    request.bounds(bounds).zoom(zoom).size(size.width, size.height).date(date); // this._animationOverlay.setUrl(request.url());

    this._animationOverlay.setBounds(bounds);

    return request.url();
  };

  MapboxTileSource.prototype.animationSizeForImage = function (animation) {
    return {
      width: 100,
      height: 100
    };
  };

  return MapboxTileSource;
}(_TileSource.default);

var _default = MapboxTileSource;
exports.default = _default;
module.exports = exports.default;