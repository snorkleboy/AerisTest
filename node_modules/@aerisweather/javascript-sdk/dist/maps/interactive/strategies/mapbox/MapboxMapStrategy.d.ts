/// <reference types="mapbox-gl" />
import MapStrategy from '../MapStrategy';
import IMapStrategy from '../../../interfaces/IMapStrategy';
import MapboxOverlayFactory from './MapboxOverlayFactory';
import { MarkerOptions } from '../../style/MarkerStyle';
import { ICoordinate, ICoordinateBounds, IPoint } from '../../../../interfaces/ICoordinate';
declare global {
    const mapboxgl: any;
}
/**
 * A map strategy for working with the third-party Mapbox GL mapping library.
 *
 * @export
 * @class MapboxMapStrategy
 * @extends {EventDispatcher}
 * @implements {IMapStrategy}
 */
export default class MapboxMapStrategy extends MapStrategy<mapboxgl.Map, MapboxOverlayFactory> implements IMapStrategy {
    private _pointAnimationUpdates;
    private _shapeDataById;
    private _clickedMapLayer;
    private _currentMapStyle;
    readonly $el: any;
    constructor(target: HTMLElement | HTMLElement[] | string | mapboxgl.Map, opts?: any);
    protected loadDependencies(): Promise<void>;
    protected setupMap(target: HTMLElement | HTMLElement[] | string | mapboxgl.Map): void;
    /**
     * Updates the base map style using a Mapbox style URL.
     *
     * @param {string} style
     * @returns
     * @memberof MapboxMapStrategy
     */
    setStyle(style: string): void;
    setView(center: ICoordinate, zoom: number): void;
    getCenter(): ICoordinate;
    setCenter(coord: ICoordinate): void;
    getZoom(): number;
    setZoom(zoom: number): void;
    getBounds(): ICoordinateBounds;
    setBounds(bounds: ICoordinateBounds): void;
    fitBounds(bounds: ICoordinateBounds, padding?: number[]): void;
    /** Sources */
    isTile(source: any): boolean;
    isMarker(el: any): boolean;
    isPolygon(el: any): boolean;
    isPolyline(el: any): boolean;
    addSource(source: any): void;
    /** Overlays */
    addOverlay(overlay: any): void;
    removeOverlay(overlay: any): void;
    /** Markers */
    addMarker(marker: any, data?: any): void;
    removeMarker(marker: any): void;
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    /** Polygons & Polylines */
    addShape(shape: any, data?: any): void;
    removeShape(shape: any): void;
    showShape(shape: any): void;
    hideShape(shape: any): void;
    /** Conversions */
    coordToPoint(coord: ICoordinate): IPoint;
    pointToCoord(point: IPoint): ICoordinate;
    /** Callout */
    showCallout(target: any, content: any): void;
    protected _setupEvents(): void;
    protected _shouldTriggerEvent(name: string): boolean;
    protected _dataForMapEvent(name: string, event: any): any;
}
