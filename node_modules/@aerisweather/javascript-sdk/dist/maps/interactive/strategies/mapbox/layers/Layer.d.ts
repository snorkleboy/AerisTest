/// <reference types="mapbox-gl" />
/**
 * `Layer` is a container class that is responsible for creating and managing a Mapbox
 * source and associated layer representation on a Mapbox map.
 */
export default class MapboxLayer {
    source: any;
    layer: mapboxgl.Layer;
    private _id;
    private _idPrefix;
    private _map;
    private _relativeTo;
    private _hidden;
    protected _opacity: number;
    constructor(layer: string, id?: string);
    /**
     * Returns the unique identifier for the layer.
     *
     * @type {string}
     * @memberof MapboxLayer
     */
    /**
    * Sets the unique identifier for the layer.
    *
    * @memberof MapboxLayer
    */
    id: string;
    /**
     * Source identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof Layer
     */
    readonly sourceId: string;
    /**
     * Layer identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof Layer
     */
    readonly layerId: string;
    /**
     * Map currently associated with the layer.
     *
     * @readonly
     * @type {mapboxgl.Map}
     * @memberof Layer
     */
    readonly map: mapboxgl.Map;
    /**
     * The parent layer identifier for the layer, if any. When specified, this layer will be
     * rendered on the map below the layer associated with the parent identifier.
     *
     * @type {string}
     * @memberof Layer
     */
    parentId: string;
    /**
     * Returns whether the layer is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof Layer
     */
    readonly isHidden: boolean;
    /**
     * Adds the layer to the specified map.
     *
     * @param {mapboxgl.Map} map
     * @memberof Layer
     */
    addTo(map: mapboxgl.Map): void;
    /**
     * Removes the layer from the map it is currently active on.
     *
     * @returns
     * @memberof Layer
     */
    remove(): void;
    /**
     * Shows the layer on the map.
     *
     * @memberof Layer
     */
    show(): void;
    /**
     * Hides the layer on the map.
     *
     * @memberof Layer
     */
    hide(): void;
    /**
     * Changes the opacity of the layer.
     *
     * @param {number} value
     * @memberof Layer
     */
    setOpacity(value: number): void;
    setZIndex(value: number): void;
    /**
     * Returns whether the layer currently exists on the map.
     *
     * @returns {boolean}
     * @memberof Layer
     */
    exists(): boolean;
    /**
     * Forces a redraw of the layer on the map.
     *
     * @returns
     * @memberof Layer
     */
    invalidate(): void;
}
