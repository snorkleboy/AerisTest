import TileSource, { TileSourceOptions } from '../../../sources/TileSource';
import TileLayer from '../layers/TileLayer';
import { ISize } from '../../../../../interfaces/ICoordinate';
import MapRequest from '../../../../../network/maps/MapRequest';
import ImageAnimation, { ImageAnimationProvider } from '../../../../anim/ImageAnimation';
/**
 * `MapboxTileSource` is a subclass of `TileSource` that creates and manages a single tile layer to
 * be used with an `MapboxMapStrategy`.
 *
 * @export
 * @class MapboxTileSource
 * @extends {TileSource}
 */
export default class MapboxTileSource extends TileSource implements ImageAnimationProvider {
    private _animationOverlay;
    constructor(key: string, service: MapRequest, opts?: TileSourceOptions);
    readonly overlay: TileLayer;
    timestamp: Date;
    /**
     * Shows the layer associated with the source.
     *
     * @memberof MapboxTileSource
     */
    show(): void;
    /**
     * Hides the layer associated with the source.
     *
     * @memberof MapboxTileSource
     */
    hide(): void;
    /**
     * Flags the source for removal from the managing map strategy.
     *
     * @memberof MapboxTileSource
     */
    remove(): void;
    /**
     * Changes the opacity of source's layer.
     *
     * @param {number} value
     * @memberof MapboxTileSource
     */
    setOpacity(value: number): void;
    /**
     * Changes the z-index of the source's layer.
     *
     * @param {number} value
     * @memberof MapboxTileSource
     */
    setOrder(value: number): void;
    /**
     * Animation Providers
     */
    animationUrlForDate(animation: ImageAnimation, date: Date): string;
    animationSizeForImage(animation: ImageAnimation): ISize;
}
