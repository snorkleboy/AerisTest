"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/mapbox-gl/index.d.ts" />

/* eslint-enable spaced-comment */

/**
 * `Layer` is a container class that is responsible for creating and managing a Mapbox
 * source and associated layer representation on a Mapbox map.
 */
var MapboxLayer =
/** @class */
function () {
  function MapboxLayer(layer, id) {
    if (id === void 0) {
      id = undefined;
    }

    this._hidden = false; // layer = layer.replace(/\:.+$/, '');

    this._idPrefix = "aeris-layer";
    this._id = id || layer;
    this._opacity = 1;
  }

  Object.defineProperty(MapboxLayer.prototype, "id", {
    /**
     * Returns the unique identifier for the layer.
     *
     * @type {string}
     * @memberof MapboxLayer
     */
    get: function () {
      return this._id;
    },

    /**
     * Sets the unique identifier for the layer.
     *
     * @memberof MapboxLayer
     */
    set: function (value) {
      this._id = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxLayer.prototype, "sourceId", {
    /**
     * Source identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof Layer
     */
    get: function () {
      var id = this.id ? "-" + this.id : '';
      return "" + this._idPrefix + id + "-source";
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxLayer.prototype, "layerId", {
    /**
     * Layer identifier on the map.
     *
     * @readonly
     * @type {string}
     * @memberof Layer
     */
    get: function () {
      var id = this.id ? "-" + this.id : '';
      return "" + this._idPrefix + id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxLayer.prototype, "map", {
    /**
     * Map currently associated with the layer.
     *
     * @readonly
     * @type {mapboxgl.Map}
     * @memberof Layer
     */
    get: function () {
      return this._map;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxLayer.prototype, "parentId", {
    /**
     * The parent layer identifier for the layer, if any. When specified, this layer will be
     * rendered on the map below the layer associated with the parent identifier.
     *
     * @type {string}
     * @memberof Layer
     */
    get: function () {
      return this._relativeTo;
    },
    set: function (value) {
      this._relativeTo = value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapboxLayer.prototype, "isHidden", {
    /**
     * Returns whether the layer is currently hidden.
     *
     * @readonly
     * @type {boolean}
     * @memberof Layer
     */
    get: function () {
      return this._hidden;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds the layer to the specified map.
   *
   * @param {mapboxgl.Map} map
   * @memberof Layer
   */

  MapboxLayer.prototype.addTo = function (map) {
    var _this = this;

    if (this._map === map && this.exists()) {
      return;
    }

    this._map = map; // determine where to position this layer, typically below map labels/symbols but above roads

    if (!this._relativeTo) {
      var layers = map.getStyle().layers;
      layers.forEach(function (layer, index) {
        if (layer.type === 'line' && /^admin-/.test(layer.id) && !_this._relativeTo) {
          _this._relativeTo = layer.id;
        }
      });
    }

    var contains = map.getLayer(this.layerId) !== undefined;

    if (!contains) {
      if (!this.source) {
        this.invalidate();
      } else {
        map.addSource(this.sourceId, this.source);

        if (!this._relativeTo || map.getLayer(this._relativeTo) !== undefined) {
          map.addLayer(this.layer, this._relativeTo);
        }
      }
    }

    if (this.isHidden) {
      this.hide();
    }
  };
  /**
   * Removes the layer from the map it is currently active on.
   *
   * @returns
   * @memberof Layer
   */


  MapboxLayer.prototype.remove = function () {
    if (!this._map) return;
    var map = this._map;
    var contains = map.getLayer(this.layerId) !== undefined;

    if (contains) {
      map.removeLayer(this.layerId);
      map.removeSource(this.sourceId);
    }

    this._map = null;
  };
  /**
   * Shows the layer on the map.
   *
   * @memberof Layer
   */


  MapboxLayer.prototype.show = function () {
    this._hidden = false;

    if (this.exists()) {
      if (this.layer.type === 'raster') {
        this.map.setPaintProperty(this.layerId, 'raster-opacity', this._opacity);
      }

      this.map.setLayoutProperty(this.layerId, 'visibility', 'visible');
    }
  };
  /**
   * Hides the layer on the map.
   *
   * @memberof Layer
   */


  MapboxLayer.prototype.hide = function () {
    this._hidden = true;

    if (this.exists()) {
      this.map.setLayoutProperty(this.layerId, 'visibility', 'none');
    }
  };
  /**
   * Changes the opacity of the layer.
   *
   * @param {number} value
   * @memberof Layer
   */


  MapboxLayer.prototype.setOpacity = function (value) {
    this._opacity = value;

    if (this.exists() && this.layer.type === 'raster') {
      this.map.setPaintProperty(this.layerId, 'raster-opacity', value);
    }
  };

  MapboxLayer.prototype.setZIndex = function (value) {
    if (this.exists()) {
      var layers = this.map.getStyle().layers;
      var index_1 = 0;
      layers.forEach(function (layer, i) {
        if (layer.type === 'line' && /^admin-/.test(layer.id) && index_1 === 0) {
          index_1 = i;
        }
      });
      var target = layers.map(function (layer) {
        return layer.id;
      })[index_1 + value];
      this.map.removeLayer(this.layerId);
      this.map.addLayer(this.layer, target);
    }
  };
  /**
   * Returns whether the layer currently exists on the map.
   *
   * @returns {boolean}
   * @memberof Layer
   */


  MapboxLayer.prototype.exists = function () {
    var map = this.map;

    if (!map) {
      return false;
    }

    return map.getLayer(this.layerId) !== undefined && map.getSource(this.sourceId) !== undefined;
  };
  /**
   * Forces a redraw of the layer on the map.
   *
   * @returns
   * @memberof Layer
   */


  MapboxLayer.prototype.invalidate = function () {
    throw new Error('Subclasses must override `invalidate`');
  };

  return MapboxLayer;
}();

var _default = MapboxLayer;
exports.default = _default;
module.exports = exports.default;