import IOverlayFactory, { PolygonDef } from '../../../interfaces/IOverlayFactory';
import MapboxTileSource from './sources/MapboxTileSource';
import MapRequest from '../../../../network/maps/MapRequest';
import { MarkerStyle } from '../../style/MarkerStyle';
import ShapeStyle from '../../style/ShapeStyle';
import { ICoordinate } from '../../../../interfaces/ICoordinate';
/**
 * A factory class that generates and returns renderable map objects from data, such as tile layers
 * and annotations, as required by the associated mapping strategy.
 *
 * @export
 * @class MapboxOverlayFactory
 * @implements {IOverlayFactory}
 * @implements {IPointDataSource}
 */
export default class MapboxOverlayFactory implements IOverlayFactory {
    /**
     * Returns a tile layer instance configured with the specified url template string and options.
     *
     * @param {string} layer
     * @param {MapRequest} service
     * @param {*} [opts]
     * @returns {TileSource}
     * @memberof IOverlayFactory
     */
    tileLayer(layer: string, service: MapRequest, opts?: any): MapboxTileSource;
    /**
     * Returns an annotation, or marker, instance with the specified coordinate and configuration
     * options.
     *
     * @param {string} layer
     * @param {ICoordinate} coord
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    marker(layer: string, coord: ICoordinate, style: MarkerStyle): any;
    /**
     * Returns an annotation icon based on the provided configuration.
     *
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    markerIcon(style: MarkerStyle): any;
    /**
     * Returns a polygon instance configured for the specified layer code and configuration.
     *
     * @param {string} layer
     * @param {Polygon[]} shapes
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    polygon(layer: string, shapes: PolygonDef[], style: ShapeStyle): any;
    polyline(layer: string, points: ICoordinate[], style: ShapeStyle): any;
}
