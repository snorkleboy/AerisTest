"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Layer = _interopRequireDefault(require("./Layer"));

var strings = _interopRequireWildcard(require("../../../../../utils/strings"));

var _utils = require("../../../../../utils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
/* eslint-disable spaced-comment */
/// <reference path="../../../../../../node_modules/@types/mapbox-gl/index.d.ts" />

/* eslint-enable spaced-comment */


var MapboxPolylineLayer =
/** @class */
function (_super) {
  __extends(MapboxPolylineLayer, _super);

  function MapboxPolylineLayer(layer, points, opts) {
    if (opts === void 0) {
      opts = undefined;
    }

    var _this = _super.call(this, layer, opts.id) || this;

    _this._opts = {};
    _this._points = points; // convert camelcase style keys to hypenated strings

    opts = opts || {};
    Object.keys(opts.style).forEach(function (key) {
      var k = strings.hyphenate(key);

      if (k !== key) {
        opts.style[k] = opts.style[key];
        delete opts.style[key];
      }
    });
    _this._opts = opts;
    return _this;
  }

  MapboxPolylineLayer.prototype.invalidate = function () {
    this.source = {
      type: 'geojson',
      data: {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          geometry: {
            type: 'LineString',
            coordinates: this._points.map(function (point) {
              return [point.lon, point.lat];
            })
          }
        }]
      }
    };
    var style = (0, _utils.cloneDeep)(this._opts).style; // delete style.id;
    // delete style.fill;
    // delete style.stroke;

    this.layer = {
      id: this.layerId,
      type: 'line',
      source: this.sourceId,
      layout: {},
      paint: style
    };

    if (this.map) {
      var map = this.map;
      this.remove();
      this.addTo(map);
    }
  };

  MapboxPolylineLayer.prototype._style = function (key) {
    return this._opts[key];
  };

  return MapboxPolylineLayer;
}(_Layer.default);

var _default = MapboxPolylineLayer;
exports.default = _default;
module.exports = exports.default;