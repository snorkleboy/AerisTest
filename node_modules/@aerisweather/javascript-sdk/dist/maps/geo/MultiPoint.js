"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Point = _interopRequireDefault(require("./Point"));

var _CoordinateBounds = _interopRequireDefault(require("../../geo/CoordinateBounds"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultiPoint =
/** @class */
function () {
  function MultiPoint(coords) {
    if ((0, _utils.isEmpty)(coords)) {
      throw new Error('Invalid coordinates for MultiPoint');
    }

    this.points = coords.map(function (pointCoords) {
      return new _Point.default(pointCoords);
    });
    this.coordinates = this.points.map(function (point) {
      return point.coordinates;
    });
  }

  MultiPoint.prototype.toArray = function (reversed) {
    if (reversed === void 0) {
      reversed = false;
    }

    return this.points.map(function (point) {
      return point.toArray(reversed);
    });
  };

  MultiPoint.prototype.bounds = function () {
    var bounds = {
      north: null,
      south: null,
      west: null,
      east: null
    };
    this.coordinates.forEach(function (coord) {
      if ((0, _utils.isset)(coord.lat) && (0, _utils.isset)(coord.lon)) {
        bounds.north = Math.max(bounds.north, coord.lat);
        bounds.south = Math.min(bounds.south, coord.lat);
        bounds.west = Math.min(bounds.west, coord.lon);
        bounds.east = Math.max(bounds.east, coord.lon);
      }
    });
    return _CoordinateBounds.default.fromBounds(bounds);
  };

  return MultiPoint;
}();

var _default = MultiPoint;
exports.default = _default;
module.exports = exports.default;