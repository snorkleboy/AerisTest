"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.PolygonGeometry = void 0;

var _CoordinateBounds = _interopRequireDefault(require("../../geo/CoordinateBounds"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var PolygonGeometry =
/** @class */
function () {
  function PolygonGeometry(vertices) {
    if ((0, _utils.isEmpty)(vertices)) {
      throw new Error('Invalid vertices for PolygonGeometry');
    }

    this.coordinates = vertices.map(function (vertex) {
      if (vertex.length < 2) {
        throw new Error('Coordinate dimension count is less than 2');
      }

      var lon = vertex[0],
          lat = vertex[1];
      return {
        lat: lat,
        lon: lon
      };
    });
  }

  return PolygonGeometry;
}();

exports.PolygonGeometry = PolygonGeometry;

var Polygon =
/** @class */
function () {
  function Polygon(coords) {
    var _this = this;

    if ((0, _utils.isEmpty)(coords)) {
      throw new Error('Invalid coordinates for Polygon');
    }

    this.inner = [];
    this.coordinates = coords.map(function (vertices, index) {
      if (vertices.length < 4) {
        throw new Error('Vertex count in Polygon is less than 4');
      }

      var polygon = new PolygonGeometry(vertices);

      if (index === 0) {
        _this.outer = polygon;
      } else {
        _this.inner.push(polygon);
      }

      return polygon.coordinates; // return element.map((latlon: LatLonValue) => {
      // 	if (latlon.length < 2) {
      // 		throw new Error('Coordinate dimension count is less than 2');
      // 	}
      // 	const [ lon, lat ] = latlon;
      // 	return { lat, lon };
      // });
    });
  }

  Polygon.prototype.toArray = function (reversed) {
    if (reversed === void 0) {
      reversed = false;
    }

    return this.coordinates.map(function (polygon) {
      return polygon.map(function (coord) {
        return reversed ? [coord.lon, coord.lat] : [coord.lat, coord.lon];
      });
    });
  };

  Polygon.prototype.bounds = function () {
    return _CoordinateBounds.default.fromPoints(this.outer.coordinates);
  };

  return Polygon;
}();

var _default = Polygon;
exports.default = _default;