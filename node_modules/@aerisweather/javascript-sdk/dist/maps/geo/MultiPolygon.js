"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Polygon = _interopRequireDefault(require("./Polygon"));

var _CoordinateBounds = _interopRequireDefault(require("../../geo/CoordinateBounds"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MultiPolygon =
/** @class */
function () {
  function MultiPolygon(coords) {
    if ((0, _utils.isEmpty)(coords)) {
      throw new Error('Invalid coordinates for MultiPolygon');
    }

    this.polygons = coords.map(function (polyCoords) {
      return new _Polygon.default(polyCoords);
    });
    this.coordinates = this.polygons.map(function (polygon) {
      return polygon.coordinates;
    });
  }

  MultiPolygon.prototype.toArray = function (reversed) {
    if (reversed === void 0) {
      reversed = false;
    }

    return this.polygons.map(function (polygon) {
      return polygon.toArray(reversed);
    });
  };

  MultiPolygon.prototype.bounds = function () {
    var bounds = {
      north: null,
      south: null,
      west: null,
      east: null
    };
    this.polygons.forEach(function (polygon) {
      var b = polygon.bounds();

      if ((0, _utils.isset)(b)) {
        bounds.north = Math.max(bounds.north, b.north);
        bounds.south = Math.min(bounds.south, b.south);
        bounds.west = Math.min(bounds.west, b.west);
        bounds.east = Math.max(bounds.east, b.east);
      }
    });
    return _CoordinateBounds.default.fromBounds(bounds);
  };

  return MultiPolygon;
}();

var _default = MultiPolygon;
exports.default = _default;
module.exports = exports.default;