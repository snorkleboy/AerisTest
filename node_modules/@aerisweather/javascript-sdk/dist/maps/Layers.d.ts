import EventDispatcher from '../event/EventDispatcher';
/**
 * A data type that represents metadata for an Aeris Maps (AMP) layer modifier.
 */
export interface LayerModifier {
    /**
     * Modifier name.
     *
     * @type {string}
     * @memberof LayerModifier
     */
    name: string;
    /**
     * Modifier description.
     *
     * @type {string}
     * @memberof LayerModifier
     */
    description: string;
    /**
     * Whether the modifier is required as part of the layer.
     *
     * @type {boolean}
     * @memberof LayerModifier
     */
    required: boolean;
    /**
     * An array of supported modifier options.
     *
     * @type {{ id: string, label: string }[]}
     * @memberof LayerModifier
     */
    options: {
        id: string;
        label: string;
    }[];
}
/**
 * A data type that represents metadata for an Aeris Maps (AMP) layer.
 */
export declare type LayerConfig = {
    /**
     * Layer identifier.
     *
     * @type {string}
     */
    id: string;
    /**
     * Layer code.
     *
     * @type {string}
     */
    code?: string;
    /**
     * Layer category.
     *
     * @type {string}
     */
    category?: string;
    /**
     * Layer name.
     *
     * @type {string}
     */
    name: string;
    /**
     * Layer description.
     *
     * @type {string}
     */
    description?: string;
    /**
     * List of regions covered by the layer.
     *
     * @type {string}
     */
    regions?: string;
    /**
     * Layer update interval.
     *
     * @type {string}
     */
    interval?: string;
    /**
     * Layer thumbnail URL.
     *
     * @type {string}
     */
    thumbSrc?: string;
    /**
     * Array of modifier information supported by the layer.
     *
     * @type {LayerModifier[]}
     */
    modifiers?: LayerModifier[];
    /**
     * Array of Aeris account levels that are required for accessing the layer.
     *
     * @type {string[]}
     */
    bundle?: string[];
    /**
     * Legend source URL to use for the layer.
     *
     * @type {string}
     */
    legendSrc?: string;
    /**
     * Layer identifier to inherit metadata from.
     *
     * @type {string}
     */
    use?: string;
};
export declare const isPoint: (layer: string) => boolean;
export declare const isShape: (layer: string) => boolean;
export declare const isVector: (layer: string) => boolean;
export declare const isText: (layer: string) => boolean;
export declare const isTile: (layer: string) => boolean;
export declare const isValidLayer: (layer: string) => boolean;
/**
 * A `Layers` object is responsible for fetching and caching Aeris Maps (AMP) layers metadata as
 * well as providing utility methods for returning and comparing layer information.
 *
 * @export
 * @class Layers
 * @extends {EventDispatcher}
 */
export default class Layers extends EventDispatcher {
    private _groups;
    private _future;
    private _loading;
    /**
     * Initializes and returns a new Layers instance.
     *
     * Layer metadata will be requested immediate if it has not already been cached by the library.
     *
     * @memberof Layers
     */
    constructor();
    /**
     * Return the layer metadata.
     *
     * If the data has not already been loaded and cached, this method will perform a new
     * request before resolving the Promise with the data.
     *
     * @returns
     * @memberof Layers
     */
    fetch(): Promise<void | LayerConfig[]>;
    /**
     * Returns whether layer metadata is already cached.
     *
     * @returns {boolean}
     * @memberof Layers
     */
    cached(): boolean;
    /**
     * Returns whether layer metadata is currently being requested.
     *
     * @returns {boolean}
     * @memberof Layers
     */
    loading(): boolean;
    /**
     * Returns the layer groups.
     *
     * @returns {*}
     * @memberof Layers
     */
    groups(): any;
    /**
     * Returns whether the layer for the identifier is part of the specified group.
     *
     * If `strict` is `true`, then the check will perform an equal comparison rather than a simple
     * pattern match.
     *
     * @param {string} id
     * @param {string} group
     * @param {boolean} [strict=false]
     * @returns {boolean}
     * @memberof Layers
     */
    inGroup(id: string, group: string, strict?: boolean): boolean;
    /**
     * Returns whether the specified layer exists within AMP.
     *
     * @param {string} layer
     * @returns {boolean}
     * @memberof Layers
     */
    exists(layer: string): boolean;
    /**
     * Returns the layer metadata that matches the query based on the specified property and value.
     *
     * If `strict` is `true`, then the check will perform an equal comparison rather than a simple
     * pattern match.
     *
     * @param {string} prop
     * @param {*} value
     * @param {boolean} [strict=false]
     * @returns {LayerConfig}
     * @memberof Layers
     */
    find(prop: string, value: any, strict?: boolean): LayerConfig;
    /**
     * Returns an array of layer metadata for all layers that match the query based on the
     * specified property and values.
     *
     * If `strict` is `true`, then the check will perform an equal comparison rather than a simple
     * pattern match.
     *
     * @param {string} prop
     * @param {string[]} values
     * @param {boolean} [strict=false]
     * @returns {LayerConfig[]}
     * @memberof Layers
     */
    findAll(prop: string, values: string[], strict?: boolean): LayerConfig[];
    /**
     * Returns an array of future layer metadata.
     *
     * @returns {LayerConfig[]}
     * @memberof Layers
     */
    future(): LayerConfig[];
    /**
     * Returns an array of future layer identifiers.
     *
     * @returns {string[]}
     * @memberof Layers
     */
    futureCodes(): string[];
    /**
     * Returns whether the specified layer identifier is a future layer.
     *
     * @param {string} id
     * @returns {boolean}
     * @memberof Layers
     */
    isFuture(id: string): boolean;
    /**
     * Returns whether the specified layer identifier is a base layer.
     *
     * @param {string} id
     * @returns {boolean}
     * @memberof Layers
     */
    isBase(id: string): boolean;
    /**
     * Returns whether the specified layer identifier is an overlay layer.
     *
     * @param {string} id
     * @returns {boolean}
     * @memberof Layers
     */
    isOverlay(id: string): boolean;
    /**
     * Returns whether the specified layer identifier has metric data, specifically for text
     * layers.
     *
     * @param {string} id
     * @returns {boolean}
     * @memberof Layers
     */
    hasMetric(id: string): boolean;
    private _process;
    private _fetchLayerMetadata;
}
