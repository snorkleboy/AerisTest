import Animation, { AnimationOptions } from './Animation';
import ITileLayer from '../interfaces/ITileLayer';
/**
 * A data type that represents the configuration options for an tile-based animation.
 */
export declare type TileAnimationOptions = AnimationOptions & {
    /**
     * Whether the animation should remain visible while loading animation intervals.
     *
     * @type {boolean}
     */
    showWhenLoading?: boolean;
};
/**
 * An interface implemented by an object that provides tile layer data requested by a tile
 * animation.
 */
export interface ITileAnimationProvider {
    /**
     * Asks the data source for a tile layer instance for the specified date.
     *
     * @param {TileAnimation} animation
     * @param {Date} date
     * @returns {Promise<ITileLayer>}
     * @memberof ITileAnimationProvider
     */
    animationLayerForDate(animation: TileAnimation, date: Date): Promise<ITileLayer>;
}
/**
 * A `TileAnimation` object is a subclass of `Animation` that is responsible for loading and
 * managing a series of tile layers required for animation playback.
 */
export default class TileAnimation extends Animation {
    /**
     * The receiver's data provider
     *
     * @type {ITileAnimationProvider}
     * @memberof TileAnimation
     */
    provider: ITileAnimationProvider;
    protected opts: TileAnimationOptions;
    private _layersByTime;
    private _currentLayer;
    private _lastImageTime;
    private _loading;
    private _visible;
    private _hasLoaded;
    private _isReset;
    private _reloadTimer;
    showWhenLoading: boolean;
    /**
     * Initializes a new animation instance with the provided configuration.
     *
     * @param {TileAnimationOptions} [opts=null]
     * @memberof TileAnimation
     */
    constructor(opts?: TileAnimationOptions);
    /**
     * Returns the animation data keyed by time interval.
     *
     * @returns {{ [key: number]: any }}
     * @memberof TileAnimation
     */
    dataByTime(): {
        [key: number]: any;
    };
    /**
     * Begins playing the animation if not currently running.
     *
     * If images required for playback have not been loaded, then all images will be requested
     * before playback can begin.
     *
     * @returns
     * @memberof TileAnimation
     */
    play(): void;
    /**
     * Stops playing the animation if currently running.
     *
     * Starting the animation again using `start()` after calling `stop()` will restart the
     * animation from the beginning.
     *
     * @memberof TileAnimation
     */
    stop(): void;
    /**
     * Resets the animation to its original state.
     *
     * All images that were cached during animation playback will be removed and new images will
     * have to be requested again when playback begins.
     *
     * @memberof TileAnimation
     */
    reset(updateTime?: boolean): void;
    /**
     * Returns whether the animation is ready for playback.
     *
     * A tile animation is only ready once all images have been loaded.
     *
     * @returns {boolean}
     * @memberof TileAnimation
     */
    isReady(): boolean;
    /**
     * Returns whether the animation can animate based on whether or not animation data has
     * loaded or is already cached.
     *
     * @returns {boolean}
     * @memberof TileAnimation
     */
    canAnimate(): boolean;
    /**
     * Returns whether the animation is currently loading data.
     *
     * @returns {boolean}
     * @memberof TileAnimation
     */
    isLoading(): boolean;
    /**
     * Shows the animation content.
     *
     * @memberof TileAnimation
     */
    show(): void;
    /**
     * Hides the animation content.
     *
     * @memberof TileAnimation
     */
    hide(): void;
    /**
     * Returns whether the animation element is currently visible.
     *
     * @returns {boolean}
     * @memberof TileAnimation
     */
    isVisible(): boolean;
    /**
     * @ignore
     * Updates the animation by showing the appropriate tile layer for the specifyed time.
     *
     * @protected
     * @param {number} time
     * @memberof TileAnimation
     */
    protected _updateForTime(time: number): void;
    /**
     * @ignore
     * Returns the tile layer closest to the specified time.
     *
     * @private
     * @param {number} time
     * @returns {ITileLayer}
     * @memberof TileAnimation
     */
    private _frameClosestToTime;
    /**
     * @ignore
     * Returns whether animation layers are available.
     *
     * @private
     * @returns {boolean}
     * @memberof TileAnimation
     */
    private _hasImages;
    /**
     * @ignore
     * Returns the total number of animation layers.
     *
     * @private
     * @returns {number}
     * @memberof TileAnimation
     */
    private _totalImages;
    /**
     * @ignore
     * Loads all tile layers based on the required time intervals.
     *
     * @private
     * @returns
     * @memberof TileAnimation
     */
    private _load;
    /**
     * @ignore
     * Loads a single tile layer for the specified time.
     *
     * @private
     * @param {number} time
     * @param {boolean} cache
     * @param {() => void} callback
     * @returns
     * @memberof TileAnimation
     */
    private _loadInterval;
}
