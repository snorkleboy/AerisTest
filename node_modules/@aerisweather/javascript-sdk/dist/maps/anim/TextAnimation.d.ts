import { AnimationOptions } from './Animation';
import DataAnimation from './DataAnimation';
/**
 * A data type that represents annotation information associated with a specific time.
 */
export interface ITimeValueRepresentable {
    /**
     * A series of values for the representable keyed by timestamp.
     *
     * @type {{ [timestamp: number]: string }}
     * @memberof ITimeValueRepresentable
     */
    data: {
        [timestamp: number]: string;
    };
    /**
     * Renderable object that is added to a map view.
     *
     * @type {*}
     * @memberof ITimeValueRepresentable
     */
    renderable: any;
}
/**
 * A data type that represents a series of `ITimeValueRepresentable` objects keyed by unique
 * identifier.
 */
export declare type TextAnimationData = {
    [key: string]: ITimeValueRepresentable;
};
/**
 * A `TextAnimation` object is a subclass of `DataAnimation` that is responsible for managing a
 * series of text annotations required for animation playback.
 */
export default class TextAnimation extends DataAnimation {
    /**
     * Initializes a new animation instance with the provided configuration.
     *
     * @param {AnimationOptions} [opts=null]
     * @memberof TextAnimation
     */
    constructor(opts?: AnimationOptions);
    /**
     * @ignore
     * Updates the animation by showing the appropriate data for the specifyed time interval.
     *
     * @protected
     * @param {*} time
     * @returns
     * @memberof TextAnimation
     */
    protected _updateForTime(time: any): void;
    /**
     * @ignore
     * Prepares the data for animating by assigning each data element into the corresponding time
     * interval block.
     *
     * @protected
     * @param {*} items
     * @returns
     * @memberof TextAnimation
     */
    protected _prepareDataItems(items: any): void;
}
