import Animation, { AnimationOptions } from './Animation';
/**
 * A data type that represents the configuration options for an image-based animation.
 */
export declare type ImageAnimationOptions = AnimationOptions & {
    /**
     * Whether animation images should be sized based on the size given by the provider.
     *
     * @type {boolean}
     */
    autosize?: boolean;
    /**
     * Whether the animation should remain visible when playback has stopped.
     *
     * @type {boolean}
     */
    showWhenStopped?: boolean;
    /**
     * Whether the animation should remain visible while loading animation intervals.
     *
     * @type {boolean}
     */
    showWhenLoading?: boolean;
};
/**
 * An interface implemented by an object that provides image content requested by an image
 * animation.
 */
export interface ImageAnimationProvider {
    /**
     * Asks the data source for the image url to request for the specified date.
     *
     * @param {ImageAnimation} animation
     * @param {Date} date
     * @returns {string}
     * @memberof ImageAnimationProvider
     */
    animationUrlForDate(animation: ImageAnimation, date: Date): string;
    /**
     * Asks the data source for the image size to request.
     *
     * @param {ImageAnimation} animation
     * @returns {{ width: number, height: number }}
     * @memberof ImageAnimationProvider
     */
    animationSizeForImage(animation: ImageAnimation): {
        width: number;
        height: number;
    };
}
/**
 * A `ImageAnimation` object is a subclass of `Animation` that is responsible for managing a
 * series of images required for animation playback.
 */
export default class ImageAnimation extends Animation {
    element: any;
    /**
     * The receiver's data provider.
     *
     * @type {ImageAnimationProvider}
     * @memberof ImageAnimation
     */
    provider: ImageAnimationProvider;
    protected opts: ImageAnimationOptions;
    private _images;
    private _targets;
    private _currentImage;
    private _lastImageTime;
    private _idPrefix;
    private _loading;
    private _hasLoaded;
    private _isReset;
    private _reloadTimer;
    private _loaders;
    showWhenLoading: boolean;
    /**
     * Initializes a new animation instance with the provided DOM target and configuration.
     *
     * @param {HTMLElement} target
     * @param {ImageAnimationOptions} [opts=null]
     * @memberof ImageAnimation
     */
    constructor(target?: HTMLElement, opts?: ImageAnimationOptions);
    /**
     * Returns the animation data keyed by time interval.
     *
     * @returns {{ [key: number]: any }}
     * @memberof ImageAnimation
     */
    dataByTime(): {
        [key: number]: any;
    };
    /**
     * Begins playing the animation if not currently running.
     *
     * If images required for playback have not been loaded, then all images will be requested
     * before playback can begin.
     *
     * @returns
     * @memberof ImageAnimation
     */
    play(): void;
    /**
     * Stops playing the animation if currently running.
     *
     * Starting the animation again using `start()` after calling `stop()` will restart the
     * animation from the beginning.
     *
     * @memberof ImageAnimation
     */
    stop(): void;
    /**
     * Resets the animation to its original state.
     *
     * @memberof ImageAnimation
     */
    reset(updateTime?: boolean): void;
    /**
     * Returns whether the animation is ready for playback.
     *
     * An image animation is only ready once all images have been loaded.
     *
     * @returns {boolean}
     * @memberof ImageAnimation
     */
    isReady(): boolean;
    /**
     * Returns whether the animation can animate based on whether or not animation data has
     * loaded or is already cached.
     *
     * @returns {boolean}
     * @memberof ImageAnimation
     */
    canAnimate(): boolean;
    /**
     * Returns whether the animation is currently loading data.
     *
     * @returns {boolean}
     * @memberof ImageAnimation
     */
    isLoading(): boolean;
    /**
     * Shows the animation content.
     *
     * @memberof ImageAnimation
     */
    show(): void;
    /**
     * Hides the animation content.
     *
     * @memberof ImageAnimation
     */
    hide(): void;
    /**
     * Returns whether the animation container is currently visible.
     *
     * @returns {boolean}
     * @memberof ImageAnimation
     */
    isVisible(): boolean;
    private _target;
    /**
     * @ignore
     * Sets the visibility of currently active image.
     *
     * @private
     * @param {boolean} visible
     * @memberof ImageAnimation
     */
    private _setImageVisible;
    /**
     * @ignore
     * Updates the animation by showing the appropriate image for the specifyed time.
     *
     * @protected
     * @param {number} time
     * @memberof ImageAnimation
     */
    protected _updateForTime(time: number): void;
    /**
     * @ignore
     * Returns the image closest to the specified time.
     *
     * @private
     * @param {number} time
     * @returns {*}
     * @memberof ImageAnimation
     */
    private _imageClosestToTime;
    /**
     * @ignore
     * Returns whether animation images are available.
     *
     * @private
     * @returns {boolean}
     * @memberof ImageAnimation
     */
    private _hasImages;
    /**
     * @ignore
     * Returns the total number of animation images.
     *
     * @private
     * @returns {number}
     * @memberof ImageAnimation
     */
    private _totalImages;
    /**
     * @ignore
     * Loads all images based on the required time intervals.
     *
     * @private
     * @returns
     * @memberof ImageAnimation
     */
    private _load;
    /**
     * @ignore
     * Loads a single image for the specified time.
     *
     * @private
     * @param {number} time
     * @param {boolean} cache
     * @param {() => void} callback
     * @returns
     * @memberof ImageAnimation
     */
    private _loadInterval;
    /**
     * @ignore
     * Returns whether a DOM target for the animation has been defined.
     *
     * @private
     * @returns
     * @memberof ImageAnimation
     */
    private _hasDOMTarget;
}
