import { ICoordinate, IPoint, ISize, ICoordinateBounds } from '../../interfaces/ICoordinate';
/**
 * The `Mercator` module provides utility functions when working with a map in Mercator project,
 * such as converting between geographical coordinates and pixel coordinates and calculating
 * coordinate bounds.
 */
export declare module Mercator {
    /**
     * Returns the coordinate for the specified pixel location on a map.
     *
     * @param {number} x
     * @param {number} y
     * @param {number} zoom
     * @param {ICoordinate} [center=undefined]
     * @param {ISize} [size=undefined]
     * @returns {ICoordinate}
     */
    const pointToCoord: (x: number, y: number, zoom: number, center?: ICoordinate, size?: ISize) => ICoordinate;
    /**
     * Returns the pixel location for the specified pixel location on a map.
     *
     * @param {number} lat
     * @param {number} lon
     * @param {number} zoom
     * @param {ICoordinate} [center=undefined]
     * @param {ISize} [size=undefined]
     * @returns {IPoint}
     */
    const coordToPoint: (lat: number, lon: number, zoom: number, center?: ICoordinate, size?: ISize) => IPoint;
    /**
     * Returns the center coordinate for the specified coordinate bounds.
     *
     * @param {ICoordinateBounds} bounds
     * @returns {ICoordinate}
     */
    const getBoundsCenter: (bounds: ICoordinateBounds) => ICoordinate;
    /**
     * Returns the zoom level that best fits the given coordinate bounds based on the map size.
     *
     * @param {ICoordinateBounds} bounds
     * @param {ISize} size
     * @returns {number}
     */
    const getBoundsZoomLevel: (bounds: ICoordinateBounds, size: ISize) => number;
    /**
     * Returns the map size for the given coordinate bounds and zoom level.
     *
     * @param {ICoordinateBounds} bounds
     * @param {number} zoom
     * @returns {ISize}
     */
    const getSizeForBounds: (bounds: ICoordinateBounds, zoom: number) => ISize;
    /**
     * Returns a new coordinate bounds that best fits the given coordinate bounds based on the map
     * size and any amount of padding.
     *
     * @param {ICoordinateBounds} bounds
     * @param {ISize} size
     * @param {number} [padding=0]
     * @returns {ICoordinateBounds}
     */
    const getBoundsThatFits: (bounds: ICoordinateBounds, size: ISize, padding?: number) => ICoordinateBounds;
    /**
     * Returns the map tile coordinate that contains the given geographical coordinate based on a
     * specific zoom level.
     *
     * @param {ICoordinate} coord
     * @param {number} zoom
     * @returns {IPoint}
     */
    const coordToTile: (coord: ICoordinate, zoom: number) => IPoint;
    /**
     * Returns the geographical coordinate for the top-left corner of the given map tile
     * coordinate based on a specific zoom level.
     *
     * @param {IPoint} tile
     * @param {number} zoom
     * @returns {ICoordinate}
     */
    const tileToCoord: (tile: IPoint, zoom: number) => ICoordinate;
}
