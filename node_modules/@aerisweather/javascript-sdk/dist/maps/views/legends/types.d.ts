import Account from '../../../account/Account';
import { ISize } from '../../../interfaces/ICoordinate';
/**
 * An enumerated value representing a legend output type.
 *
 * @export
 * @enum {string}
 */
export declare enum LegendType {
    BAR = "bar",
    POINT = "point"
}
/**
 * An enumerated value representing a legend layout orientation.
 *
 * @export
 * @enum {string}
 */
export declare enum LegendOrientation {
    /** Vertical layout. */
    VERTICAL = "v",
    /** Horizontal layout. */
    HORIZONTAL = "h"
}
/**
 * An enumerated value representing a legend label position.
 *
 * @export
 * @enum {string}
 */
export declare enum LegendLabelPosition {
    /** Labels positioned below a legend color bar. Only supported with a horizontal legend orientation. */
    TOP = "t",
    /** Labels positioned above the legend color bar. Only supported with a horizontal legend orientation. */
    BOTTOM = "b",
    /** Labels positioned to the left of the legend color bar. Only supported with a vertical legend orientation. */
    LEFT = "l",
    /** Labels positioned to the right of the legend color bar. Only supported with a vertical legend orientation. */
    RIGHT = "r"
}
/**
 * A data type that represents the configuration options for a legend style.
 */
export declare type LegendStyle = {
    /**
     * Data value interval for which to draw cells between color stops.
     *
     * @type {number}
     */
    interval?: number | string;
    /**
     * Amount of horizontal and vertical padding between elements.
     *
     * @type {{ x: number, y: number }}
     */
    gutter?: {
        x: number;
        y: number;
    };
    /**
     * Circle radius for point-related legends.
     *
     * @type {number}
     */
    radius?: number;
    /**
     *
     *
     * @type {number}
     */
    columns?: number;
    /**
     * Whether to display value labels in Metric units.
     *
     * @type {boolean}
     */
    metric?: boolean;
    /**
     * Layout orientation (bar legends only).
     *
     * @type {LegendOrientation}
     */
    orientation?: LegendOrientation;
    /**
     * Bar legend cell styles.
     *
     * @type {{
     * 		size?: {
     * 			width: number;
     * 			height: number;
     * 		}
     * 	}}
     */
    cell?: {
        /**
         * Size for color cells in a bar legend.
         *
         * @type {{
         * 			width: number;
         * 			height: number;
         * 		}}
         */
        size?: {
            width: number;
            height: number;
        };
    };
    /**
     * Text label styles.
     *
     * @type {{
     * 		interval?: number;
     * 		position?: LegendLabelPosition;
     * 		fontsize?: number;
     * 		color?: string;
     * 	}}
     */
    label?: {
        /**
         * Data value interval for which to display value text labels.
         *
         * @type {number}
         */
        interval?: number | string;
        /**
         * Position of value labels relative to the color bar (bar legends only).
         *
         * @type {LegendLabelPosition}
         */
        position?: LegendLabelPosition;
        /**
         * Font size for text labels.
         *
         * @type {number}
         */
        fontsize?: number;
        /**
         * Text color for labels.
         *
         * @type {string}
         */
        color?: string;
    };
};
/**
 * A data type that represents the configuration options for a legend.
 */
export declare type LegendConfig = {
    /**
     * Legend type code.
     *
     * @type {string}
     */
    type?: string;
    /**
     * Legend title.
     *
     * @type {string}
     */
    title?: string;
    /**
     * Data value range to display in the legend.
     *
     * @type {[number]}
     */
    range?: [number];
    /**
     * Map layer codes associated with the legend type.
     *
     * @type {[string]}
     */
    layers?: [string];
    /**
     * Units configuration.
     *
     * @type {*}
     */
    units?: any;
    /**
     * Style options.
     *
     * @type {LegendStyle}
     */
    styles?: LegendStyle;
    /**
     * Legend type code to inherit options from.
     *
     * @type {string}
     */
    use?: string;
    /**
     * Whether the legend is a grouped legend.
     *
     * @type {boolean}
     */
    grouped?: boolean;
    items?: any;
    enabled?: boolean;
};
export declare type LegendMetadata = {
    [key: string]: LegendConfig;
};
/**
 * A data type that represents the configuration options for a legend.
 */
export declare type LegendOptions = {
    /**
     * Aeris account used when requesting data for dynamic legends.
     *
     * @type {Account}
     */
    account?: Account;
    title?: string;
    /**
     * Output size.
     *
     * @type {ISize}
     */
    size?: ISize;
    /**
     * Whether the view should be sized automatically based on its configuration.
     *
     * @type {boolean}
     */
    autosize?: boolean;
    /**
     * Output format.
     *
     * @type {('svg' | 'png')}
     */
    format?: 'svg' | 'png';
    /**
     * Whether data units should be output in Metric.
     *
     * @type {boolean}
     */
    metric?: boolean;
    /**
     * Style options.
     *
     * @type {LegendStyle}
     */
    styles?: LegendStyle;
    /**
     * Units configuration.
     *
     * @type {{
     * 		metric?: string;
     * 		imperial?: string;
     * 	}}
     */
    units?: {
        /**
         * Metric unit string.
         *
         * @type {string}
         */
        metric?: string;
        /**
         * Imperial unit string.
         *
         * @type {string}
         */
        imperial?: string;
    };
    filter?: string;
    keys?: string;
    within?: any;
};
/**
 * A data type that represents the configuration options for a grouped legend item.
 */
export declare type GroupedLegendType = LegendOptions & {
    /**
     * Width factor for this legend item in the group.
     *
     * @type {number}
     */
    factor?: number;
    /**
     * Size of the legend item.
     *
     * @type {ISize}
     */
    size?: ISize;
};
/**
 * A data type that represents the configuration options for a grouped legend.
 */
export declare type GroupedLegendOptions = LegendOptions & {
    /**
     * Object containing legend configuration options in the group keyed by legend type codes.
     *
     * @type {{ [key: string]: GroupedLegendType }}
     */
    types: {
        [key: string]: GroupedLegendType;
    };
};
/**
 * A data type that represents the configuration options for a legend image request.
 */
export declare type LegendImageOptions = {
    /**
     * Legend type code.
     *
     * @type {string}
     */
    type?: string;
    /**
     * Data value interval for color stops.
     *
     * @type {(string | number)}
     */
    interval?: string | number;
    /**
     * Data value range to include.
     *
     * @type {number[]}
     */
    range?: number[];
    /**
     * Text label options.
     *
     * @type {({
     * 		interval?: string | number;
     * 		fontsize?: number;
     * 		color?: string;
     * 		position?: LegendLabelPosition;
     * 		custom?: string;
     * 	})}
     */
    label?: {
        interval?: string | number;
        fontsize?: number;
        color?: string;
        position?: LegendLabelPosition;
        custom?: string;
    };
    /**
     * Bar legend cell options.
     *
     * @type {{
     * 		size?: ISize
     * 		pad?: number
     * 	}}
     */
    cell?: {
        /**
         * Cell size.
         *
         * @type {ISize}
         */
        size?: ISize;
        /**
         * Cell spacing.
         *
         * @type {number}
         */
        pad?: number;
    };
    /**
     * Layout orientation.
     *
     * @type {LegendOrientation}
     */
    orientation?: LegendOrientation;
    /**
     * Whether to render data in metric units.
     *
     * @type {boolean}
     */
    metric?: boolean;
    /**
     * Output size.
     *
     * @type {ISize}
     */
    size?: ISize;
    /**
     * Amount of spacing between elements in x and y directions.
     *
     * @type {{
     * 		x: number;
     * 		y: number;
     * 	}}
     */
    gutter?: {
        x: number;
        y: number;
    };
    /**
     * Whether the image should be sized automatically based on its configuration.
     *
     * @type {boolean}
     */
    autosize?: boolean;
    /**
     * Image output format.
     *
     * @type {string}
     */
    format?: string;
    /**
     * Circle radius for point legends.
     *
     * @type {number}
     */
    radius?: number;
    /**
     * Number of columns to restrict the legend elements to.
     *
     * @type {number}
     */
    columns?: number;
    keys?: string;
};
/**
 * A data type that represents the possible legend image request parameters.
 */
export declare type LegendRequestParams = {
    ls?: string;
    lc?: string;
    labels?: string;
    filter?: string;
    range?: number[];
    keys?: string;
    units?: string;
};
