"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../../event/EventDispatcher"));

var _Legend = _interopRequireDefault(require("./Legend"));

var _utils = require("../../../utils");

var _DOM = _interopRequireDefault(require("../../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A grouped legend is an object that is responsible for displaying and managing multiple related
 * legends within a single view along with title labels for each as required.
 *
 * @export
 * @class GroupedLegend
 * @implements {ILegendRenderable}
 */
var GroupedLegend =
/** @class */
function (_super) {
  __extends(GroupedLegend, _super);
  /**
   * Initializes and returns a grouped legend instance for the specified key and configuration
   * options.
   *
   * @param {string} key
   * @param {GroupedLegendOptions} opts
   * @memberof GroupedLegend
   */


  function GroupedLegend(key, opts) {
    var _this = _super.call(this) || this;

    _this._loaded = [];
    _this._key = key;
    _this._opts = (0, _utils.extend)({
      types: null
    }, opts);
    _this._target = (0, _DOM.default)("<div class=\"awxjs__legend awxjs__legend-group awxjs__legend-" + key + "\"></div>");
    _this._legends = {};

    if (_this._opts.types) {
      _this.trigger('load:start');

      Object.keys(_this._opts.types).forEach(function (type) {
        var config = (0, _utils.extend)({}, opts, (0, _utils.cloneDeep)(_this._opts.types[type]));
        delete config.types;
        var legend = new _Legend.default(type, config);
        legend.on('load:done', function () {
          _this._loaded.push(type);

          _this._checkLoaded();
        });
        _this._legends[type] = legend;

        _this.$el.append(legend.$el);
      });
    }

    return _this;
  }

  Object.defineProperty(GroupedLegend.prototype, "key", {
    /**
     * Key associated with the legend.
     *
     * @readonly
     * @type {string}
     * @memberof GroupedLegend
     */
    get: function () {
      return this._key;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GroupedLegend.prototype, "opts", {
    /**
     * Configuration options.
     *
     * @readonly
     * @type {GroupedLegendOptions}
     * @memberof GroupedLegend
     */
    get: function () {
      return this._opts;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GroupedLegend.prototype, "$el", {
    /**
     * DOM element for the legend.
     *
     * @readonly
     * @type {*}
     * @memberof GroupedLegend
     */
    get: function () {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Shows the legend DOM element.
   *
   * @memberof GroupedLegend
   */

  GroupedLegend.prototype.show = function () {
    this.$el.show();
  };
  /**
   * Hides the legend DOM element.
   *
   * @memberof GroupedLegend
   */


  GroupedLegend.prototype.hide = function () {
    this.$el.hide();
  };
  /**
   * Sets the size of the legend.
   *
   * @param {ISize} size
   * @memberof GroupedLegend
   */


  GroupedLegend.prototype.setSize = function (size) {
    var _this = this;

    Object.keys(this._legends).forEach(function (key) {
      var opts = _this.opts.types[key];
      var legend = _this._legends[key];
      legend.setSize({
        width: size.width * opts.factor,
        height: size.height
      });
    });
  };

  GroupedLegend.prototype.getSize = function () {
    var _this = this;

    var container = this.$el.bounds();
    var width = 0;
    var height = container.height;
    Object.keys(this._legends).forEach(function (key) {
      var legend = _this._legends[key];

      if (legend.$el) {
        var bounds = legend.$el.bounds();
        width += bounds.width;
        height = Math.max(height, bounds.height);
      }
    });
    return {
      width: width,
      height: height
    };
  };
  /**
   * Sets whether to display data values in Metric units.
   *
   * @param {boolean} metric
   * @memberof GroupedLegend
   */


  GroupedLegend.prototype.setMetric = function (metric) {
    var _this = this;

    Object.keys(this._legends).forEach(function (key) {
      var legend = _this._legends[key];
      legend.setMetric(metric);
    });
  };
  /**
   * Resets the legend by removing all existing images.
   *
   * @memberof GroupedLegend
   */


  GroupedLegend.prototype.reset = function () {
    this.$el.empty();
    this._legends = null;
    this._loaded = [];
  };
  /**
   * Forces the legend to update if needed.
   *
   * @param {*} [opts]
   * @memberof GroupedLegend
   */


  GroupedLegend.prototype.update = function (opts) {
    var _this = this;

    this.trigger('load:start');
    Object.keys(this._legends).forEach(function (key) {
      _this._legends[key].update();
    });
  };

  GroupedLegend.prototype._checkLoaded = function () {
    var _this = this;

    if (this._loaded.length === Object.keys(this._opts.types).length) {
      this.trigger('load:done');
      setTimeout(function () {
        var size = _this.getSize();

        _this.$el.css('width', size.width + "px");

        _this.trigger('resize', size);
      }, 150);
    }
  };

  return GroupedLegend;
}(_EventDispatcher.default);

var _default = GroupedLegend;
exports.default = _default;
module.exports = exports.default;