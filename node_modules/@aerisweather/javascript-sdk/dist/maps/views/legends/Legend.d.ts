import EventDispatcher from '../../../event/EventDispatcher';
import ILegendRenderable from '../../interfaces/ILegendRenderable';
import { LegendOptions } from './types';
import { ISize } from '../../../interfaces/ICoordinate';
import Account from '../../../account/Account';
/**
 * A legend implements the `ILegendRenderable` interface and is responsible for rendering a legend
 * image based on a specific legend configuration and style.
 *
 * @export
 * @class Legend
 * @implements {ILegendRenderable}
 */
export default class Legend extends EventDispatcher implements ILegendRenderable {
    private _key;
    private _opts;
    private _target;
    private _image;
    /**
     * Configuration options.
     *
     * @readonly
     * @type {LegendOptions}
     * @memberof Legend
     */
    readonly opts: LegendOptions;
    /**
     * Key associated with the legend.
     *
     * @readonly
     * @type {string}
     * @memberof Legend
     */
    readonly key: string;
    /**
     * Aeris account used when requesting data for dynamic legends.
     *
     * @readonly
     * @type {Account}
     * @memberof Legend
     */
    readonly account: Account;
    /**
     * DOM element for the legend.
     *
     * @readonly
     * @type {*}
     * @memberof Legend
     */
    readonly $el: any;
    /**
     * Initializes and returns a legend for the specified key and configuration options.
     *
     * @param {string} key
     * @param {LegendOptions} opts
     * @memberof Legend
     */
    constructor(key: string, opts: LegendOptions);
    /**
     * Shows the legend DOM element.
     *
     * @memberof Legend
     */
    show(): void;
    /**
     * Hides the legend DOM element.
     *
     * @memberof Legend
     */
    hide(): void;
    /**
     * Sets the size of the legend.
     *
     * @param {ISize} size
     * @memberof Legend
     */
    setSize(size: ISize): void;
    getSize(): ISize;
    /**
     * Sets whether to display data values in Metric units.
     *
     * @param {boolean} metric
     * @memberof Legend
     */
    setMetric(metric: boolean): void;
    /**
     * Returns the unit based on whether the legend is displaying values in Metric or Imperial.
     *
     * @returns {string}
     * @memberof Legend
     */
    units(): string;
    /**
     * Resets the legend by removing an existing image.
     *
     * @memberof Legend
     */
    reset(): void;
    /**
     * Forces the legend to update if needed.
     *
     * @param {*} [opts]
     * @memberof Legend
     */
    update(opts?: any): void;
    protected _update(): void;
    protected _load: () => void;
    private _url;
}
