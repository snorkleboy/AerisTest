import EventDispatcher from '../../../event/EventDispatcher';
import ILegendRenderable from '../../interfaces/ILegendRenderable';
import { GroupedLegendOptions } from './types';
import { ISize } from '../../../interfaces/ICoordinate';
/**
 * A grouped legend is an object that is responsible for displaying and managing multiple related
 * legends within a single view along with title labels for each as required.
 *
 * @export
 * @class GroupedLegend
 * @implements {ILegendRenderable}
 */
export default class GroupedLegend extends EventDispatcher implements ILegendRenderable {
    private _key;
    private _opts;
    private _target;
    private _legends;
    private _loaded;
    /**
     * Key associated with the legend.
     *
     * @readonly
     * @type {string}
     * @memberof GroupedLegend
     */
    readonly key: string;
    /**
     * Configuration options.
     *
     * @readonly
     * @type {GroupedLegendOptions}
     * @memberof GroupedLegend
     */
    readonly opts: GroupedLegendOptions;
    /**
     * DOM element for the legend.
     *
     * @readonly
     * @type {*}
     * @memberof GroupedLegend
     */
    readonly $el: any;
    /**
     * Initializes and returns a grouped legend instance for the specified key and configuration
     * options.
     *
     * @param {string} key
     * @param {GroupedLegendOptions} opts
     * @memberof GroupedLegend
     */
    constructor(key: string, opts: GroupedLegendOptions);
    /**
     * Shows the legend DOM element.
     *
     * @memberof GroupedLegend
     */
    show(): void;
    /**
     * Hides the legend DOM element.
     *
     * @memberof GroupedLegend
     */
    hide(): void;
    /**
     * Sets the size of the legend.
     *
     * @param {ISize} size
     * @memberof GroupedLegend
     */
    setSize(size: ISize): void;
    getSize(): ISize;
    /**
     * Sets whether to display data values in Metric units.
     *
     * @param {boolean} metric
     * @memberof GroupedLegend
     */
    setMetric(metric: boolean): void;
    /**
     * Resets the legend by removing all existing images.
     *
     * @memberof GroupedLegend
     */
    reset(): void;
    /**
     * Forces the legend to update if needed.
     *
     * @param {*} [opts]
     * @memberof GroupedLegend
     */
    update(opts?: any): void;
    private _checkLoaded;
}
