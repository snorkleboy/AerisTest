import Account from '../../../account/Account';
import { ICoordinate, ICoordinateBounds } from '../../../interfaces/ICoordinate';
import { AnimationOptions } from '../../anim/Animation';
import { IServers } from '../../../AerisWeather';
/**
 * A data type that represents the configuration options for map layers.
 */
export declare type MapConfigLayersOptions = {
    /**
     * Base layer codes, which will be rendered at the bottom of the layer stack.
     *
     * @type {string[]}
     */
    base?: string[];
    /**
     * Weather data layer codes, which will be rendered above base layers but below overlay layers.
     *
     * @type {string[]}
     */
    data?: string[];
    /**
     * Overlay layer codes, which will be rendered above data layers.
     *
     * @type {string[]}
     */
    overlays?: string[];
    /**
     * Text layer codes, which will be rendered at the top of the layer stack.
     *
     * @type {string[]}
     */
    text?: string[];
};
/**
 * A data type that represents the configuration options a map configuration instance.
 */
export declare type MapConfigOptions = {
    /**
     * Defines the layers to display on the map grouped by category.
     *
     * @type {MapConfigLayersOptions}
     */
    layers?: MapConfigLayersOptions;
    /**
     * Center of the map, either as a place string or coordinate object.
     *
     * @type {(string | ICoordinate)}
     */
    center?: string | ICoordinate;
    /**
     * Zoom level.
     *
     * @type {number}
     */
    zoom?: number;
    /**
     * Coordinate bounds of the visible region.
     *
     * @type {ICoordinateBounds}
     */
    bounds?: ICoordinateBounds;
    /**
     * Map size.
     *
     * @type {({
     * 		width?: number;
     * 		height?: number | 'auto';
     * 		factor?: number;
     * 	})}
     */
    size?: {
        /**
         * Image width
         *
         * @type {number}
         */
        width?: number;
        /**
         * Image height, which can either be a number or `auto`. If `auto` is used, then the image
         * height will be determined by the configured `width` and the value for `factor`.
         *
         * @type {(number | 'auto')}
         */
        height?: number | 'auto';
        /**
         * Aspect ratio of width-to-height. This value is used when calculating an `auto`
         * height based on the configured width.
         *
         * @type {number}
         */
        factor?: number;
    };
    /**
     * Time offset either as a UNIX timestamp as a string (e.g. `20180601174100`) or a relative offset as a string (e.g. `-6hours`).
     *
     * @type {(string)}
     */
    offset?: string;
    /**
     * Date and time either as a `Date` object or UNIX timestamp as a number (e.g. `20180601174100`).
     *
     * @type {(Date | number)}
     */
    date?: Date | number;
    /**
     * Whether corresponding future layers should automatically be added to the map when adding a
     * data layer when available. Default is `true`.
     *
     * @type {boolean}
     */
    autoFuture?: boolean;
    /**
     * Whether all layers should be combined together into a single image. This results in fewer
     * requests but increased map units since `base` and `overlay` layers will be requested each
     * time `data` and/or `text` layers change.
     *
     * Default value is `false`.
     *
     * @type {boolean}
     */
    combined?: boolean;
    /**
     * Whether text layers should display values in Metric units. Default is `false`.
     *
     * @type {boolean}
     */
    metric?: boolean;
};
/**
 * A data type that represents the configuration options for a map view's interface controls.
 */
export declare type MapControlOptions = {
    /**
     * The layer-related controls to display above the map view.
     */
    layers?: {
        /**
         * Button label title.
         */
        title: string;
        /**
         * Map data layer value.
         */
        value: string;
    }[];
    /**
     * The region/zoom-related controls to display along the bottom of the map view.
     */
    regions?: {
        /**
         * Button label title.
         */
        title: string;
        /**
         * Map zoom level.
         */
        zoom?: number;
        /**
         * Map center location, which can either be a place name (e.g. `seattle,wa`) or coordinate
         * (e.g. `{ lat: 39.5, lon: -120.5 }`).
         */
        center?: string | ICoordinate;
        /**
         * Region code. Map bounds will be updated to this region's coordinate bounds when selected
         * if the region has been defined.
         *
         * @see {Regions}
         */
        region?: number;
        /**
         * Map coordinate bounds.
         */
        bounds?: ICoordinateBounds;
    }[];
};
/**
 * A data type that represents the configuration options for a map view's overlays.
 */
export declare type MapOverlayOptions = {
    /**
     * Map title, which will be displayed in a title bar element across the top-left of the map
     * view. Title bar can be customized using CSS overrides as needed.
     */
    title?: string;
    /**
     * Timestamp output format.
     */
    timestamp?: string;
    /**
     * Optional branding element to display over the map view.
     *
     * Element can either be a static image (url) or and HTML string. If both properties are
     * provided, the HTML string will be used. This branding element can be customized using
     * CSS overrides as needed.
     */
    branding?: {
        /**
         * HTML string content. Takes precedence over `img` when both are provided.
         */
        html?: string;
        /**
         * URL for the image source.
         */
        img?: string;
    };
};
/**
 * A data type that represents the configuration options for a map view's animation.
 *
 * @type {{
 * 		enabled?: boolean;
 * 		autoplay?: boolean;
 * 		alwaysShowPast?: boolean;
 * 		alwaysShowFuture?: boolean;
 * }}
 */
export declare type MapAnimationOptions = AnimationOptions & {
    /**
     * Whether animation should be enabled for the map view. Default value is `true`.
     */
    enabled?: boolean;
    /**
     * Whether the animation should begin playing immediately when the map view is first rendered.
     * Default value is `false`.
     */
    autoplay?: boolean;
    /**
     * Whether the map view should display past data layers for both past and future time periods.
     * Default value is `false`.
     */
    alwaysShowPast?: boolean;
    /**
     * Whether the map view should display future data layers for both past and future time
     * periods. Default value is `false`.
     */
    alwaysShowFuture?: boolean;
};
/**
 * A data type that represents the configuration options for a `MapView` instance.
 */
export declare type MapViewOptions = {
    /**
     * Aeris account to use with the map view data.
     *
     * @type {Account}
     */
    account?: Account;
    /**
     * Base paths for the API servers to use with data and image requests.
     *
     * @type {IServers}
     */
    servers?: IServers;
    /**
     * Map configuration.
     */
    map?: MapConfigOptions;
    /**
     * Map controls configuration.
     */
    controls?: MapControlOptions;
    /**
     * Map animation configuration.
     */
    animation?: MapAnimationOptions;
    /**
     * Map overlays configuration.
     */
    overlays?: MapOverlayOptions;
};
