"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _ImageAnimation = _interopRequireDefault(require("../../anim/ImageAnimation"));

var _Timeline = _interopRequireDefault(require("../../anim/Timeline"));

var _utils = require("../../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MapViewAnimator =
/** @class */
function () {
  function MapViewAnimator(targets, opts) {
    this._targets = targets;
    this._opts = (0, _utils.extend)({
      enabled: true,
      autoplay: false,
      alwaysShowPast: false,
      alwaysShowFuture: false
    }, opts);
    this.init();
  }

  Object.defineProperty(MapViewAnimator.prototype, "timeline", {
    get: function () {
      return this._timeline;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapViewAnimator.prototype, "provider", {
    set: function (provider) {
      var _this = this;

      Object.keys(this.timeline.animations).forEach(function (key) {
        var anim = _this.timeline.animations[key];

        if (anim instanceof _ImageAnimation.default) {
          anim.provider = provider;
        }
      });
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapViewAnimator.prototype, "past", {
    get: function () {
      return this.timeline.get('past');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapViewAnimator.prototype, "future", {
    get: function () {
      return this.timeline.get('future');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapViewAnimator.prototype, "pastText", {
    get: function () {
      return this.timeline.get('pastText');
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(MapViewAnimator.prototype, "futureText", {
    get: function () {
      return this.timeline.get('futureText');
    },
    enumerable: true,
    configurable: true
  });

  MapViewAnimator.prototype.init = function () {
    var targets = this._targets;
    var tl = new _Timeline.default(this._opts);
    this._timeline = tl; // break up past and future layers into separate animations so we can show/hide their containers based on
    // the parent timeline animation's time

    if (targets.past) {
      var pastAnim = new _ImageAnimation.default(targets.past, (0, _utils.extend)({}, this._opts, {
        key: 'past',
        alwaysShow: this._opts.alwaysShowPast
      }));
      tl.add('past', pastAnim);
    }

    if (targets.future) {
      var futureAnim = new _ImageAnimation.default(targets.future, (0, _utils.extend)({}, this._opts, {
        key: 'future',
        future: true,
        alwaysShow: this._opts.alwaysShowFuture
      }));
      tl.add('future', futureAnim);
    }

    if (targets.pastText) {
      var pastTextAnim = new _ImageAnimation.default(targets.pastText, (0, _utils.extend)({}, this._opts, {
        key: 'pastText',
        alwaysShow: this._opts.alwaysShowPast
      }));
      tl.add('pastText', pastTextAnim);
    }

    if (targets.futureText) {
      var futureTextAnim = new _ImageAnimation.default(targets.futureText, (0, _utils.extend)({}, this._opts, {
        key: 'futureText',
        future: true,
        alwaysShow: this._opts.alwaysShowFuture
      }));
      tl.add('futureText', futureTextAnim);
    }
  };

  return MapViewAnimator;
}();

var _default = MapViewAnimator;
exports.default = _default;
module.exports = exports.default;