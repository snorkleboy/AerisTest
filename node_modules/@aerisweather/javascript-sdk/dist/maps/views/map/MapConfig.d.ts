import EventDispatcher from '../../../event/EventDispatcher';
import Layers from '../../Layers';
import { MapConfigOptions, MapConfigLayersOptions } from './types';
import { ICoordinate, ICoordinateBounds, ISize } from '../../../interfaces/ICoordinate';
/**
 * A map configuration object stores and manages various map-related options associated with a
 * `MapView` instance.
 *
 * @export
 * @class MapConfig
 * @extends {EventDispatcher}
 */
export default class MapConfig extends EventDispatcher {
    private _opts;
    private _layers;
    /**
     * Aeris Maps (AMP) layers metadata.
     *
     * @type {Layers}
     * @memberof MapConfig
     */
    layers: Layers;
    /**
     * Initializes and returns a map configuration instance for the specified map options.
     *
     * @param {MapConfigOptions} [opts=undefined]
     * @memberof MapConfig
     */
    constructor(opts?: MapConfigOptions);
    /**
     * Returns or sets an option by key.
     *
     * @param {string} key
     * @param {*} [value]
     * @returns {*}
     * @memberof MapConfig
     */
    opts(key: string, value?: any): any;
    /**
     * Returns the data layer codes.
     *
     * @returns {*}
     * @memberof MapConfig
     */
    data(): any;
    /**
     * Sets the data layer codes.
     *
     * @param {string[]} data
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setData(data: string[]): MapConfig;
    /**
     * Returns the base layer codes.
     *
     * @returns {*}
     * @memberof MapConfig
     */
    base(): any;
    /**
     * Sets the base layer codes.
     *
     * @param {string[]} base
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setBase(base: string[]): MapConfig;
    /**
     * Returns the overlay layer codes.
     *
     * @returns {*}
     * @memberof MapConfig
     */
    overlays(): any;
    /**
     * Sets the overlay layer codes.
     *
     * @param {string[]} overlays
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setOverlays(overlays: string[]): MapConfig;
    /**
     * Returns whether the layer configuration contains overlay layer codes.
     *
     * @returns {boolean}
     * @memberof MapConfig
     */
    hasOverlays(): boolean;
    /**
     * Returns the text layer codes.
     *
     * @returns {*}
     * @memberof MapConfig
     */
    text(): any;
    /**
     * Sets the text layer codes.
     *
     * @param {string[]} text
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setText(text: string[]): MapConfig;
    /**
     * Returns whether the layer configuration contains text layer codes.
     *
     * @returns {boolean}
     * @memberof MapConfig
     */
    hasText(): boolean;
    /**
     * Sets all layer codes grouped by category.
     *
     * @param {MapConfigLayersOptions} layers
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setLayers(layers: MapConfigLayersOptions): MapConfig;
    /**
     * Returns the time offset.
     *
     * @returns {string}
     * @memberof MapConfig
     */
    offset(): string;
    /**
     * Sets the time offset.
     *
     * @param {string} offset
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setOffset(offset: string): MapConfig;
    setDate(date: Date | number): void;
    /**
     * Returns the center place string or coordinate object.
     *
     * @returns {(string | ICoordinate)}
     * @memberof MapConfig
     */
    center(): string | ICoordinate;
    /**
     * Sets the center place string or coordinate object.
     *
     * @param {(ICoordinate | string)} center
     * @param {number} [zoom=null]
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setCenter(center: ICoordinate | string, zoom?: number): MapConfig;
    /**
     * Returns the zoom level.
     *
     * @returns {number}
     * @memberof MapConfig
     */
    zoom(): number;
    /**
     * Sets the zoom level.
     *
     * @param {number} zoom
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setZoom(zoom: number): MapConfig;
    /**
     * Returns the coordinate bounds.
     *
     * @returns {ICoordinateBounds}
     * @memberof MapConfig
     */
    bounds(): ICoordinateBounds;
    /**
     * Sets the coordinate bounds.
     *
     * @param {ICoordinateBounds} bounds
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setBounds(bounds: ICoordinateBounds): MapConfig;
    /**
     * Sets the center or coordinate bounds based on the specified region code.
     *
     * @param {string} key
     * @returns {MapConfig}
     * @memberof MapConfig
     * @see Regions
     */
    setRegion(key: string): MapConfig;
    /**
     * Returns the image size.
     *
     * @returns {ISize}
     * @memberof MapConfig
     */
    size(): ISize;
    /**
     * Sets the image size.
     *
     * @param {number} width
     * @param {number | 'auto'} height
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setSize(width: number, height: number | 'auto'): MapConfig;
    /**
     * Returns whether to use Metric units for text layers.
     *
     * @returns {boolean}
     * @memberof MapConfig
     */
    metric(): boolean;
    /**
     * Sets whether to use Metric units for text layers.
     *
     * @param {boolean} metric
     * @returns {MapConfig}
     * @memberof MapConfig
     */
    setMetric(metric: boolean): MapConfig;
    /**
     * Returns an object of `MapRequest` options to use for the image request from the current
     * configuration.
     *
     * @param {string[]} [groups]
     * @param {boolean} [future=false]
     * @returns {{ [key: string]: any }}
     * @memberof MapConfig
     */
    toRequestOpts(groups?: string[], future?: boolean): {
        [key: string]: any;
    };
    /**
     * @ignore
     * Called when any configuration property changes.
     *
     * @private
     * @memberof MapConfig
     */
    private onChange;
}
