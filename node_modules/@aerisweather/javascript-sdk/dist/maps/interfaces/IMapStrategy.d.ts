import { ICoordinate, ICoordinateBounds, IPoint } from '../../interfaces/ICoordinate';
import IOverlayFactory from './IOverlayFactory';
import MapRequest from '../../network/maps/MapRequest';
import { MarkerOptions } from '../interactive/style/MarkerStyle';
/**
 * An interface that is implemented by a class that will provide the necessary functionality for
 * interacting with a third-party mapping library and map view.
 *
 * @export
 * @interface IMapStrategy
 */
export default interface IMapStrategy {
    /**
     * The HTML target in which the map is rendered to.
     */
    $el: any;
    /**
     * The third-party map view instance associated with the mapping strategy.
     */
    map: any;
    /**
     * A factory method that is responsible for generating the necessary map content as
     * required by the mapping strategy.
     */
    factory: IOverlayFactory;
    /**
     * The object that will provide data to the mapping strategy as required.
     */
    dataSource?: IMapStrategyDataSource;
    /**
     * Returns whether the map and underlying map strategy have been fully setup and initialized.
     *
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isReady(): boolean;
    /**
     * Returns whether the element is a tile source object.
     *
     * @param el
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isTile(el: any): boolean;
    /**
     * Returns whether the element is a vector source object.
     *
     * @param el
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isVector(el: any): boolean;
    /**
     * Returns whether the element is a native map marker instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isMarker(el: any): boolean;
    /**
     * Returns whether the element is a native map polygon instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isPolygon(el: any): boolean;
    /**
     * Returns whether the element is a native map polyline instance.
     *
     * @param el
     * @returns {boolean}
     * @memberof IMapStrategy
     */
    isPolyline(el: any): boolean;
    /**
     * Sets the current map view using the specified center coordinate and zoom level.
     *
     * @param {ICoordinate} center
     * @param {number} zoom
     * @memberof IMapStrategy
     */
    setView(center: ICoordinate, zoom: number): void;
    /**
     * Returns the geographical center coordinate of the map view.
     *
     * @returns {ICoordinate}
     * @memberof IMapStrategy
     */
    getCenter(): ICoordinate;
    /**
     * Sets the geographical center coordinate of the map view.
     *
     * @param {ICoordinate} coord
     * @memberof IMapStrategy
     */
    setCenter(coord: ICoordinate): void;
    /**
     * Returns the current zoom level of the map view.
     *
     * @returns {number}
     * @memberof IMapStrategy
     */
    getZoom(): number;
    /**
     * Sets the zoom level of the map view.
     *
     * @param {number} zoom
     * @memberof IMapStrategy
     */
    setZoom(zoom: number): void;
    /**
     * Returns the geographical bounds for the visible region of the map view.
     *
     * @returns {ICoordinateBounds}
     * @memberof IMapStrategy
     */
    getBounds(): ICoordinateBounds;
    /**
     * Sets the geographical bounds for the visible region of the map view.
     *
     * @param {ICoordinateBounds} bounds
     * @memberof IMapStrategy
     */
    setBounds(bounds: ICoordinateBounds): void;
    /**
     * Sets the minimum visible geographical bounds for the map view so that the specified bounds
     * are contained within the visible region with an optional inset.
     *
     * @param {ICoordinateBounds} bounds
     * @param {number[]} padding
     * @memberof IMapStrategy
     */
    fitBounds(bounds: ICoordinateBounds, padding: number[]): void;
    /**
     * Adds the specified map content source to the map.
     *
     * @param {*} source
     * @memberof IMapStrategy
     */
    addSource(source: any): void;
    /**
     * Removes the specified map content source from the map.
     *
     * @param {*} source
     * @memberof IMapStrategy
     */
    removeSource(source: any): void;
    /**
     * Adds the specified overlay layer to the map. The overlay must be an instance of the type
     * required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {*} overlay
     * @param {number} index
     * @memberof IMapStrategy
     */
    addOverlay(overlay: any, index?: number): void;
    /**
     * Adds a series of overlay layers to the map. The overlays must be an instance of the type
     * required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {any[]} overlays
     * @memberof IMapStrategy
     */
    addOverlays(overlays: any[]): void;
    /**
     * Removes the specified overlay layer from the map. The overlay must be an instance of the
     * type required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {*} overlay
     * @memberof IMapStrategy
     */
    removeOverlay(overlay: any): void;
    /**
     * Removes a series of overlay layers from the map. The overlay must be an instance of the
     * type required by the configured map strategy and underlying third-party mapping library.
     *
     * @param {any[]} overlays
     * @memberof IMapStrategy
     */
    removeOverlays(overlays: any[]): void;
    /**
     * Annotations
     */
    /**
     * Adds the marker to the map view. The provided marker must be an instance type required by
     * the current mapping strategy.
     *
     * @param marker
     * @param data
     */
    addMarker(marker: any, data?: any): void;
    /**
     * Adds an array of markers to the map view. The provided markers must be an instance type
     * required by the current mapping strategy.
     *
     * @param markers
     */
    addMarkers(markers: any[]): void;
    /**
     * Removes the marker from the map view. The provided marker must be an instance type required
     * by the current mapping strategy.
     *
     * @param marker
     */
    removeMarker(marker: any): void;
    /**
     * Adds an array of markers from the map view. The provided markers must be an instance type
     * required by the current mapping strategy.
     *
     * @param markers
     */
    removeMarkers(markers: any[]): void;
    /**
     * Updates an existing marker using the specified options. The provided marker must already
     * exist on the map view and must be an instance type required by the current mapping strategy.
     *
     * @param marker
     * @param options
     */
    updateMarker(marker: any, options: MarkerOptions, layer?: string): void;
    /**
     * Polygons & Polylines
     */
    /**
     * Adds a polygon or polyline to the map view. The provided shape must be an instance type
     * required by the current mapping strategy.
     *
     * @param {*} shape
     * @param {number} index
     * @memberof IMapStrategy
     */
    addShape(shape: any, data?: any): void;
    /**
     * Adds an array of polylines and/or polygons to the map view. The provided shapes must be an
     * instance type required by the current mapping strategy.
     *
     * @param {any[]} shapes
     * @memberof IMapStrategy
     */
    addShapes(shapes: any[]): void;
    /**
     * Removes the polyline or polygon from the map view. The provided shape must be an instance
     * type required by the current mapping strategy.
     *
     * @param {*} shape
     * @memberof IMapStrategy
     */
    removeShape(shape: any): void;
    /**
     * Removes an array of polylines and/or polygons from the map view. The provided shape must be
     * an instance type required by the current mapping strategy.
     *
     * @param {any[]} shapes
     * @memberof IMapStrategy
     */
    removeShapes(shapes: any[]): void;
    showShape(shape: any): void;
    showShapes(shapes: any[]): void;
    hideShape(shape: any): void;
    hideShapes(shapes: any[]): void;
    /**
     * Utilities
     */
    /**
     * Converts the specified geographical coordinate to pixel coordinates within the map view's
     * container.
     *
     * @param {ICoordinate} coord
     * @returns {IPoint}
     * @memberof IMapStrategy
     */
    coordToPoint(coord: ICoordinate): IPoint;
    /**
     * Converts the specified pixel coordinates within the map view's container to geographical
     * coordinates on the map.
     *
     * @param {IPoint} point
     * @returns {ICoordinate}
     * @memberof IMapStrategy
     */
    pointToCoord(point: IPoint): ICoordinate;
    /**
     * Presents a callout bubble on the map from the specified target. The target can either be an
     * `ICoordinate` object or a native marker object for the mapping strategy.
     *
     * @param {*} target
     * @param {*} content
     * @memberof IMapStrategy
     */
    showCallout(target: any, content: any): void;
    clear(): void;
    on(event: string, handler: any, scope?: any): void;
}
/**
 * Implemented by objects that will provide the necessary data to a mapping strategy instance, such
 * as overlay urls and configuration options.
 *
 * @export
 * @interface IMapStrategyDataSource
 */
export interface IMapStrategyDataSource {
    /**
     * Returns a MapRequest instance to be used for the specified layer string.
     *
     * @param layer
     */
    requestForMap(layer: string): MapRequest;
}
