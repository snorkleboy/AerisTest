import TileSource from '../interactive/sources/TileSource';
import { ICoordinate } from '../../interfaces/ICoordinate';
import { MarkerStyle } from '../interactive/style/MarkerStyle';
import ShapeStyle from '../interactive/style/ShapeStyle';
import MapRequest from '../../network/maps/MapRequest';
/**
 * A data type that represents the outer and inner coordinate data that defines a polygon.
 */
export declare type PolygonDef = {
    id?: string;
    outer: ICoordinate[];
    inner?: ICoordinate[][];
};
/**
 * Implemented by a class that is expected to provide layer configuration and instances as required
 * for a particular mapping strategy and third-party mapping library.
 *
 * @export
 * @interface IOverlayFactory
 */
export interface IOverlayFactory {
    /**
     * Returns a tile layer instance configured with the specified url template string and options.
     *
     * @param {string} layer
     * @param {MapRequest} service
     * @param {*} [opts]
     * @returns {TileSource}
     * @memberof IOverlayFactory
     */
    tileLayer(layer: string, service: MapRequest, opts?: any): TileSource;
    /**
     * Returns an annotation, or marker, instance with the specified coordinate and configuration
     * options.
     *
     * @param {string} layer
     * @param {ICoordinate} coord
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    marker(layer: string, coord: ICoordinate, style: MarkerStyle): any;
    /**
     * Returns an annotation icon based on the provided configuration.
     *
     * @param {MarkerStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    markerIcon(style: MarkerStyle): any;
    /**
     * Returns a polygon instance configured for the specified layer code and configuration.
     *
     * @param {string} layer
     * @param {Polygon[]} shapes
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    polygon(layer: string, shapes: PolygonDef[], style: ShapeStyle): any;
    /**
     * Returns a polyline instance for the array of points and configuration.
     *
     * @param {string} layer
     * @param {ICoordinate[]} points
     * @param {ShapeStyle} style
     * @returns {*}
     * @memberof IOverlayFactory
     */
    polyline(layer: string, points: ICoordinate[], style: ShapeStyle): any;
}
export default IOverlayFactory;
