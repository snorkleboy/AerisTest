/**
 * The EventDispatcher class is the base class for all classes that dispatch events.
 *
 * @export
 * @class EventDispatcher
 */
export default class EventDispatcher {
    /**
     * @ignore
     * @type {*}
     * @memberof EventDispatcher
     */
    parentEvent: any;
    /**
     * @ignore	 *
     * @protected
     * @type {*}
     * @memberof EventDispatcher
     */
    protected _listeners: any;
    /**
     * Registers a listener function to be executed each time an event occurs
     *
     * @param {string} type Name of the event to listen for. Value can contain multiple event names
     * separated by spaces to trigger the same handler function for each event name.
     * @param {Function} callback Handler function to be called when the event occurs
     * @param {*} [scope=null]
     * @param {number} [priority=0]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    on(type: string, callback: Function, scope?: any, priority?: number): EventDispatcher;
    /**
     * Registers a listener function to be executed the first time an event occurs.
     *
     * @param {string} type Name of the event to listen for. Value can contain multiple event names
     * separated by spaces to trigger the same handler function for each event name.
     * @param {Function} callback Handler function to be called when the event occurs
     * @param {*} [scope=null]
     * @param {number} [priority=0]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    once(type: string, callback: Function, scope?: any, priority?: number): EventDispatcher;
    /**
     * Removes a registered listener function for the specified event.
     *
     * @param {string} type Name of the event to remove the listener for.
     * @param {Function} callback Handler function to remove so it won't be executed next time the
     * event is triggered.
     * @param {*} [scope=null]
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    off(type: string, callback: Function, scope?: any): EventDispatcher;
    /**
     * Triggers the specified event so that all registered listeners will be executed with the
     * specified parameters.
     *
     * @param {*} type Event name to trigger
     * @param {*} [data=null] Object containing data to pass to all listener functions.
     * @returns {EventDispatcher}
     * @memberof EventDispatcher
     */
    trigger(type: any, data?: any): EventDispatcher;
    /**
     * Returns whether the listeners are registered for the specified event name.
     *
     * @param {string} type
     * @returns {boolean}
     * @memberof EventDispatcher
     */
    has(type: string): boolean;
}
