import { IEvent, EventObject } from '../interfaces/IEvent';
/**
 * The Event class is used as the base class for the creation of Event objects
 *
 * @export
 * @class Event
 * @implements {IEvent}
 */
export default class Event implements IEvent {
    /**
     * The type of event.
     *
     * @type {string}
     * @memberof Event
     */
    type: string;
    /**
     * Data associated with the event.
     *
     * @type {*}
     * @memberof Event
     */
    data: any;
    /**
     * The event target.
     *
     * @type {*}
     * @memberof Event
     */
    target: any;
    /**
     * The object that is actively processing the Event object with an event listener.
     *
     * @type {*}
     * @memberof Event
     */
    currentTarget: any;
    /**
     * Indicates whether an event is a bubbling event.
     *
     * @type {boolean}
     * @memberof Event
     */
    bubbles: boolean;
    /**
     * Indicates whether the behavior associated with the event can be cancelled.
     *
     * @type {boolean}
     * @memberof Event
     */
    cancellable: boolean;
    defaultPrevented: boolean;
    isPropagationStopped: boolean;
    /**
     * Creates an `Event` object for the specified event.
     *
     * @param {string} type
     * @param {boolean} [bubbles=false]
     * @param {boolean} [cancellable=false]
     * @param {*} [data=null]
     * @memberof Event
     */
    constructor(type: string, bubbles?: boolean, cancellable?: boolean, data?: any);
    /**
     * Returns a JSON object representation of the event.
     *
     * @returns {EventObject}
     * @memberof Event
     */
    toJSON(): EventObject;
    /**
     * Prevents processing of any event listeners in nodes subsequent to the current node in the
     * event flow.
     *
     * @memberof Event
     */
    stopPropagation(): void;
    /**
     * Prevents processig of any event listeners in the current node and any subsequent nodes in
     * the event flow.
     *
     * @memberof Event
     */
    stopImmediatePropagation(): void;
    /**
     * Checks whether the `preventDefault()` method has been called on the event.
     *
     * @returns {boolean}
     * @memberof Event
     */
    isDefaultPrevented(): boolean;
    /**
     * Cancels an event's default behavior if that behavior can be cancelled.
     *
     * @memberof Event
     */
    preventDefault(): void;
}
