"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * The Event class is used as the base class for the creation of Event objects
 *
 * @export
 * @class Event
 * @implements {IEvent}
 */
var Event =
/** @class */
function () {
  /**
   * Creates an `Event` object for the specified event.
   *
   * @param {string} type
   * @param {boolean} [bubbles=false]
   * @param {boolean} [cancellable=false]
   * @param {*} [data=null]
   * @memberof Event
   */
  function Event(type, bubbles, cancellable, data) {
    if (bubbles === void 0) {
      bubbles = false;
    }

    if (cancellable === void 0) {
      cancellable = false;
    }

    if (data === void 0) {
      data = null;
    }
    /**
     * The event target.
     *
     * @type {*}
     * @memberof Event
     */


    this.target = null;
    /**
     * The object that is actively processing the Event object with an event listener.
     *
     * @type {*}
     * @memberof Event
     */

    this.currentTarget = null;
    /**
     * Indicates whether an event is a bubbling event.
     *
     * @type {boolean}
     * @memberof Event
     */

    this.bubbles = false;
    /**
     * Indicates whether the behavior associated with the event can be cancelled.
     *
     * @type {boolean}
     * @memberof Event
     */

    this.cancellable = false;
    this.isPropagationStopped = false;
    this.type = type;
    this.bubbles = bubbles;
    this.cancellable = cancellable;
    this.data = data;
    this.defaultPrevented = false;
  }
  /**
   * Returns a JSON object representation of the event.
   *
   * @returns {EventObject}
   * @memberof Event
   */


  Event.prototype.toJSON = function () {
    return {
      type: this.type,
      data: this.data
    };
  };
  /**
   * Prevents processing of any event listeners in nodes subsequent to the current node in the
   * event flow.
   *
   * @memberof Event
   */


  Event.prototype.stopPropagation = function () {
    this.isPropagationStopped = true;
  };
  /**
   * Prevents processig of any event listeners in the current node and any subsequent nodes in
   * the event flow.
   *
   * @memberof Event
   */


  Event.prototype.stopImmediatePropagation = function () {
    this.stopPropagation();
    this.isPropagationStopped = true;
  };
  /**
   * Checks whether the `preventDefault()` method has been called on the event.
   *
   * @returns {boolean}
   * @memberof Event
   */


  Event.prototype.isDefaultPrevented = function () {
    return this.defaultPrevented;
  };
  /**
   * Cancels an event's default behavior if that behavior can be cancelled.
   *
   * @memberof Event
   */


  Event.prototype.preventDefault = function () {
    this.defaultPrevented = true;
  };

  return Event;
}();

var _default = Event;
exports.default = _default;
module.exports = exports.default;