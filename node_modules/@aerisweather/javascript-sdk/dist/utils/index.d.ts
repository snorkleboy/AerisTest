export declare const toType: (a: any) => any;
export declare const toTypeName: (o: any) => any;
export declare const isNull: (obj: any) => boolean;
export declare const isUndefined: (obj: any) => boolean;
export declare const isset: (obj: any) => boolean;
export declare const isArray: (value: any) => boolean;
export declare const isFunction: (value: any) => boolean;
export declare const isBoolean: (value: any) => boolean;
export declare const isString: (obj: any) => boolean;
export declare const isNumber: (obj: any) => boolean;
export declare const isNumeric: (obj: any) => boolean;
export declare const isDate: (obj: any) => boolean;
export declare const isEmpty: (obj: any) => boolean;
export declare const isObject: (value: any) => boolean;
export declare const isPlainObject: (value: any) => boolean;
export declare const isHTMLElement: (value: any) => boolean;
export declare const isDOM: (value: any) => boolean;
export declare const isCoord: (str: string) => boolean;
export declare const isZipcode: (str: string) => boolean;
export declare const offsetToTime: (str: string) => number;
export declare const toUTC: (date: Date) => Date;
export declare const replace: (target: any[], value: any, replacement: any) => void;
export declare const merge: <T extends any = object>(target: T, ...sources: T[]) => T;
export declare const unique: (ar: any) => any;
export declare const mergeUnique: (arr1: any, arr2: any) => any;
/**
 * Access a deep value inside a object.
 * Works by passing a path like "foo.bar", also works with nested arrays like "foo[0][1].baz"
 * @author Victor B. https://gist.github.com/victornpb/4c7882c1b9d36292308e
 * Unit tests: http://jsfiddle.net/Victornpb/0u1qygrh/
 */
export declare const get: (obj: any, path: string) => any;
/**
 * Set a deep property on nested objects.
 * @param  {object}   obj  A object
 * @param  {String}   path A path
 * @param  {Any}      val  Anything that can be set
 * @author Victor B. https://gist.github.com/victornpb/4c7882c1b9d36292308e
 */
export declare const set: (obj: any, path: string, val: any) => any;
export declare const has: (obj: any, path: string) => boolean;
export declare const pick: (obj: any, paths: string[]) => any;
export declare const pickBy: (obj: any, predicate: Function) => any;
export declare const cloneDeep: (obj: any) => any;
export declare const flatten: (arr: any[], result?: any[]) => any[];
export declare const interval: (value: number, int: number) => number;
export declare const toBool: (value: any) => boolean;
export declare const toRangeStr: (min: number, max: number, valueInterval: number) => string;
export declare const toQueryStr: (obj: any) => string;
export declare const toTimeStr: (date: Date, from?: Date) => string;
export declare const toTimeOffsetHours: (str: string) => number;
export declare const adjustDate: (date: Date, tzoffset?: number) => Date;
export declare const dateFromISO: (isoDate: string) => Date;
declare type Procedure = (...args: any[]) => void;
export declare const debounce: <F extends Procedure>(fn: F, wait: number, isImmediate?: boolean) => F;
export declare const loadScript: (src: string) => Promise<any>;
export declare const loadStyles: (src: string) => Promise<any>;
export declare function extend(...args: any[]): any;
export {};
