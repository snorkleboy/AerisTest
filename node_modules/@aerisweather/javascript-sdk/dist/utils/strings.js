"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.toDate = exports.prefixCSSClassName = exports.toName = exports.toBounds = exports.toCoord = exports.hyphenate = exports.camelcase = exports.ucfirst = exports.ucwords = exports.countries = exports.states = void 0;

var _ = require(".");

var _globals = require("../globals");

/**
 * @ignore
 */
var _states = {
  us: {
    al: 'alabama',
    ak: 'alaska',
    az: 'arizona',
    ar: 'arkansas',
    ca: 'california',
    co: 'colorado',
    ct: 'connecticut',
    de: 'delaware',
    fl: 'florida',
    ga: 'georgia',
    hi: 'hawaii',
    id: 'idaho',
    il: 'illinois',
    in: 'indiana',
    ia: 'iowa',
    ks: 'kansas',
    ky: 'kentucky',
    la: 'louisiana',
    me: 'maine',
    md: 'maryland',
    ma: 'massachusetts',
    mi: 'michigan',
    mn: 'minnesota',
    ms: 'mississippi',
    mo: 'missouri',
    mt: 'montana',
    ne: 'nebraska',
    nv: 'nevada',
    nh: 'new hampshire',
    nj: 'new jersey',
    nm: 'new mexico',
    ny: 'new york',
    nc: 'north carolina',
    nd: 'north dakota',
    oh: 'ohio',
    ok: 'oklahoma',
    or: 'oregon',
    pa: 'pennsylvania',
    ri: 'rhode island',
    sc: 'south carolina',
    sd: 'south dakota',
    tn: 'tennessee',
    tx: 'texas',
    ut: 'utah',
    vt: 'vermont',
    va: 'virginia',
    wa: 'washington',
    wv: 'west virginia',
    wi: 'wisconsin',
    wy: 'wyoming',
    pr: 'puerto rico',
    vi: 'virgin islands',
    gu: 'guam',
    dc: 'district of columbia'
  },
  ca: {
    ab: 'alberta',
    bc: 'british columbia',
    pe: 'prince edward',
    mb: 'manitoba',
    nb: 'new brunswick',
    ns: 'nova scotia',
    on: 'ontario',
    qc: 'qu\u00c8bec',
    sk: 'saskatchewan',
    nf: 'new foundland',
    nt: 'northwest territories',
    nu: 'nunavut',
    yk: 'yukon'
  }
};
/**
 * @ignore
 */

var _countries = {
  ad: 'andorra',
  ae: 'united arab emirates',
  af: 'afghanistan',
  ag: 'antigua and barbuda',
  ai: 'anguilla',
  al: 'albania',
  am: 'armenia',
  ao: 'angola',
  aq: 'antarctica',
  ar: 'argentina',
  as: 'american samoa',
  at: 'austria',
  au: 'australia',
  aw: 'aruba',
  ax: 'aland islands',
  az: 'azerbaijan',
  ba: 'bosnia and herzegovina',
  bb: 'barbados',
  bd: 'bangladesh',
  be: 'belgium',
  bf: 'burkina faso',
  bg: 'bulgaria',
  bh: 'bahrain',
  bi: 'burundi',
  bj: 'benin',
  bl: 'saint barth\ufffdlemy',
  bm: 'bermuda',
  bn: 'brunei',
  bo: 'bolivia',
  bq: 'bonaire, saint eustatius and saba',
  br: 'brazil',
  bs: 'bahamas',
  bt: 'bhutan',
  bv: 'bouvet island',
  bw: 'botswana',
  by: 'belarus',
  bz: 'belize',
  ca: 'canada',
  cc: 'cocos islands',
  cd: 'democratic republic of the congo',
  cf: 'central african republic',
  cg: 'republic of the congo',
  ch: 'switzerland',
  ci: 'ivory coast',
  ck: 'cook islands',
  cl: 'chile',
  cm: 'cameroon',
  cn: 'china',
  co: 'colombia',
  cr: 'costa rica',
  cu: 'cuba',
  cv: 'cape verde',
  cw: 'cura\ufffdao',
  cx: 'christmas island',
  cy: 'cyprus',
  cz: 'czech republic',
  de: 'germany',
  dj: 'djibouti',
  dk: 'denmark',
  dm: 'dominica',
  do: 'dominican republic',
  dz: 'algeria',
  ec: 'ecuador',
  ee: 'estonia',
  eg: 'egypt',
  eh: 'western sahara',
  er: 'eritrea',
  es: 'spain',
  et: 'ethiopia',
  fi: 'finland',
  fj: 'fiji',
  fk: 'falkland islands',
  fm: 'micronesia',
  fo: 'faroe islands',
  fr: 'france',
  ga: 'gabon',
  gb: 'united kingdom',
  gd: 'grenada',
  ge: 'georgia',
  gf: 'french guiana',
  gg: 'guernsey',
  gh: 'ghana',
  gi: 'gibraltar',
  gl: 'greenland',
  gm: 'gambia',
  gn: 'guinea',
  gp: 'guadeloupe',
  gq: 'equatorial guinea',
  gr: 'greece',
  gs: 'south georgia and the south sandwich islands',
  gt: 'guatemala',
  gu: 'guam',
  gw: 'guinea-bissau',
  gy: 'guyana',
  hk: 'hong kong',
  hm: 'heard island and mcdonald islands',
  hn: 'honduras',
  hr: 'croatia',
  ht: 'haiti',
  hu: 'hungary',
  id: 'indonesia',
  ie: 'ireland',
  il: 'israel',
  im: 'isle of man',
  in: 'india',
  io: 'british indian ocean territory',
  iq: 'iraq',
  ir: 'iran',
  is: 'iceland',
  it: 'italy',
  je: 'jersey',
  jm: 'jamaica',
  jo: 'jordan',
  jp: 'japan',
  ke: 'kenya',
  kg: 'kyrgyzstan',
  kh: 'cambodia',
  ki: 'kiribati',
  km: 'comoros',
  kn: 'saint kitts and nevis',
  kp: 'north korea',
  kr: 'south korea',
  kw: 'kuwait',
  ky: 'cayman islands',
  kz: 'kazakhstan',
  la: 'laos',
  lb: 'lebanon',
  lc: 'saint lucia',
  li: 'liechtenstein',
  lk: 'sri lanka',
  lr: 'liberia',
  ls: 'lesotho',
  lt: 'lithuania',
  lu: 'luxembourg',
  lv: 'latvia',
  ly: 'libya',
  ma: 'morocco',
  mc: 'monaco',
  md: 'moldova',
  me: 'montenegro',
  mf: 'saint martin',
  mg: 'madagascar',
  mh: 'marshall islands',
  mk: 'macedonia',
  ml: 'mali',
  mm: 'myanmar',
  mn: 'mongolia',
  mo: 'macao',
  mp: 'northern mariana islands',
  mq: 'martinique',
  mr: 'mauritania',
  ms: 'montserrat',
  mt: 'malta',
  mu: 'mauritius',
  mv: 'maldives',
  mw: 'malawi',
  mx: 'mexico',
  my: 'malaysia',
  mz: 'mozambique',
  na: 'namibia',
  nc: 'new caledonia',
  ne: 'niger',
  nf: 'norfolk island',
  ng: 'nigeria',
  ni: 'nicaragua',
  nl: 'netherlands',
  no: 'norway',
  np: 'nepal',
  nr: 'nauru',
  nu: 'niue',
  nz: 'new zealand',
  om: 'oman',
  pa: 'panama',
  pe: 'peru',
  pf: 'french polynesia',
  pg: 'papua new guinea',
  ph: 'philippines',
  pk: 'pakistan',
  pl: 'poland',
  pm: 'saint pierre and miquelon',
  pn: 'pitcairn',
  pr: 'puerto rico',
  ps: 'palestinian territory',
  pt: 'portugal',
  pw: 'palau',
  py: 'paraguay',
  qa: 'qatar',
  re: 'reunion',
  ro: 'romania',
  rs: 'serbia',
  ru: 'russia',
  rw: 'rwanda',
  sa: 'saudi arabia',
  sb: 'solomon islands',
  sc: 'seychelles',
  sd: 'sudan',
  se: 'sweden',
  sg: 'singapore',
  sh: 'saint helena',
  si: 'slovenia',
  sj: 'svalbard and jan mayen',
  sk: 'slovakia',
  sl: 'sierra leone',
  sm: 'san marino',
  sn: 'senegal',
  so: 'somalia',
  sr: 'suriname',
  ss: 'south sudan',
  st: 'sao tome and principe',
  sv: 'el salvador',
  sx: 'sint maarten',
  sy: 'syria',
  sz: 'swaziland',
  tc: 'turks and caicos islands',
  td: 'chad',
  tf: 'french southern territories',
  tg: 'togo',
  th: 'thailand',
  tj: 'tajikistan',
  tk: 'tokelau',
  tl: 'east timor',
  tm: 'turkmenistan',
  tn: 'tunisia',
  to: 'tonga',
  tr: 'turkey',
  tt: 'trinidad and tobago',
  tv: 'tuvalu',
  tw: 'taiwan',
  tz: 'tanzania',
  ua: 'ukraine',
  ug: 'uganda',
  um: 'united states minor outlying islands',
  us: 'united states',
  uy: 'uruguay',
  uz: 'uzbekistan',
  va: 'vatican',
  vc: 'saint vincent and the grenadines',
  ve: 'venezuela',
  vg: 'british virgin islands',
  vi: 'u.s. virgin islands',
  vn: 'vietnam',
  vu: 'vanuatu',
  wf: 'wallis and futuna',
  ws: 'samoa',
  xk: 'kosovo',
  ye: 'yemen',
  yt: 'mayotte',
  za: 'south africa',
  zm: 'zambia',
  zw: 'zimbabwe',
  uk: 'united kingdom'
};
/**
 * Returns a states collection keyed by country (`us` or `ca`) and the two-letter state
 * abbreviation.
 *
 * @returns {{ [key: string]: { [key: string]: string }}}
 */

var states = function () {
  return _states;
};
/**
 * Returns a country collection keyed by two-letter country abbreviation.
 *
 * @returns {{ [key: string]: string }}
 */


exports.states = states;

var countries = function () {
  return _countries;
};
/**
 * Returns a new string by capitalizing the first letter of each word in the specified string.
 *
 * @param {string} str
 * @returns {string}
 */


exports.countries = countries;

var ucwords = function (str) {
  str = ("" + str).toLowerCase();
  return ("" + str).replace(/^([a-z])|\s+([a-z])|\/([a-z])|(\-[a-z])/g, function ($1) {
    return $1.toUpperCase();
  });
};
/**
 * Returns a new string by capitalizing the first letter in the specified string.
 *
 * @param {string} str
 * @returns {string}
 */


exports.ucwords = ucwords;

var ucfirst = function (str) {
  str += '';
  var f = str.charAt(0).toUpperCase();
  return f + str.substr(1);
};
/**
 * Returns a new string by converting the specified string to camelcase.
 *
 * @param {string} str
 * @returns {string}
 */


exports.ucfirst = ucfirst;

var camelcase = function (str) {
  return (str || '').replace(/[^A-Za-z0-9]/g, ' ').replace(/^\w|[A-Z]|\b\w|\s+/g, function (match, index) {
    if (+match === 0 || match === '-' || match === '.') {
      return ''; // or if (/\s+/.test(match)) for white spaces
    }

    return index === 0 ? match.toLowerCase() : match.toUpperCase();
  });
};
/**
 * Returns a new string by converting a camelcase string to hyphenated.
 *
 * @param {string} str
 * @returns {string}
 */


exports.camelcase = camelcase;

var hyphenate = function (str) {
  return (str || '').replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
};
/**
 * Converts the specified coordinate to a string whose values are rounded to the nearest decimal
 * place according to `places`.
 *
 * @param {number} lat
 * @param {number} lon
 * @param {number} [places=3]
 * @returns {string}
 */


exports.hyphenate = hyphenate;

var toCoord = function (lat, lon, places) {
  if (places === void 0) {
    places = 3;
  }

  var latStr = lat < 0 ? Math.abs(lat).toFixed(places) + " S" : lat.toFixed(places) + " N";
  var lonStr = lon < 0 ? Math.abs(lon).toFixed(places) + " W" : lon.toFixed(places) + " E";
  return latStr + ", " + lonStr;
};
/**
 * Converts the specified coordinate bounds object to a string whose values are rounded to the
 * nearest decimal place according to `places`.
 *
 * @param {ICoordinateBounds} bounds
 * @param {number} [places=3]
 * @returns {string}
 */


exports.toCoord = toCoord;

var toBounds = function (bounds, places) {
  if (places === void 0) {
    places = 3;
  }

  if (!bounds || Object.keys(bounds).length === 0) return null;
  var b = (0, _.cloneDeep)(bounds);
  b.north = Math.min(90, Math.max(-90, b.north));
  b.south = Math.min(90, Math.max(-90, b.south));

  if (b.west < -180 || b.west > 180) {
    b.west -= 360 * Math.floor(b.west / 360);
  }

  if (b.east < -180 || b.east > 180) {
    b.east -= 360 * Math.ceil(b.east / 360);
  }

  return b.north.toFixed(places) + "," + b.west.toFixed(places) + "," + b.south.toFixed(places) + "," + b.east.toFixed(places);
};
/**
 * Returns a new string by formatting the specified string as a place name.
 *
 * @param {string} str
 * @returns {string}
 */


exports.toBounds = toBounds;

var toName = function (str) {
  return ucwords(str).split('-').map(function (s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
  }).join('-').split('.').map(function (s) {
    return s.charAt(0).toUpperCase() + s.slice(1);
  }).join('.').replace(/\bus\b/i, 'US');
};

exports.toName = toName;

var prefixCSSClassName = function (className) {
  return className.split(' ').map(function (c) {
    var re = new RegExp("^" + _globals.Globals.cssPrefix);

    if (re.test(c) === false) {
      c = "" + _globals.Globals.cssPrefix + c;
    }

    return c;
  }).join(' ');
};

exports.prefixCSSClassName = prefixCSSClassName;

var toDate = function (str) {
  var m = (str || '').match(/^(\d{1,2})(\/|-)(\d{1,2})(\/|-)(\d{4})/);

  if (!m || m.length < 6) {
    return null;
  }

  return new Date(parseInt(m[5], 10), parseInt(m[1], 10) - 1, parseInt(m[3], 10));
};

exports.toDate = toDate;