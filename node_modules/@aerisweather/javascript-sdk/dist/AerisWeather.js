"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dateFns = require("date-fns");

var _Account = _interopRequireDefault(require("./account/Account"));

var utils = _interopRequireWildcard(require("./utils"));

var strings = _interopRequireWildcard(require("./utils/strings"));

var colors = _interopRequireWildcard(require("./utils/color"));

var _DOM = _interopRequireDefault(require("./display/DOM"));

var _globals = require("./globals");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var isValidKey = function (key) {
  return utils.isEmpty(key) === false && utils.isString(key) && /_/.test(key) === false;
};
/**
 * The main entry point for interacting with AerisWeather API services.
 */


var AerisWeather =
/** @class */
function () {
  /**
   * Initializes an AerisWeather instance configured with the specified client id and secret.
   * @param id
   * @param secret
   * @param server
   */
  function AerisWeather(id, secret, servers) {
    if (!isValidKey(id) || !isValidKey(secret)) {
      var error = new Error('AerisWeather must be initialized with valid access keys. Refer to https://www.aerisweather.com/support/docs/api/getting-started/ for more information.');
      console.error(error.message);
      throw error;
    }

    this._account = new _Account.default(id, secret);
    this._servers = servers || _globals.servers;
    this._account.servers = this._servers;
  }

  Object.defineProperty(AerisWeather.prototype, "utils", {
    /**
     * Provides access to the library's utility functions.
     *
     * General utility functions are accessible at the root of the `utils` object, but additional
     * functions are available for specific data types, such as colors, strings, etc:
     *
     * - `utils.strings`: String-related utility functions
     * - `utils.colors`: Color-related utility functions
     * - `utils.dates`: Date-related utility functions
     *
     * @readonly
     * @type {({ [key: string]: Function | { [key: string]: Function }})}
     * @memberof AerisWeather
     */
    get: function () {
      return __assign({
        $: _DOM.default
      }, utils, {
        strings: __assign({}, strings),
        colors: __assign({}, colors),
        dates: {
          format: _dateFns.format,
          parse: _dateFns.parse
        }
      });
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Returns the Account instance used when performing API requests.
   */

  AerisWeather.prototype.account = function () {
    return this._account;
  };
  /**
   * Returns the API server used when performing API requests.
   */


  AerisWeather.prototype.servers = function () {
    return this._servers;
  };
  /**
   * Creates and returns a new ApiRequest configured for the current account.
   *
   * @returns {ApiRequest}
   * @memberof AerisWeather
   */


  AerisWeather.prototype.api = function () {
    return this.account().api();
  };
  /**
   * Creates and returns a new MapRequest configured for the current account.
   *
   * @returns {MapRequest}
   * @memberof AerisWeather
   */


  AerisWeather.prototype.map = function () {
    return this.account().map();
  };
  /**
   * Provides access to the views module of the library.
   *
   * The `views` module is loaded asynchronously using this method, which means you'll need to
   * wait for it to be loaded before working with any of its features. You can use the `Promise`
   * that's returned, or provide a callback function as a parameter to be notified once the
   * module is available.
   *
   * @param {(views: any) => void} [callback]
   * @returns {Promise<any>}
   * @memberof AerisWeather
   */


  AerisWeather.prototype.views = function (callback) {
    return __awaiter(this, void 0, void 0, function () {
      var module;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.resolve().then(() => _interopRequireWildcard(require('./maps')))];

          case 1:
            module = _a.sent();
            return [2
            /*return*/
            , new Promise(function (resolve, reject) {
              var m = module.Views;
              m.setAccount(_this.account());
              m.setServers(_this.servers());
              resolve(module.Views);
              if (callback) callback(module.Views);
            }).catch(function (error) {
              console.error('AerisWeather.Views - ERROR', error);
            })];
        }
      });
    });
  };

  AerisWeather.prototype.apps = function (callback) {
    return __awaiter(this, void 0, void 0, function () {
      var module;

      var _this = this;

      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , Promise.resolve().then(() => _interopRequireWildcard(require('./apps')))];

          case 1:
            module = _a.sent();
            return [2
            /*return*/
            , new Promise(function (resolve, reject) {
              var m = module.Apps;
              m.setAccount(_this.account());
              m.setServers(_this.servers());
              resolve(module.Apps);
              if (callback) callback(module.Apps);
            }).catch(function (error) {
              console.error('AerisWeather.Apps - ERROR', error);
            })];
        }
      });
    });
  };

  return AerisWeather;
}();

var _default = AerisWeather;
exports.default = _default;
module.exports = exports.default;