"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Apps = void 0;

var _InteractiveMapApp2 = _interopRequireDefault(require("./InteractiveMapApp"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * @ignore
 * Private class extension to better handle naming conflicts within this public interface.
 *
 * @class _InteractiveMapApp
 * @extends {Map}
 */
var _InteractiveMapApp =
/** @class */
function (_super) {
  __extends(_InteractiveMapApp, _super);

  function _InteractiveMapApp() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  return _InteractiveMapApp;
}(_InteractiveMapApp2.default);
/**
 * @ignore
 */


var _account;
/**
 * @ignore
 */


var _servers;
/**
 * The `Apps` module provides the public interface for all application components that are part
 * of the SDK.
 */


var Apps;
exports.Apps = Apps;

(function (Apps) {
  // /**
  //  * Provides access to the `Apps` module's utility functions.
  //  *
  //  * @readonly
  //  * @type { [key: string]: Function }
  //  */
  // export const utils: any = {...mapUtils};

  /**
   * Sets the Aeris account instance to use with the `Views` module.
   *
   * @param {Account} account
   */
  Apps.setAccount = function (account) {
    _account = account;
  };
  /**
   * Sets the base paths for the API servers to use with data and image requests.
   *
   * @param {IServers} servers
   */


  Apps.setServers = function (servers) {
    _servers = servers;
  };
  /**
   * Initializes and returns a new `InteractiveMapApp` instance.
   *
   * @param {*} target
   * @param {InteractiveMapAppOptions} [opts]
   * @param {(map: Map) => void} [onInit]
   * @returns {InteractiveMap}
   */


  Apps.InteractiveMapApp = function (target, opts) {
    opts = opts || {};
    opts.account = _account;
    opts.servers = opts.servers || _servers;
    return new _InteractiveMapApp(target, opts);
  };
})(Apps || (exports.Apps = Apps = {}));