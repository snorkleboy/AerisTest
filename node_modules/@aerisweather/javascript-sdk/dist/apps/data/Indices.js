"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.valueForIndice = exports.Indices = void 0;
var Indices;
exports.Indices = Indices;

(function (Indices) {
  var Types;

  (function (Types) {
    Types["SNOW"] = "snow";
    Types["ICE"] = "ice";
    Types["RAIN"] = "rain";
    Types["WIND"] = "wind";
    Types["LIGHTNING"] = "lightning";
    Types["CONVECTIVE"] = "convective";
  })(Types = Indices.Types || (Indices.Types = {}));

  ;

  Indices.snow = function (value) {
    if (value >= 4) return 5;
    if (value >= 3) return 4;
    if (value >= 2) return 3;
    if (value >= 1) return 2;
    if (value > 0.1) return 1;
    return 0;
  };

  Indices.ice = function (value) {
    if (value >= 0.4) return 5;
    if (value >= 0.3) return 4;
    if (value >= 0.2) return 3;
    if (value >= 0.1) return 2;
    if (value < 0.1 && value > 0) return 1;
    return 0;
  };

  Indices.rain = function (value) {
    if (value >= 1) return 5;
    if (value >= 0.75) return 4;
    if (value >= 0.5) return 3;
    if (value >= 0.25) return 2;
    if (value >= 0.1) return 1;
    return 0;
  };

  Indices.wind = function (value) {
    if (value >= 50) return 5;
    if (value >= 40) return 4;
    if (value >= 30) return 3;
    if (value >= 20) return 2;
    if (value > 10) return 1;
    return 0;
  };

  Indices.lightning = function (value) {
    if (value >= 80) return 5;
    if (value >= 60) return 4;
    if (value >= 40) return 3;
    if (value >= 15) return 2;
    if (value < 15 && value > 0) return 1;
    return 0;
  };

  Indices.convective = function (value) {
    var mapping = {
      high: 5,
      moderate: 4,
      enhanced: 3,
      slight: 2,
      marginal: 1,
      general: 0.5,
      none: 0
    };
    return mapping[value];
  };
})(Indices || (exports.Indices = Indices = {}));

;

var valueForIndice = function (type, value) {
  if (type === Indices.Types.SNOW) {
    return Indices.snow(value);
  }

  if (type === Indices.Types.ICE) {
    return Indices.ice(value);
  }

  if (type === Indices.Types.RAIN) {
    return Indices.rain(value);
  }

  if (type === Indices.Types.WIND) {
    return Indices.wind(value);
  }

  if (type === Indices.Types.LIGHTNING) {
    return Indices.lightning(value);
  }

  if (type === Indices.Types.CONVECTIVE) {
    return Indices.convective(value);
  }

  return 0;
};

exports.valueForIndice = valueForIndice;