"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _dateFns = require("date-fns");

var _View = _interopRequireDefault(require("../ui/View"));

var _Indices = require("../data/Indices");

var _utils = require("../../utils");

var _strings = require("../../utils/strings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var cachedInfoPanelViews = {
  place: {
    data: function (data) {
      if (!data) return null;
      data = data.places || data;
      return data.place;
    },
    renderer: function (data) {
      if (!data) return null;
      return "\n\t\t\t\t<div class=\"place\">\n\t\t\t\t\t<p class=\"name\">" + data.name + (!(0, _utils.isEmpty)(data.state) ? ", " + data.state : '') + ", " + data.country + "</p>\n\t\t\t\t</div>\n\t\t\t";
    }
  },
  obs: {
    data: function (data) {
      if (!data) return null;
      data = data.observations || data;
      return data.ob;
    },
    renderer: function (data) {
      if ((0, _utils.isEmpty)(data)) return null;
      var date = (0, _utils.dateFromISO)(data.dateTimeISO);
      return "\n\t\t\t\t<div class=\"obs\">\n\t\t\t\t\t<p class=\"timestamp\">Last updated at " + (0, _dateFns.format)(date, 'h:mm a, MMM D, YYYY') + "</p>\n\t\t\t\t\t<div class=\"awxjs__ui-cols\">\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-cols\">\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<p class=\"temp\">" + data.tempF + "<span>&deg;F</span></p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<img class=\"icon\" src=\"https://cdn.aerisapi.com/wxblox/icons/" + (data.icon || 'na.png') + "\">\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<p class=\"wx\">" + data.weatherPrimary + "</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"details\">\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Winds</div>\n\t\t\t\t\t\t\t\t<div>" + (data.windSpeedMPH > 0 ? data.windSpeedMPH + " mph" : "Calm") + "</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Dew Point</div>\n\t\t\t\t\t\t\t\t<div>" + (data.dewpointF || 'N/A') + "&deg;F</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Humidity</div>\n\t\t\t\t\t\t\t\t<div>" + (data.humidity || 'N/A') + "%</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Pressure</div>\n\t\t\t\t\t\t\t\t<div>" + (data.pressureIN || 'N/A') + " in.</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Visibility</div>\n\t\t\t\t\t\t\t\t<div>" + (data.visibilityMI || 'N/A') + " mi</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-row\">\n\t\t\t\t\t\t\t\t<div>Sky Cover</div>\n\t\t\t\t\t\t\t\t<div>" + (data.sky || 'N/A') + "%</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t";
    }
  },
  forecast: {
    data: function (data) {
      if (!data) return null;
      data = data.forecasts || data;

      if (data) {
        if (data[0]) data = data[0];
        return data.periods;
      }

      return data;
    },
    renderer: function (data) {
      if ((0, _utils.isEmpty)(data) || !(0, _utils.isArray)(data)) return null;
      return data.map(function (period) {
        var date = (0, _utils.dateFromISO)(period.dateTimeISO);
        var winds = 'Calm';

        if (period.windSpeedMaxMPH > 5) {
          winds = (0, _utils.toRangeStr)(period.windSpeedMinMPH, period.windSpeedMaxMPH, 5) + " mph";
        } else if (period.windSpeedMaxMPH < 5 && period.windSpeedMinMPH > 0) {
          winds = '< 5 mph';
        }

        return "\n\t\t\t\t\t<div class=\"forecasts\">\n\t\t\t\t\t\t<div class=\"period\">\n\t\t\t\t\t\t\t<div class=\"awxjs__ui-cols align-center\">\n\t\t\t\t\t\t\t\t<div class=\"ts\">" + (0, _dateFns.format)(date, 'h a') + "</div>\n\t\t\t\t\t\t\t\t<div><img class=\"icon\" src=\"https://cdn.aerisapi.com/wxblox/icons/" + (period.icon || 'na.png') + "\"></div>\n\t\t\t\t\t\t\t\t<div class=\"temp\">" + period.tempF + "<span>&deg;F</span></div>\n\t\t\t\t\t\t\t\t<div class=\"conditions\">\n\t\t\t\t\t\t\t\t\t<p class=\"wx\">" + period.weatherPrimary + "</p>\n\t\t\t\t\t\t\t\t\t<p class=\"detail\"><span>Winds</span> " + winds + "</p>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t";
      }).join('');
    }
  },
  alerts: {
    data: function (data) {
      if (!data) return null; // add parent places.profile to each alert so we can do proper timezone conversions

      var profile = (0, _utils.get)(data, 'places.profile');
      if (data.alerts) data = data.alerts;

      if ((0, _utils.isArray)(data)) {
        return data.map(function (record) {
          return (0, _utils.extend)(record, {
            profile: profile
          });
        });
      }

      return null;
    },
    renderer: function (data) {
      if (!data || !(0, _utils.isArray)(data)) return null;
      var alerts = data.map(function (alert) {
        var range = '';
        var ts = alert.timestamps;

        if (ts) {
          var offset = (0, _utils.get)(alert, 'profile.tzoffset') ? (0, _utils.get)(alert, 'profile.tzoffset') * 1000 : 0;
          var utcOffset = new Date().getTimezoneOffset() * 60000;
          var tzShift = utcOffset + offset;
          var tz = (0, _utils.get)(alert, 'profile.tzname') || ''; // need to add timezone offset difference between the local and alert timezones

          var now = new Date(new Date().getTime() + tzShift);
          var start = new Date(new Date(ts.begins * 1000).getTime() + tzShift);
          var end = new Date(new Date(ts.expires * 1000).getTime() + tzShift);
          var fmt = "h:mm a [" + tz + "], ddd M/D";

          if (start.getTime() < now.getTime()) {
            range = " until " + (0, _dateFns.format)(end, fmt);
          } else {
            range = " from " + (0, _dateFns.format)(start, fmt) + " until " + (0, _dateFns.format)(end, fmt);
          }
        }

        return "<p class=\"alert-row\"><span class=\"name\"><strong>" + (0, _strings.ucwords)(alert.details.name.toLowerCase()) + "</strong></span><br>" + range + "</p>";
      }).join('');
      return "<div class=\"alerts\">" + alerts + "</div>";
    }
  },
  threats: {
    data: function (data) {
      if (!data) return null;
      data = data.threats || data;
      if (!data || !(0, _utils.isArray)(data)) return null;
      data = data.filter(function (threat) {
        return undefined !== threat.storm;
      });

      if (data.length === 0) {
        return null;
      }

      return data;
    },
    renderer: function (data) {
      if (!data || !(0, _utils.isArray)(data)) return null;
      if (data.length === 0) return null;
      return data.map(function (threat) {
        return "<div class=\"threats\"><p class=\"threat-row\">" + threat.phrase.long + "</p></div>";
      }).join('');
    }
  },
  outlook: {
    data: function (data) {
      if (!data) return null;
      data = data.phrases_summary || data;
      return data[0];
    },
    renderer: function (data) {
      var phrase = (0, _utils.get)(data, 'phrases.long');

      if (!phrase) {
        return null;
      }

      return "<div class=\"outlook\"><p>" + phrase + "</p></div>";
    }
  },
  hazards: {
    data: function (data) {
      if (!data) return null;
      var ob = (0, _utils.get)(data, 'observations.ob') || {};
      var forecasts = (0, _utils.get)(data, 'forecasts');
      var convective = (0, _utils.get)(data, 'convective_outlook_contains');
      var lightning = (0, _utils.get)(data, 'lightning_summary_closest');
      var result = [];

      if (forecasts && forecasts.length > 0) {
        var periods = forecasts[0].periods;
        var snow_1 = 0;
        var rain_1 = 0;
        var wind_1 = 0;
        var ice_1 = 0;

        if (ob) {
          if (ob.tempF <= 30 && /snow/.test(ob.weatherPrimary) === false) {
            ice_1 += ob.precipIN;
          }
        }

        periods.forEach(function (period) {
          snow_1 += period.snowIN;
          wind_1 = Math.max(wind_1, period.windGustMPH);

          if (period.tempF >= 30) {
            rain_1 += period.precipIN;
          }

          if (period.tempF >= 28 && period.tempF <= 32) {
            ice_1 += period.precipIN;
          }
        });
        result.push({
          type: 'snow',
          name: 'Snow',
          value: snow_1
        });
        result.push({
          type: 'ice',
          name: 'Ice',
          value: ice_1
        });
        result.push({
          type: 'rain',
          name: 'Rain',
          value: rain_1
        });
        result.push({
          type: 'wind',
          name: 'Wind',
          value: wind_1
        });
      }

      if (convective && convective.length > 0) {
        var risk = convective[0].details.risk;
        result.push({
          type: 'convective',
          name: 'Convective',
          value: risk.type
        });
      } else {
        result.push({
          type: 'convective',
          name: 'Convective',
          value: 'none'
        });
      }

      if (lightning) {
        var count = (0, _utils.get)(lightning[0] || lightning, 'summary.pulse.count');
        result.push({
          type: 'lightning',
          name: 'Lightning',
          value: count
        });
      } else {
        result.push({
          type: 'lightning',
          name: 'Lightning',
          value: 0
        });
      }

      return result;
    },
    renderer: function (data) {
      if (!data || !(0, _utils.isArray)(data)) {
        return null;
      }

      var hazards = data.map(function (hazard) {
        var index = (0, _Indices.valueForIndice)(hazard.type, hazard.value) || 0;
        var percent = Math.round(index / 5 * 1000) / 10;
        var indexStr = ("" + index).replace(/\./g, 'p'); // determine impact level based on percentage

        var level = 'None';
        if (percent >= 80) level = 'Major';else if (percent >= 60) level = 'High';else if (percent >= 40) level = 'Moderate';else if (percent >= 20) level = 'Low';else if (percent > 0) level = 'Minimal';
        return "\n\t\t\t\t\t<div class=\"hazard awxjs__ui-cols align-center\">\n\t\t\t\t\t\t<div class=\"label\">" + hazard.name + "</div>\n\t\t\t\t\t\t<div class=\"bar\">\n\t\t\t\t\t\t\t<div class=\"bar-inner\">\n\t\t\t\t\t\t\t\t<div class=\"progress indice-value-" + indexStr + "\" style=\"width:" + percent + "%;\"></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"value indice-value-" + indexStr + "\">" + level + "</div>\n\t\t\t\t\t</div>\n\t\t\t\t";
      });
      return "<div class=\"hazards\">" + hazards.join('') + "</div>";
    }
  }
};
/**
 * An `InfoPanelView` is a view component that renders content associated with a single dataset or
 * content type within an info panel's content view.
 *
 * @export
 * @class InfoPanelView
 * @extends {View<InfoPanelViewOptions>}
 */

var InfoPanelView =
/** @class */
function (_super) {
  __extends(InfoPanelView, _super);
  /**
   * Initializes and returns an info panel view instance configured with the specified
   * configuration options and optional data.
   *
   * @param {InfoPanelViewOptions} [opts]
   * @param {*} [data]
   * @memberof InfoPanelView
   */


  function InfoPanelView(opts, data) {
    var _this = this;

    opts = (0, _utils.extend)({}, opts, {
      className: opts.className ? "app__ui-panel-info__view " + opts.className : 'app__ui-panel-info__view'
    });

    if ((0, _utils.isString)(opts.renderer)) {
      var section = InfoPanelView.getSection(opts.renderer);

      if (section) {
        opts = (0, _utils.extend)({}, section, opts, {
          renderer: section.renderer
        });
      }
    } // update renderer to account for title and passing renderers to render function


    var sections = Object.keys(cachedInfoPanelViews).reduce(function (previous, key) {
      previous[key] = cachedInfoPanelViews[key].renderer;
      return previous;
    }, {});

    if (opts.renderer) {
      var title_1 = opts.title ? "<h3>" + opts.title + "</h3>" : '';

      if ((0, _utils.isFunction)(opts.renderer)) {
        var renderFn_1 = opts.renderer;

        opts.renderer = function (renderData) {
          if ((0, _utils.isset)(renderData)) {
            return "\n\t\t\t\t\t\t\t" + title_1 + "\n\t\t\t\t\t\t\t" + renderFn_1(renderData, sections) + "\n\t\t\t\t\t\t";
          }

          return '';
        };
      } else if ((0, _utils.isString)(opts.renderer)) {
        opts.renderer = "\n\t\t\t\t\t" + title_1 + "\n\t\t\t\t\t" + opts.renderer + "\n\t\t\t\t";
      }
    }

    _this = _super.call(this, opts, data) || this;
    return _this;
  }
  /** Class Methods */

  /**
   * Adds a view to the cache using the specified key identifier.
   *
   * @static
   * @param {string} key
   * @param {InfoPanelViewSection} section
   * @memberof InfoPanelView
   */


  InfoPanelView.setSection = function (key, section) {
    cachedInfoPanelViews[key] = section;
  };
  /**
   * Returns the cached view associated with the key identifier, if any.
   *
   * @static
   * @param {string} key
   * @returns {InfoPanelViewSection}
   * @memberof InfoPanelView
   */


  InfoPanelView.getSection = function (key) {
    return cachedInfoPanelViews[key];
  };
  /**
   * Built-in views keyed by unique type identifiers.
   *
   * @static
   * @memberof InfoPanelView
   */


  InfoPanelView.cached = cachedInfoPanelViews;
  return InfoPanelView;
}(_View.default);

var _default = InfoPanelView;
exports.default = _default;
module.exports = exports.default;