import Panel, { PanelOptions, PanelState } from '../ui/Panel';
import Button, { ButtonOptions } from '../ui/Button';
import { SegmentedButtonOptions } from '../ui/SegmentedButton';
import { ButtonGroupOptions } from '../ui/ButtonGroup';
import IToggleable from '../interfaces/IToggleable';
/**
 * A data type that represents the configuration options for a button panel.
 */
export declare type ButtonPanelViewOptions = PanelOptions & {
    /**
     * An array of button configurations to be used when rendering the buttons.
     *
     * @type {((SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)[])}
     */
    buttons: (SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)[];
};
/**
 * A panel that renders and manages a series of button elements to be used for toggling data on
 * and off at runtime.
 *
 * @export
 * @class ButtonPanelView
 * @extends {Panel<ButtonPanelViewOptions, PanelState>}
 */
export default class ButtonPanelView extends Panel<ButtonPanelViewOptions, PanelState> {
    private _buttons;
    /**
     * Panel button elements.
     *
     * @readonly
     * @type {IToggleable[]}
     * @memberof ButtonPanelView
     */
    readonly buttons: IToggleable[];
    /**
     * Adds a new button to the end of the set using the provided button configuration.
     *
     * @param {(SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)} config Button configuration
     * @param {boolean} [events=true] A Boolean indicating whether to automatically add the default
     * button events
     * @returns {Button<any, any>}
     * @memberof ButtonPanelView
     */
    add(config: SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions, events?: boolean): Button<any, any>;
    /**
     * Inserts a new button at a specific index in the set using the provided button configuration.
     *
     * @param {number} index Index to insert the button into
     * @param {(SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)} config Button configuration
     * @param {boolean} [events=true] A Boolean indicating whether to automatically add the default
     * button events
     * @returns
     * @memberof ButtonPanelView
     */
    insertAt(index: number, config: SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions, events?: boolean): any;
    /**
     * Removes the button at the specified index.
     *
     * @param {number} index
     * @returns
     * @memberof ButtonPanelView
     */
    removeAt(index: number): void;
    /**
     * Removes the button for the specified identifier.
     *
     * @param {string} id
     * @memberof ButtonPanelView
     */
    removeForId(id: string): void;
    /**
     * Select the buttons associated with the specified value or array of values.
     *
     * @param {(string | string[])} value
     * @memberof ButtonPanelView
     */
    select(value: string | string[]): void;
    /**
     * Deselects the buttons associated with the specified value or array of values.
     *
     * @param {(string | string[])} value
     * @memberof ButtonPanelView
     */
    deselect(value: string | string[]): void;
    protected _afterRender(): void;
    protected _onAddedToDOM(): void;
    private _appendButton;
    private _addButtonEvents;
}
