"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _Button = _interopRequireDefault(require("../ui/Button"));

var _SegmentedButton = _interopRequireDefault(require("../ui/SegmentedButton"));

var _ButtonGroup = _interopRequireDefault(require("../ui/ButtonGroup"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var createButton = function (config) {
  var result;

  if (config.buttons) {
    result = new _ButtonGroup.default(config);
  } else {
    var button = void 0;

    if (config.segments) {
      result = new _SegmentedButton.default(config);
    } else {
      result = new _Button.default(config);
    }
  }

  return result;
};
/**
 * A panel that renders and manages a series of button elements to be used for toggling data on
 * and off at runtime.
 *
 * @export
 * @class ButtonPanelView
 * @extends {Panel<ButtonPanelViewOptions, PanelState>}
 */


var ButtonPanelView =
/** @class */
function (_super) {
  __extends(ButtonPanelView, _super);

  function ButtonPanelView() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(ButtonPanelView.prototype, "buttons", {
    /**
     * Panel button elements.
     *
     * @readonly
     * @type {IToggleable[]}
     * @memberof ButtonPanelView
     */
    get: function () {
      return this._buttons.slice();
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds a new button to the end of the set using the provided button configuration.
   *
   * @param {(SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)} config Button configuration
   * @param {boolean} [events=true] A Boolean indicating whether to automatically add the default
   * button events
   * @returns {Button<any, any>}
   * @memberof ButtonPanelView
   */

  ButtonPanelView.prototype.add = function (config, events) {
    if (events === void 0) {
      events = true;
    }

    var index = this._buttons.length;
    return this.insertAt(index, config, events);
  };
  /**
   * Inserts a new button at a specific index in the set using the provided button configuration.
   *
   * @param {number} index Index to insert the button into
   * @param {(SegmentedButtonOptions | ButtonOptions | ButtonGroupOptions)} config Button configuration
   * @param {boolean} [events=true] A Boolean indicating whether to automatically add the default
   * button events
   * @returns
   * @memberof ButtonPanelView
   */


  ButtonPanelView.prototype.insertAt = function (index, config, events) {
    if (events === void 0) {
      events = true;
    }

    if (!this._buttons) this._buttons = [];
    var button = createButton(config);

    if (index > this._buttons.length - 1) {
      this._buttons.push(button);

      index = null;
    } else {
      index = Math.max(0, index - 1);

      this._buttons.splice(index, 0, button);
    }

    this._appendButton(button, events, index);

    return button;
  };
  /**
   * Removes the button at the specified index.
   *
   * @param {number} index
   * @returns
   * @memberof ButtonPanelView
   */


  ButtonPanelView.prototype.removeAt = function (index) {
    if (index > this._buttons.length - 1 || index < 0) return;
    var button = this._buttons[index];

    if (button) {
      this._buttons.splice(index, 1);

      button.$el.remove();
    }
  };
  /**
   * Removes the button for the specified identifier.
   *
   * @param {string} id
   * @memberof ButtonPanelView
   */


  ButtonPanelView.prototype.removeForId = function (id) {
    var foundIndex = -1;

    this._buttons.forEach(function (button, index) {
      if (button.id === id && foundIndex === -1) {
        foundIndex = index;
      }
    });

    if (foundIndex >= 0) {
      this.removeAt(foundIndex);
    }
  };
  /**
   * Select the buttons associated with the specified value or array of values.
   *
   * @param {(string | string[])} value
   * @memberof ButtonPanelView
   */


  ButtonPanelView.prototype.select = function (value) {
    var _this = this;

    if ((0, _utils.isArray)(value)) {
      value.forEach(function (v) {
        return _this.select(v);
      });
    } else if (this._buttons) {
      this._buttons.forEach(function (button) {
        var val = value;

        if (button instanceof _ButtonGroup.default) {
          var group = button;
          group.buttons.forEach(function (btn) {
            if (btn.value === val || btn.id === val) {
              btn.select();
            }
          });
        } else if (button instanceof _SegmentedButton.default) {
          if (button.segments().indexOf(val) !== -1) {
            button.selectSegment(val);
          } else if (button.isFilter && val === button.id) {
            button.select();
          }
        } else if (button instanceof _Button.default) {
          if (button.value === val || button.id === val) {
            button.select();
          }
        }
      });
    }
  };
  /**
   * Deselects the buttons associated with the specified value or array of values.
   *
   * @param {(string | string[])} value
   * @memberof ButtonPanelView
   */


  ButtonPanelView.prototype.deselect = function (value) {
    var _this = this;

    if ((0, _utils.isArray)(value)) {
      value.forEach(function (v) {
        return _this.deselect(v);
      });
    } else if (this._buttons) {
      this._buttons.forEach(function (button) {
        var val = value;

        if (button instanceof _ButtonGroup.default) {
          var group = button;
          group.buttons.forEach(function (btn) {
            if (btn.value === val || btn.id === val) {
              btn.deselect();
            }
          });
        } else if (button instanceof _SegmentedButton.default) {
          if (button.segments().indexOf(val) !== -1) {
            button.deselect();
          } else if (button.isFilter && val === button.id) {
            button.deselect();
          }
        } else if (button instanceof _Button.default) {
          if (button.value === val || button.id === val) {
            button.deselect();
          }
        }
      });
    }
  };

  ButtonPanelView.prototype._afterRender = function () {
    _super.prototype._afterRender.call(this);

    if (this.opts.buttons) {
      var results_1 = [];
      var groups_1 = [];
      this.opts.buttons.forEach(function (item) {
        if (item.buttons) {
          var group = new _ButtonGroup.default(item); // results.concat(group.buttons);

          groups_1.push(group);
          results_1.push(group);
        } else {
          var button = void 0;

          if (item.segments) {
            button = new _SegmentedButton.default(item);
          } else {
            button = new _Button.default(item);
          }

          results_1.push(button);
        }
      });
      this._buttons = results_1;
    }
  };

  ButtonPanelView.prototype._onAddedToDOM = function () {
    var _this = this;

    this.ui.content.append('<div class="awxjs__app__ui-panel-buttons"></div>');
    this.ui.buttons = (0, _DOM.default)('.awxjs__app__ui-panel-buttons', this.$el);

    if (this._buttons) {
      this._buttons.forEach(function (button) {
        _this._appendButton(button);
      });
    }
  };

  ButtonPanelView.prototype._appendButton = function (button, events, index) {
    var _this = this;

    if (events === void 0) {
      events = true;
    }

    if (index === void 0) {
      index = -1;
    }

    if (index >= 0) {
      button.addTo(this.ui.buttons, false, index);
    } else {
      button.addTo(this.ui.buttons);
    }

    if (events) {
      if (button instanceof _ButtonGroup.default) {
        var group = button;
        group.buttons.forEach(function (btn) {
          _this._addButtonEvents(btn);
        });
      } else {
        this._addButtonEvents(button);
      }
    }
  };

  ButtonPanelView.prototype._addButtonEvents = function (button) {
    var _this = this;

    button.on('select', function (e) {
      _this.trigger('select', {
        id: button.id,
        value: button.value,
        options: e.data.options,
        filter: e.data.filter === true,
        multiselect: e.data.multiselect === true
      });
    }).on('deselect', function (e) {
      _this.trigger('deselect', {
        id: button.id,
        value: button.value,
        filter: e.data.filter === true,
        multiselect: e.data.multiselect === true
      });
    }).on('value:change', function (e) {
      _this.trigger('change', {
        id: button.id,
        value: e.data.value,
        previous: e.data.previous,
        options: e.data.options,
        filter: e.data.filter === true,
        multiselect: e.data.multiselect === true
      });
    });
  };

  ;
  return ButtonPanelView;
}(_Panel.default);

var _default = ButtonPanelView;
exports.default = _default;
module.exports = exports.default;