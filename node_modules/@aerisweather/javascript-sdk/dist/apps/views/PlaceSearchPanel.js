"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _SearchField = _interopRequireDefault(require("../ui/SearchField"));

var _ApiRequest = require("../../network/api/ApiRequest");

var _utils = require("../../utils");

var _strings = require("../../utils/strings");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `PlaceSearchPanel` is a panel component that displays and manages a search field component
 * that can be used for searching for and selecting locations.
 *
 * @export
 * @class PlaceSearchPanel
 * @extends {PanelView<PlaceSearchPanelOptions, PlaceSearchPanelState>}
 */
var PlaceSearchPanel =
/** @class */
function (_super) {
  __extends(PlaceSearchPanel, _super);
  /**
   * Initializes and returns a place search panel instance configured with the specified options.
   *
   * @param {PlaceSearchPanelOptions} [opts]
   * @memberof PlaceSearchPanel
   */


  function PlaceSearchPanel(opts) {
    var _this = this;

    opts = (0, _utils.extend)({
      field: {
        placeholder: 'Search for place...',
        data: {
          request: function (query) {
            return new Promise(function (resolve, reject) {
              _this._prepareServiceForQuery(query);

              _this._service.get().then(function (result) {
                var data = result.data || {};

                if (data.responses) {
                  var output_1 = [];
                  data.responses.forEach(function (response) {
                    if (response.response) {
                      output_1 = output_1.concat(response.response);
                    }
                  });
                  data = output_1;
                }

                resolve(data);
              }).catch(function (error) {
                reject(error);
              });
            });
          },
          formatter: function (result) {
            if (!result) return null;
            if (!result.place) return null;
            var parts = [(0, _strings.ucwords)(result.place.name)];

            if (result.place.country === 'US') {
              parts.push(result.place.state.toUpperCase());
            } else {
              parts.push((0, _strings.ucwords)(result.place.countryFull));
            }

            var val = parts.join(', ');

            if (result.type && result.type === 'airport') {
              val += ' (Airport)';
            }

            return val;
          }
        }
      }
    }, opts, {
      className: opts && opts.className ? "app__ui-panel-search " + opts.className : 'app__ui-panel-search'
    });
    _this = _super.call(this, opts) || this;
    _this._account = _this.opts.account;
    return _this;
  }

  Object.defineProperty(PlaceSearchPanel.prototype, "field", {
    /**
     * The underlying search field component.
     *
     * @readonly
     * @type {SearchField}
     * @memberof PlaceSearchPanel
     */
    get: function () {
      return this._field;
    },
    enumerable: true,
    configurable: true
  });

  PlaceSearchPanel.prototype._onAddedToDOM = function () {
    if (!this._field) {
      this._field = new _SearchField.default(this.opts.field);
    }

    this._field.addTo(this.ui.content);
  };

  PlaceSearchPanel.prototype._setupEvents = function () {
    var _this = this;

    this._field.on('select', function (e) {
      _this.trigger('select', e.data);
    }).on(_SearchField.default.Event.CHANGE_VALUE, function (e) {
      _this.trigger('change:value', e.data);
    }).on(_SearchField.default.Event.UPDATE_RESULTS, function (e) {
      _this.trigger('update:results', e.data);
    });
  };

  PlaceSearchPanel.prototype._prepareServiceForQuery = function (query) {
    if (!this._service) {
      this._service = this._account.api();
    }

    var service = this._service;
    service.removeAllRequests();
    service.resetParams(); // remove leading and trailing space

    query = query.replace(/^\s+/, '').replace(/\s+$/, ''); // replace spaces after commas

    query = query.replace(/,\s+/, ','); // replace trailing comma

    query = query.replace(/,$/, ''); // don't search, just reset if empty search string

    if (query.length === 0) {
      this._field.setResults([]);

      return;
    }

    if (/^(-?[\d\.]+),\s*(-?[\d\.]+)$/.test(query)) {
      // coordinate
      var request = this._account.api().endpoint('places').action(_ApiRequest.ApiAction.CLOSEST).place(query);

      service.addRequest(request); // this._searchType = 'coord';
    } else if (/^(\d\d\d\d\d(?:-\d\d\d\d)?|[ABCEGHJKLMNPRSTVXY]\d[A-Z] ?\d[A-Z]\d)$/i.test(query)) {
      // zipcode
      // service.place(query);
      var request = this._account.api().endpoint('places').place(query);

      service.addRequest(request); // this._searchType = 'zipcode';
    } else {
      if (/^\w{4}$/.test(query)) {
        // try request for 4-letter airport code
        var request_1 = this._account.api().endpoint('places').place(query);

        service.addRequest(request_1); // this._searchType = 'icao';
      }

      var parts = query.split(',');

      if (parts.length > 1) {
        query = "name:" + parts[0] + ";altname:" + parts[0];

        if (parts.length === 3) {
          query += ",state:" + parts[1] + ",country:" + parts[2];
        } else if (parts.length === 2 && parts[1].length > 0) {
          var val = parts[1];
          var altvals_1 = [];
          var isState_1 = false; // if length of val > 2 then check full state and/or country names

          if (val.length > 1) {
            var stateVals = (0, _strings.states)();
            var countryVals_1 = (0, _strings.countries)();
            var allStates_1 = (0, _utils.extend)({}, stateVals.us, stateVals.ca);
            var re_1 = new RegExp("^" + val, 'i'); // states

            Object.keys(stateVals).forEach(function (k) {
              if (re_1.test(allStates_1[k])) {
                altvals_1.push(k);
                isState_1 = true;
              }
            }); // countries

            if (!isState_1) {
              Object.keys(countryVals_1).forEach(function (k) {
                if (re_1.test(countryVals_1[k])) {
                  altvals_1.push(k);
                }
              });
            }
          }

          query += ",state:^" + val + ";country:^" + val;

          if (altvals_1.length > 0) {
            altvals_1.forEach(function (v) {
              query += isState_1 ? ";state:^" + v : ";country:^" + v;
            });
          }
        }
      } else {
        query = "name:^" + parts[0] + ";altname:^" + parts[0];
      } // this._searchType = 'place';


      var request = this._account.api().endpoint('places').action(_ApiRequest.ApiAction.SEARCH).query(query).limit(20).sort('pop:-1,haszip:-1');

      service.addRequest(request);
    }
  };

  return PlaceSearchPanel;
}(_Panel.default);

var _default = PlaceSearchPanel;
exports.default = _default;
module.exports = exports.default;