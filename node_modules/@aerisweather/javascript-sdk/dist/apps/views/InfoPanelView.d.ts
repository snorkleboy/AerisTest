import View, { ViewOptions } from '../ui/View';
import ApiRequest from '../../network/api/ApiRequest';
export declare type InfoPanelViewDataFormatter = (data: any) => any;
export declare type InfoPanelViewRenderer = (data: any, renderers?: {
    [key: string]: InfoPanelViewRenderer;
}) => string;
/**
 * A data type that represents the configuration options for an info panel view.
 */
export declare type InfoPanelViewSection = {
    request?: (data: any) => ApiRequest;
    data?: InfoPanelViewDataFormatter;
    renderer: InfoPanelViewRenderer;
};
/**
 * A data type that represents the configuration options for an info panel view.
 */
export declare type InfoPanelViewOptions = ViewOptions & {
    /**
     * View title. If defined, the title will be rendered at the top of the view container.
     *
     * @type {string}
     */
    title?: string;
    /**
     * Data to use when rendering the view.
     *
     * @type {*}
     */
    data?: any;
    /**
     * View renderer, which can either be an HTML string or a function that receives the view's
     * data as a parameter and returns the final HTML for the view.
     *
     * @type {((InfoPanelViewRenderer | string))}
     */
    renderer?: (InfoPanelViewRenderer | string);
};
/**
 * An `InfoPanelView` is a view component that renders content associated with a single dataset or
 * content type within an info panel's content view.
 *
 * @export
 * @class InfoPanelView
 * @extends {View<InfoPanelViewOptions>}
 */
export default class InfoPanelView extends View<InfoPanelViewOptions> {
    /**
     * Built-in views keyed by unique type identifiers.
     *
     * @static
     * @memberof InfoPanelView
     */
    static cached: {
        [key: string]: InfoPanelViewSection;
    };
    /**
     * Initializes and returns an info panel view instance configured with the specified
     * configuration options and optional data.
     *
     * @param {InfoPanelViewOptions} [opts]
     * @param {*} [data]
     * @memberof InfoPanelView
     */
    constructor(opts?: InfoPanelViewOptions, data?: any);
    /** Class Methods */
    /**
     * Adds a view to the cache using the specified key identifier.
     *
     * @static
     * @param {string} key
     * @param {InfoPanelViewSection} section
     * @memberof InfoPanelView
     */
    static setSection(key: string, section: InfoPanelViewSection): void;
    /**
     * Returns the cached view associated with the key identifier, if any.
     *
     * @static
     * @param {string} key
     * @returns {InfoPanelViewSection}
     * @memberof InfoPanelView
     */
    static getSection(key: string): InfoPanelViewSection;
}
