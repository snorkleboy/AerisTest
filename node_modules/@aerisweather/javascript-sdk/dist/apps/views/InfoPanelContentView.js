"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _InfoPanelView = _interopRequireDefault(require("./InfoPanelView"));

var _View = _interopRequireDefault(require("../ui/View"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var __assign = void 0 && (void 0).__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

/**
 * An `InfoPanelContentView` is a view component that manages and renders a series of individual
 * views to display within as an info panel's content. This object also requests remote data
 * required for the view as needed.
 *
 * @export
 * @class InfoPanelContentView
 * @extends {View<InfoPanelContentViewOptions>}
 */
var InfoPanelContentView =
/** @class */
function (_super) {
  __extends(InfoPanelContentView, _super);
  /**
   * Initializes and returns an info panel content view configured with the specified options.
   *
   * @param {InfoPanelContentViewOptions} [opts]
   * @param {*} [data]
   * @memberof InfoPanelContentView
   */


  function InfoPanelContentView(opts, data) {
    var _this = this;

    opts = (0, _utils.extend)({
      className: opts.className ? "app__ui-panel-info__content-view " + opts.className : 'app__ui-panel-info__content-view'
    }, opts);
    _this = _super.call(this, opts, data) || this;

    if (opts.views) {
      _this._views = [];
      opts.views.forEach(function (view) {
        if ((0, _utils.isPlainObject)(view)) {
          var config = view;
          view = new _InfoPanelView.default(config);
        }

        if (view instanceof _InfoPanelView.default) {
          _this._views.push(view);
        }
      });
    }

    return _this;
  }

  Object.defineProperty(InfoPanelContentView.prototype, "views", {
    /**
     * Array of views associated with the content view.
     *
     * @readonly
     * @type {InfoPanelView[]}
     * @memberof InfoPanelContentView
     */
    get: function () {
      return this._views;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Requests data for the content view and renders the view with the new data.
   *
   * @param {*} [params] Parameters to use with the data request (optional)
   * @param {*} [append] Data to append to the loaded data that is also used in the content
   * view (optional)
   * @memberof InfoPanelContentView
   */

  InfoPanelContentView.prototype.load = function (params, append) {
    var _this = this;

    var request = (0, _utils.isFunction)(this.opts.request) ? this.opts.request(append) : this.opts.request;

    if (request) {
      if (params) {
        request.setParams(params);
      }

      this.trigger('load:start');
      request.get().then(function (result) {
        var data = result.data || {}; // handle batch request by grouping data keyed by endpoint path

        if (data.responses && data.responses.length > 0) {
          var sections_1 = append || {};
          data.responses.forEach(function (response) {
            var key = response.request.replace(/\?.*$/, '').replace(/^\//, '').replace(/\//g, '_');
            sections_1[key] = response.response;
          });
          data = sections_1;
        }

        if (append) {
          data = __assign({}, data, append);
        }

        _this.setData(data);

        _this.trigger('load:done');
      }).catch(function (error) {
        console.error('awxjs.InfoPanelContentView.load', error);
      });
    } else if (append) {
      this.setData(append);
    }
  };

  InfoPanelContentView.prototype._afterRender = function () {
    var _this = this;

    var data = this.data;

    if (this.views) {
      this.views.forEach(function (view) {
        var viewData = (0, _utils.isFunction)(view.opts.data) ? view.opts.data((0, _utils.cloneDeep)(data)) : data;
        var allow = (0, _utils.isset)(viewData) && ((0, _utils.isPlainObject)(viewData) || (0, _utils.isArray)(viewData) && viewData.length > 0);

        if (allow === true) {
          view.setData(viewData);
          view.addTo(_this.$el);
        }
      });
    }

    if (this.$el.parent()) {
      this.trigger('update');
    }
  };

  return InfoPanelContentView;
}(_View.default);

var _default = InfoPanelContentView;
exports.default = _default;
module.exports = exports.default;