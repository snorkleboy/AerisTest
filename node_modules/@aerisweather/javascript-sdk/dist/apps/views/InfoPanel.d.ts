import Panel, { PanelOptions, PanelState } from '../ui/Panel';
import InfoPanelContentView, { InfoPanelContentViewOptions } from './InfoPanelContentView';
import { InfoPanelViewSection } from './InfoPanelView';
/**
 * A data type that represents the configuration options for an info panel.
 */
export declare type InfoPanelOptions = PanelOptions & {
    /**
     * View section configurations keyed by view section identifier.
     *
     * View sections represent data for a single data type and are used within content views
     * when rendering within an info panel.
     *
     * @type {{ [key: string]: InfoPanelViewSection }}
     */
    sections: {
        [key: string]: InfoPanelViewSection;
    };
    /**
     * Content view configurations keyed by view identifier.
     *
     * Content views contain one or more section views and are used when displaying content within an
     * info panel instance.
     *
     * @type {{ [key: string]: InfoPanelContentViewOptions }}
     */
    views: {
        [key: string]: InfoPanelContentViewOptions;
    };
};
declare type InfoPanelState = PanelState & {};
/**
 * An `InfoPanel` is a panel component that is responsible for displaying a variety of content
 * related to map data, such as markers and/or polygons, or requesting and rendering data assocated
 * with a specific geographical coordinate.
 *
 * @export
 * @class InfoPanel
 * @extends {Panel<InfoPanelOptions, InfoPanelState>}
 */
export default class InfoPanel extends Panel<InfoPanelOptions, InfoPanelState> {
    private _content;
    private _contentView;
    private _indicator;
    /**
     * Initializes and returns an info panel instance for the specified configuration options.
     *
     * @param {InfoPanelOptions} [opts]
     * @memberof InfoPanel
     */
    constructor(opts?: InfoPanelOptions);
    /**
     * Shows the info panel with optional title and data. If data is provided, it will be used
     * when rendering the current content view.
     *
     * To change the content view used, see `showContent()`.
     *
     * @param {string} [title]
     * @param {*} [data]
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    show(title?: string, data?: any): InfoPanel;
    /**
     * Returns the DOM element container for the view content.
     *
     * @returns {*}
     * @memberof Panel
     */
    getContentContainer(): any;
    /**
     * Shows the info panel using the content view associated with the specified `key` and with
     * optional title and data.
     *
     * @param {string} key The key associated with the content view to use when rendering the panel content
     * @param {string} [title]
     * @param {*} [data]
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    showContent(key: string, title?: string, data?: any): InfoPanel;
    /**
     * Adds a content view option to the panel and associates it with the specified key identifier.
     *
     * @param {string} key
     * @param {InfoPanelContentViewOptions} config
     * @returns {InfoPanelContentView}
     * @memberof InfoPanel
     */
    setContentView(key: string, config: InfoPanelContentViewOptions): InfoPanelContentView;
    /**
     * Closes the info panel.
     *
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    close(): InfoPanel;
    /**
     * Sets the current title.
     *
     * @param {string} value
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    setTitle(value: string): InfoPanel;
    /**
     * Updates the content view using the specified data.
     *
     * @param {*} [data]
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    setData(data?: any): InfoPanel;
    /**
     * Sets the width of the panel.
     *
     * @param {number} width
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    setWidth(width: number): InfoPanel;
    /**
     * Sets the maximum height for the panel. Depending on the internal content view, the actual
     * rendered height may be less than the value provided.
     *
     * @param {number} height
     * @returns {InfoPanel}
     * @memberof InfoPanel
     */
    setHeight(height: number): InfoPanel;
    /**
     * Loads and renders data for the current content view.
     *
     * @param {*} [params] Parameters to use with the data request (optional)
     * @param {*} [append] Data to append to the loaded data that is also used in the content view (optional)
     * @memberof InfoPanel
     */
    load(params?: any, append?: any): void;
    /**
     * Resets the content view.
     *
     * @memberof InfoPanel
     */
    reset(): void;
    protected _render(): string;
    protected _setupEvents(): void;
    protected _updateSize(): void;
}
export {};
