"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Panel = _interopRequireDefault(require("../ui/Panel"));

var _InfoPanelContentView = _interopRequireDefault(require("./InfoPanelContentView"));

var _InfoPanelView = _interopRequireDefault(require("./InfoPanelView"));

var _ActivityIndicator = _interopRequireDefault(require("../../ui/ActivityIndicator"));

var _utils = require("../../utils");

var _layout = require("../../utils/layout");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * An `InfoPanel` is a panel component that is responsible for displaying a variety of content
 * related to map data, such as markers and/or polygons, or requesting and rendering data assocated
 * with a specific geographical coordinate.
 *
 * @export
 * @class InfoPanel
 * @extends {Panel<InfoPanelOptions, InfoPanelState>}
 */
var InfoPanel =
/** @class */
function (_super) {
  __extends(InfoPanel, _super);
  /**
   * Initializes and returns an info panel instance for the specified configuration options.
   *
   * @param {InfoPanelOptions} [opts]
   * @memberof InfoPanel
   */


  function InfoPanel(opts) {
    var _this = this;

    opts = (0, _utils.extend)({
      ui: {
        container: '.awxjs__app__ui-panel-info-container',
        inner: '.awxjs__app__ui-panel-info-inner',
        title: '.awxjs__app__ui-panel-info-title',
        content: '.awxjs__app__ui-panel-info-content',
        close: '.awxjs__app__ui-panel-info-close'
      }
    }, opts, {
      className: opts.className ? "app__ui-panel-info " + opts.className : 'app__ui-panel-info'
    });
    _this = _super.call(this, opts) || this;
    _this._indicator = new _ActivityIndicator.default();

    _this.setState({
      visible: false
    });

    _this._content = {};

    if (opts.sections) {
      Object.keys(opts.sections).forEach(function (key) {
        _InfoPanelView.default.setSection(key, opts.sections[key]);
      });
    }

    if (opts.views) {
      Object.keys(opts.views).forEach(function (key, index) {
        var config = opts.views[key];

        var view = _this.setContentView(key, config);

        if (view && index === 0) {
          _this._contentView = view;
        }
      });
    }

    return _this;
  }
  /**
   * Shows the info panel with optional title and data. If data is provided, it will be used
   * when rendering the current content view.
   *
   * To change the content view used, see `showContent()`.
   *
   * @param {string} [title]
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.show = function (title, data) {
    this.setState({
      visible: true
    });

    this._updateSize();

    if (data) {
      this.setData(data);
    }

    if (title) {
      this.setTitle(title);
    }

    this.ui.content.css({
      opacity: 1
    });
    this.trigger('show');
    return this;
  };
  /**
   * Returns the DOM element container for the view content.
   *
   * @returns {*}
   * @memberof Panel
   */


  InfoPanel.prototype.getContentContainer = function () {
    return this.ui.inner;
  };
  /**
   * Shows the info panel using the content view associated with the specified `key` and with
   * optional title and data.
   *
   * @param {string} key The key associated with the content view to use when rendering the panel content
   * @param {string} [title]
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.showContent = function (key, title, data) {
    var view = this._content[key];

    if (view) {
      if (view !== this._contentView) {
        this.reset();
        this._contentView = view;
      }

      if (!this._contentView.parent()) {
        this._contentView.addTo(this.ui.content);
      }

      if (data) {
        this.setData(data);
      }

      this.trigger('change:content', {
        key: key
      });
      this.show(title, null);
    } else {
      console.error("[Aeris] Invalid view key '" + key + "' requested for InfoPanel. Make sure view has been defined in the InfoPanel 'views' configuration.");
    }

    return this;
  };
  /**
   * Adds a content view option to the panel and associates it with the specified key identifier.
   *
   * @param {string} key
   * @param {InfoPanelContentViewOptions} config
   * @returns {InfoPanelContentView}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.setContentView = function (key, config) {
    var _this = this;

    var view;

    if ((0, _utils.isPlainObject)(config)) {
      view = new _InfoPanelContentView.default(config);
    } else if (config instanceof _InfoPanelContentView.default) {
      view = config;
    }

    if (view) {
      view.on('load:start', function () {
        _this._indicator.startAnimating();

        _this.ui.content.css({
          opacity: 0
        });

        _this.trigger('load:start');
      }).on('load:done', function () {
        _this._indicator.stopAnimating();

        _this.ui.content.css({
          opacity: 1
        });

        _this.trigger('load:done');
      }).on('update', function () {
        _this._updateSize();
      });
      this._content[key] = view;
    }

    return view;
  };
  /**
   * Closes the info panel.
   *
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.close = function () {
    var _this = this;

    this.setHeight(0);
    this.ui.content.css({
      opacity: 0
    });
    this.setState({
      visible: false
    });
    this.trigger('close');
    setTimeout(function () {
      _this.ui.content.empty();
    }, 500);
    return this;
  };
  /**
   * Sets the current title.
   *
   * @param {string} value
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.setTitle = function (value) {
    this.ui.title.html(value);
    return this;
  };
  /**
   * Updates the content view using the specified data.
   *
   * @param {*} [data]
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.setData = function (data) {
    // don't call super.setData() since only the internal content view needs rendering
    if (this._contentView) {
      this._contentView.setData(data);
    }

    return this;
  };
  /**
   * Sets the width of the panel.
   *
   * @param {number} width
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.setWidth = function (width) {
    this.$el.css({
      'max-width': width + "px"
    });
    return this;
  };
  /**
   * Sets the maximum height for the panel. Depending on the internal content view, the actual
   * rendered height may be less than the value provided.
   *
   * @param {number} height
   * @returns {InfoPanel}
   * @memberof InfoPanel
   */


  InfoPanel.prototype.setHeight = function (height) {
    this.$el.css({
      'max-height': height + "px"
    });
    var innerBounds = this.ui.inner.bounds();

    this._indicator.$el.css({
      'max-height': height - innerBounds.top - 75 + "px"
    });

    return this;
  };
  /**
   * Loads and renders data for the current content view.
   *
   * @param {*} [params] Parameters to use with the data request (optional)
   * @param {*} [append] Data to append to the loaded data that is also used in the content view (optional)
   * @memberof InfoPanel
   */


  InfoPanel.prototype.load = function (params, append) {
    if (this._contentView) {
      this._contentView.load(params, append);
    } else {
      console.error('[Aeris] Cannot load data for InfoPanel, no active content view defined. Use `showContent(:key, :title, :data)` to set the active content view before calling `load()`.');
    }
  };
  /**
   * Resets the content view.
   *
   * @memberof InfoPanel
   */


  InfoPanel.prototype.reset = function () {
    if (this._contentView) {
      this._contentView.remove();
    }

    this.ui.content.empty();
  };

  InfoPanel.prototype._render = function () {
    return "\n\t\t\t<div class=\"awxjs__app__ui-panel-info-top\">\n\t\t\t\t<div class=\"awxjs__app__ui-panel-info-title\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"awxjs__app__ui-panel-info-container\">\n\t\t\t\t<div class=\"awxjs__app__ui-panel-info-inner\">\n\t\t\t\t\t<div class=\"awxjs__app__ui-panel-info-content\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<button class=\"awxjs__app__ui-panel-info-close\">\n\t\t\t\t<svg width=\"100pt\" height=\"100pt\" version=\"1.1\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t<path d=\"m22.699 77.301c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992l21.699-21.602 21.699 21.699c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992c1.6016-1.6016 1.6016-4.1016 0-5.6992l-21.602-21.699 21.699-21.699c1.6016-1.6016 1.6016-4.1016 0-5.6992-1.6016-1.6016-4.1016-1.6016-5.6992 0l-21.699 21.699-21.699-21.602c-1.6016-1.6016-4.1016-1.6016-5.6992 0-1.6016 1.6016-1.6016 4.1016 0 5.6992l21.699 21.602-21.602 21.699c-1.5977 1.5-1.5977 4.1016 0 5.6016z\"/>\n\t\t\t\t</svg>\n\t\t\t</button>\n\t\t";
  }; // protected _layout() {
  // 	const $parent = this.parent();
  // 	if ($parent) {
  // 		// if width is less than mobile breakpoint, adjust width so it fits within the view and doesn't overlap
  // 		// the map control elements
  // 		if ($parent.width() < 600) {
  // 			const x = parseFloat(this.$el.css('left').replace(/[^\d-\.]/, ''));
  // 			this.setWidth(Math.min(400, $parent.width() - x * 2));
  // 			this.setHeight(400);
  // 		} else {
  // 			this.$el.css('max-width', 'auto');
  // 			this.setHeight($parent.height() - 100);
  // 		}
  // 	}
  // }
  // protected _shouldLayout(): boolean {
  // 	const $parent = this.parent();
  // 	if ($parent) {
  // 		return $parent.width() < 600;
  // 	}
  // 	return super._shouldLayout();
  // }


  InfoPanel.prototype._setupEvents = function () {
    var _this = this;

    _super.prototype._setupEvents.call(this);

    this._indicator.appendTo(this.ui.inner);

    this.ui.close.on('click', function () {
      _this.close();
    });
  };

  InfoPanel.prototype._updateSize = function () {
    if (!this.visible) return; // const size = windowSize();

    var parent = this.$el.parent().bounds(true);
    var bounds = this.$el.bounds(true);
    var innerBounds = this.ui.inner.bounds(true);
    var offset = bounds.top - parent.top;
    var maxh = parent.height - offset * 2 - 100;
    var h = Math.max(175, innerBounds.height + (innerBounds.top - bounds.top));
    if (maxh > 900) maxh = 900;
    var vp = (0, _layout.viewportSizeClass)(); // if width is less than mobile breakpoint, adjust width so it fits within the view and doesn't overlap
    // the map control elements

    if (vp.width === 'compact') {
      this.setWidth(parent.width - bounds.left * 2);
      h = parent.height * 0.5;
    } else if (bounds.width > parent.width * 0.3) {
      this.setWidth(Math.max(300, Math.ceil(parent.width * 0.3)));
    } else {
      this.setWidth(400);
    }

    if (this.$el.width() <= 320) {
      this.$el.addClass('awxjs__app__ui-panel-info-compact');
    } else {
      this.$el.removeClass('awxjs__app__ui-panel-info-compact');
    }

    this.setHeight(Math.min(maxh, h));
  };

  return InfoPanel;
}(_Panel.default);

var _default = InfoPanel;
exports.default = _default;
module.exports = exports.default;