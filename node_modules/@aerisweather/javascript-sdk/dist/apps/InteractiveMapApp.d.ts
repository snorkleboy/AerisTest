import EventDispatcher from '../event/EventDispatcher';
import Account from '../account/Account';
import InteractiveMap from '../maps/interactive/InteractiveMap';
import ButtonPanel, { ButtonPanelViewOptions } from './views/ButtonPanel';
import InfoPanel from './views/InfoPanel';
import TimelinePanel from './views/TimelinePanel';
import LegendPanel from './views/LegendPanel';
import PlaceSearchPanel from './views/PlaceSearchPanel';
import { InteractiveMapOptions } from '../maps/interactive/types';
import { MarkerStyle } from '../maps/interactive/style/MarkerStyle';
import { IServers } from '../AerisWeather';
import { IPoint, ICoordinate } from '../interfaces/ICoordinate';
import { AnchorType } from '../utils/layout';
/**
 * A data type that represents the layout options for a view or component.
 */
export declare type LayoutOptions = {
    /**
     * Position configuration.
     *
     * @type {(IPoint | {
     * 		pin: AnchorType;
     * 		translate?: IPoint;
     * 	})}
     */
    position?: IPoint | {
        /**
         * Position to pin the element to relative to its parent container.
         *
         * @type {AnchorType}
         */
        pin: AnchorType;
        /**
         * Amount to shift the element in the x and y axis relative to its pinned position.
         *
         * @type {IPoint}
         */
        translate?: IPoint;
    };
};
/**
 * A data type that represents the configuration options for an interactive map application.
 */
export declare type InteractiveMapAppOptions = {
    /**
     * Aeris account to use when requesting map data and imagery.
     *
     * @type {Account}
     */
    account?: Account;
    /**
     * Base paths for the API servers to use with data and image requests.
     *
     * @type {IServers}
     */
    servers?: IServers;
    /**
     * Configuration for the internal interactive map.
     *
     * @type {InteractiveMapOptions}
     */
    map?: InteractiveMapOptions;
    /**
     * Configuration for the application panel components.
     *
     * @type {({
     * 		layers?: LayoutOptions & ButtonPanelViewOptions;
     * 		info?: LayoutOptions & {
     * 			marker: MarkerStyle;
     * 		};
     * 		timeline?: LayoutOptions;
     * 		search?: LayoutOptions;
     * 		legends?: LayoutOptions;
     * 	})}
     */
    panels?: {
        layers?: LayoutOptions & ButtonPanelViewOptions & {
            enabled?: boolean;
        };
        info?: LayoutOptions & {
            enabled?: boolean;
            marker: MarkerStyle;
        };
        timeline?: LayoutOptions & {
            enabled?: boolean;
        };
        search?: LayoutOptions & {
            enabled?: boolean;
        };
        legends?: LayoutOptions & {
            enabled?: boolean;
        };
    };
};
/**
 * An `InteractiveMapApp` object provides an full-featured weather map application that manages an
 * interactive map and enables runtime interaction of map content using a series of panel
 * view components.
 *
 * @export
 * @class InteractiveMapApp
 * @extends {EventDispatcher}
 */
export default class InteractiveMapApp extends EventDispatcher {
    id: string;
    private _account;
    private _opts;
    private _target;
    private _map;
    private _panels;
    private _sources;
    private _infoPanelMarker;
    /**
     * The Aeris account to use when requesting data for the map.
     *
     * @readonly
     * @type {Account}
     * @memberof InteractiveMapApp
     */
    readonly account: Account;
    /**
     * Primary DOM element associated with the view.
     *
     * @readonly
     * @type {*}
     * @memberof MapView
     */
    readonly $el: any;
    /**
     * Returns the underlying interactive map instance.
     *
     * @readonly
     * @type {InteractiveMap}
     * @memberof InteractiveMapApp
     */
    readonly map: InteractiveMap;
    /**
     * Returns the panel component instances for the application keyed by their type.
     *
     * @readonly
     * @type {{ layers: ButtonPanel, info: InfoPanel }}
     * @memberof InteractiveMapApp
     */
    readonly panels: {
        layers: ButtonPanel;
        timeline: TimelinePanel;
        info: InfoPanel;
        legends: LegendPanel;
        search: PlaceSearchPanel;
    };
    /**
     * Initializes an interactive map application with the specified DOM target and configuration
     * object.
     *
     * @param {HTMLElement} target
     * @param {InteractiveMapAppOptions} [opts]
     * @memberof InteractiveMapApp
     */
    constructor(target: HTMLElement, opts?: InteractiveMapAppOptions);
    /**
     * Adds a map content source to the application cache that can be toggled on and off using the
     * unique key identifier. Note that this method does not render the source to the interactive
     * map.
     *
     * @param {string} key Identifier for the source
     * @param {string} type Type of map content source to use, `tile`, `vector`, `geojson` or `text`
     * @param {*} config Configuration options for the source
     * @returns {*}
     * @memberof InteractiveMapApp
     */
    addSource(key: string, type: string, config: any): any;
    /**
     * Shows the application's info panel component using the specified view key, title and data.
     *
     * @param {string} view Identifier associated with the view to render
     * @param {string} [title] Title to display in the info panel (optional)
     * @param {*} [data] Data to use when rendering the view in the panel (optional)
     * @returns {InfoPanel}
     * @memberof InteractiveMapApp
     */
    showInfo(view: string, title?: string, data?: any): InfoPanel;
    /**
     * Shows the application's info panel component for the specified geographical coordinate. Data
     * will be requested for the coordinate using the view's request instance
     *
     * @param {ICoordinate} coord Coordinate to request data for
     * @param {string} view Identifier associated with the view to render
     * @param {string} [title] Title to display in the info panel (optional)
     * @param {MarkerStyle} [marker] Marker style to use when placing the marker on the map at the
     * coordinate (optional)
     * @returns {InfoPanel}
     * @memberof InteractiveMapApp
     */
    showInfoAtCoord(coord: ICoordinate, view: string, title?: string, marker?: MarkerStyle): InfoPanel;
    /**
     * Returns the panel view associated with the specified key, if any.
     *
     * @param {string} key
     * @returns {*}
     * @memberof InteractiveMapApp
     */
    getPanel(key: string): any;
    private _setupLayersPanel;
    private _setupInfoPanel;
    private _setupTimeline;
    private _setupSearchPanel;
    private _setupLegendsPanel;
    private _layout;
}
