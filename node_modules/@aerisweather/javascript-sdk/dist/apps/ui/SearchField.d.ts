import View, { ViewOptions } from './View';
/**
 * A data type that represents the configuration options for search field component.
 */
export declare type SearchFieldOptions = ViewOptions & {
    /**
     * Placeholder text for the input field.
     *
     * @type {string}
     */
    placeholder?: string;
    /**
     * A Boolean indicating whether a search request should be triggered whenever the input field's
     * value changes.
     *
     * @type {boolean}
     */
    autocomplete?: boolean;
    /**
     * A Boolean indicating whether the first search result should automatically be selected,
     * allowing the user to use the Enter key to select it.
     *
     * @type {boolean}
     */
    autoselect: boolean;
    /**
     * Configuration for requesting and formatting data based on search results.
     *
     * @type {
     * 		request: (query: string) => Promise<any[]>;
     * 		formatter?: (data: any) => string;
     * 	}
     */
    data?: {
        /**
         * A function that returns a Promise that performs the necessary search request using the
         * specified query from the field.
         *
         * @type {(query: string) => Promise<any[]>}
         */
        request: (query: string) => Promise<any[]>;
        /**
         * A function that is used to format each result returned by the search request before
         * rendering it in the field's search results.
         *
         * @type {(data: any) => string}
         *
         */
        formatter?: (data: any) => string;
    };
};
/**
 * A `SearchField` is a view component that displays an text input field and is responsible for
 * performing search requests and displaying search results based on the component's configuration.
 *
 * @export
 * @class SearchField
 * @extends {View<SearchFieldOptions>}
 */
export default class SearchField extends View<SearchFieldOptions> {
    private _results;
    private _selectedIndex;
    private _indicator;
    /**
     * The underlying text input field value.
     *
     * @type {string}
     * @memberof SearchField
     */
    value: string;
    /**
     * Initializes and returns a search field instance configured with the specified options.
     *
     * @param {*} [opts]
     * @memberof SearchField
     */
    constructor(opts?: any);
    /**
     * Updates the displayed search results.
     *
     * @param {any[]} results
     * @memberof SearchField
     */
    setResults(results: any[]): void;
    /**
     * Resets the field by clearing the input field value and removing all existing results.
     *
     * @memberof SearchField
     */
    reset(): void;
    /**
     * Clears the existing search results.
     *
     * @memberof SearchField
     */
    clear(): void;
    /**
     * Focuses the component's input field.
     *
     * @memberof SearchField
     */
    focus(): void;
    /**
     * Blurs the component's input field.
     *
     * @memberof SearchField
     */
    blur(): void;
    /**
     * Events that can be triggered by a `SearchField` instance.
     *
     * @static
     * @memberof Button
     */
    static Event: {
        /** Fired when the field's input value changes. */
        CHANGE_VALUE: string;
        /** Fired when the field's form is submitted and a search query is triggered. */
        SUBMIT: string;
        /** Fired when a result is selected from the search results listing. */
        SELECT: string;
        /** Fired when the search results are updated. */
        UPDATE_RESULTS: string;
        /** Fired when the Escape key is detected while the field is focused. */
        KEY_ESCAPE: string;
        /** Fired when the Enter key is detected while the field is focused. */
        KEY_ENTER: string;
    };
    protected _render(data?: any): string;
    protected _onAddedToDOM(): void;
    private _keyHandler;
    private _docHandler;
    protected _setupEvents(): void;
    private _search;
    private _renderResults;
    private _handleResultMouseover;
    private _handleResultClick;
    private _selectResultAtIndex;
    private _handleDocClick;
    private _listenForKeys;
}
