"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _EventDispatcher = _interopRequireDefault(require("../../event/EventDispatcher"));

var _utils = require("../../utils");

var _strings = require("../../utils/strings");

var _layout = require("../../utils/layout");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `View` object is the base class used for view and component classes.
 *
 * @export
 * @class View
 * @extends {EventDispatcher}
 * @template T
 */
var View =
/** @class */
function (_super) {
  __extends(View, _super);
  /**
   * Initializes and returns a view instance using the specified configuration options.
   *
   * @param {T} [opts]
   * @param {*} [data]
   * @memberof View
   */


  function View(opts, data) {
    var _this = _super.call(this) || this;

    opts = (0, _utils.extend)({
      className: (0, _strings.prefixCSSClassName)('app__view'),
      renderer: null
    }, opts);
    _this._opts = opts;
    _this._target = (0, _DOM.default)('<div></div>');
    _this._ui = {};
    _this._needsRender = true; // this._DOMObserver = new MutationObserver((mutations: any, observer: any) => {
    // 	// console.log(mutations);
    // 	mutations.forEach((mutation: MutationRecord) => {
    // 		console.log(mutation.type, mutation.target, mutation.addedNodes);
    // 	});
    // });
    // this._DOMObserver.observe(this._target[0], { childList: true, subtree: true });

    if (opts.className) {
      _this.$el.addClass((0, _strings.prefixCSSClassName)(opts.className));
    }

    _this.render(data);

    return _this;
  }

  Object.defineProperty(View.prototype, "$el", {
    /**
     * DOM element associated with the view.
     *
     * @readonly
     * @type {*}
     * @memberof View
     */
    get: function () {
      return this._target;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "id", {
    /**
     * Identifier associated with the view.
     *
     * @readonly
     * @type {string}
     * @memberof View
     */
    get: function () {
      return this.opts.id;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "opts", {
    /**
     * Configuration options.
     *
     * @readonly
     * @type {T}
     * @memberof View
     */
    get: function () {
      return this._opts;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "ui", {
    /**
     * Interface DOM targets, which are only available after the view has been rendered to the DOM.
     *
     * @readonly
     * @type {{ [key: string]: any }}
     * @memberof View
     */
    get: function () {
      return this._ui;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(View.prototype, "data", {
    /**
     * Data used when rendering the view, if any.
     *
     * @readonly
     * @type {*}
     * @memberof View
     */
    get: function () {
      return this._data;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Adds the view's element to the DOM by appending it to the specified target.
   *
   * @param {(HTMLElement | string)} target DOM target in which the view will be appended
   * @param {boolean} [replace=false] Whether the view should replace the target's existing
   * content
   * @param {number} [index=-1] Index within the target's children at which the view is
   * inserted, if applicable. If the value is `-1` or greater than the total number of
   * children, the view is appened to the end of the target.
   * @memberof View
   */

  View.prototype.addTo = function (target, replace, index) {
    var _this = this;

    if (replace === void 0) {
      replace = false;
    }

    if (index === void 0) {
      index = -1;
    }

    if (!target) {
      throw new Error('[Aeris] Invalid DOM target specified for View.addTo()');
    }

    var $target = (0, _DOM.default)(target);

    if (replace) {
      $target.empty();
    }

    if (this._needsRender) {
      this.render(this._data);
    }

    if (index >= 0) {
      var children = $target.children();

      if (index >= children.length) {
        $target.append(this.$el);
        this._target = $target.children().last();
      } else {
        (0, _DOM.default)(children[index]).before(this.$el);
        this._target = (0, _DOM.default)($target.children()[index]);
      }
    } else {
      $target.append(this.$el);
      this._target = $target.children().last();
    }

    this._lastSize = this.size();

    if (this._opts.ui) {
      this.setUI(this._opts.ui);
    }

    this._onAddedToDOM();

    this._layout();

    this._setupEvents();

    this._afterEvents();

    this.trigger('render');
    (0, _DOM.default)(window).on('resize', function () {
      _this._onResize();
    });
  };
  /**
   * Removes the view from the DOM.
   *
   * @memberof View
   */


  View.prototype.remove = function () {
    this.$el.remove();
  };
  /**
   * Parent DOM target, if any. Parent will be `null` if the view has not been added to the DOM.
   *
   * @returns {*}
   * @memberof View
   */


  View.prototype.parent = function () {
    var result = this.$el.parent();

    if (result && result.length > 0 && result[0] !== null) {
      return result;
    }

    return null;
  };
  /**
   * Returns the view's current size.
   *
   * @returns {ISize}
   * @memberof View
   */


  View.prototype.size = function () {
    return {
      width: this.$el.outerWidth(),
      height: this.$el.outerHeight()
    };
  };
  /**
   * Renders the view using the specified data.
   *
   * @param {*} [data]
   * @memberof View
   */


  View.prototype.setData = function (data) {
    data = this._onData(data);
    this._data = (0, _utils.cloneDeep)(data);
    this._needsRender = true;
    this.render(data);
  };
  /**
   * Assigns the UI targets according to the view's configured interface selectors.
   *
   * Note that this method should only be called after the view has been rendered and added to
   * the DOM.
   *
   * @param {{ [key: string]: string }} mapping
   * @returns
   * @memberof View
   */


  View.prototype.setUI = function (mapping) {
    var _this = this;

    if (!this.$el) return;
    Object.keys(mapping).forEach(function (key) {
      try {
        var result = (0, _DOM.default)(mapping[key], _this.$el);

        if (result && result.length > 0) {
          _this._ui[key] = result;
        } else {
          _this._ui[key] = null;
        }
      } catch (e) {
        console.warn(e);
      }
    });
  };
  /**
   * Updates the view's position to the specified x and y values with optional offsets. The view
   * must be configured with absolute positioning.
   *
   * @param {IPoint} position
   * @param {{ x: number, y: number }} [offset={ x: 0, y: 0 }]
   * @memberof View
   */


  View.prototype.moveTo = function (position, offset) {
    if (offset === void 0) {
      offset = {
        x: 0,
        y: 0
      };
    }

    var x = position.x;
    var y = position.y;
    x += offset.x;
    y += offset.y;
    this.$el.css({
      left: x + "px",
      top: y + "px"
    });
  };
  /**
   * Positions the view by pinning it relative to its parent container. The view must be
   * configured with absolute positioning.
   *
   * @param {AnchorType} position Anchor position of the view within its container
   * @param {{ x: number, y: number }} [offset] Offsets relative to the pinned position
   * @memberof View
   */


  View.prototype.pinTo = function (position, offset) {
    var $parent = this.parent();
    offset = (0, _utils.extend)({
      x: 0,
      y: 0
    }, offset);
    this.$el.addClass("awxjs__app__view__pinned-" + position);

    if ($parent) {
      var parent_1 = $parent.bounds();
      var pos = (0, _layout.getPinnedPosition)(position, this.size(), {
        width: parent_1.width,
        height: parent_1.height
      }, offset);
      var horizontal = /right/.test(position) ? 'right' : 'left';
      var vertical = /bottom/.test(position) ? 'bottom' : 'top'; // if horizontal or vertical positions are right/bottom, then just use the offset
      // values for the position but the inverse

      if (horizontal === 'right') pos.x = offset.x * -1;
      if (vertical === 'bottom') pos.y = offset.y * -1;
      var props = {};
      props[horizontal] = pos.x + "px";
      props[vertical] = pos.y + "px";
      this.$el.css(props);
    }
  };
  /**
   * Renders the view.
   *
   * If `data` is provided, the view will be rendered with the specified data. Otherwise, the
   * existing data will be used, if any.
   *
   * @param {*} [data]
   * @memberof View
   */


  View.prototype.render = function (data) {
    if (data) this._data = (0, _utils.cloneDeep)(data);
    data = data || {};

    this._beforeRender();

    var renderer = this.opts.renderer;
    var output;

    if (renderer) {
      if ((0, _utils.isFunction)(renderer)) {
        output = renderer(data);
      } else if ((0, _utils.isString)(renderer)) {
        output = renderer;
      }
    } else {
      output = this._render(data);
    }

    if ((0, _utils.isset)(output)) {
      this.$el.html(output);
    }

    this._needsRender = false;

    if (this._opts.ui) {
      this.setUI(this._opts.ui);
    }

    this._afterRender();
  };

  View.prototype._render = function (data) {
    return null;
  };

  View.prototype._layout = function () {};

  View.prototype._onData = function (data) {
    return data;
  };

  View.prototype._beforeRender = function () {};

  View.prototype._afterRender = function () {};

  View.prototype._setupEvents = function () {};

  View.prototype._afterEvents = function () {};

  View.prototype._onAddedToDOM = function () {};

  View.prototype._onResize = function () {
    if (this._shouldLayout()) {
      this._layout();
    }

    this._lastSize = this.size();
  };

  View.prototype._shouldLayout = function () {
    var size = this.size();

    if (size.width !== this._lastSize.width || size.height !== this._lastSize.height) {
      return true;
    }

    return false;
  };

  return View;
}(_EventDispatcher.default);

var _default = View;
exports.default = _default;
module.exports = exports.default;