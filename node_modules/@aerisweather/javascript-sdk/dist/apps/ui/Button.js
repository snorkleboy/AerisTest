"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("./Component"));

var _utils = require("../../utils");

var _globals = require("../../globals");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `Button` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class Button
 * @extends {Component<T, S>}
 * @implements {IToggleable}
 * @template T
 * @template S
 */
var Button =
/** @class */
function (_super) {
  __extends(Button, _super);
  /**
   * Initializes and returns a button instance with the specified configuration options.
   *
   * @param {*} [opts]
   * @memberof Button
   */


  function Button(opts) {
    var _this = this;

    opts = opts || {};
    opts = (0, _utils.extend)(opts, {
      className: opts.className ? "ui-btn " + opts.className : 'ui-btn'
    });
    opts.id = opts.id || opts.value;
    _this = _super.call(this, opts) || this;

    _this.setState({
      selected: false
    });

    if (_this.opts.selected) {
      _this.select();
    }

    return _this;
  }

  Object.defineProperty(Button.prototype, "id", {
    /**
     * Button identifier.
     *
     * @readonly
     * @type {string}
     * @memberof Button
     */
    get: function () {
      return this.opts.id || this.opts.value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Button.prototype, "selected", {
    /**
     * A Boolean indicated whether the button is currently selected.
     *
     * @readonly
     * @type {boolean}
     * @memberof Button
     */
    get: function () {
      var selected = this.state.selected;
      return selected;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Button.prototype, "value", {
    /**
     * Value associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    get: function () {
      return this.opts.value;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Button.prototype, "options", {
    /**
     * Custom data associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    get: function () {
      return this.opts.options;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Selects the button.
   *
   * @memberof Button
   */

  Button.prototype.select = function () {
    if (this.selected === false) {
      this.setState({
        selected: true
      });
      this.$el.addClass('selected');

      this._onSelect();
    }
  };
  /**
   * Deselects the button.
   *
   * @memberof Button
   */


  Button.prototype.deselect = function () {
    if (this.selected) {
      this.setState({
        selected: false
      });
      this.$el.removeClass('selected');

      this._onDeselect();
    }
  };

  Button.prototype._onSelect = function () {
    this.trigger(Button.Event.SELECT, {
      id: this.id,
      value: this.value,
      options: this.options
    });
  };

  Button.prototype._onDeselect = function () {
    this.trigger(Button.Event.DESELECT, {
      id: this.id,
      value: this.value,
      options: this.options
    });
  };

  Button.prototype._render = function (data) {
    return "<div class=\"" + _globals.Globals.cssPrefix + "ui-btn-label\">" + this.opts.title + "</div>";
  };

  Button.prototype._setupEvents = function () {
    var _this = this;

    _super.prototype._setupEvents.call(this);

    this.$el.on('click', function () {
      if (_this.selected) {
        _this.deselect();
      } else {
        _this.select();
      }
    });
  };
  /**
   * Events that can be triggered by a `Button` instance.
   *
   * @static
   * @memberof Button
   */


  Button.Event = {
    /** Fired when the button is selected. */
    SELECT: 'select',

    /** Fired when the button is deselected. */
    DESELECT: 'deselect'
  };
  return Button;
}(_Component.default);

var _default = Button;
exports.default = _default;
module.exports = exports.default;