import View, { ViewOptions } from './View';
/**
 * A data type that represents the configuration options for a component.
 */
export declare type ComponentOptions = ViewOptions & {};
export declare type ComponentState = {};
/**
 * A `Component` is a view subclass that contains and manages its own state and is typically used
 * for interactive interface elements.
 *
 * @export
 * @class Component
 * @extends {View<T>}
 * @template T
 * @template S
 */
export default class Component<T extends ComponentOptions, S extends ComponentState> extends View<T> {
    private _state;
    /**
     * Current component state.
     *
     * @readonly
     * @type {S}
     * @memberof Component
     */
    readonly state: S;
    getState(key: string): any;
    /**
     * Updates the component state with the provided properties. Only those state properties
     * provided will be updated, while all other state properties will retain their existing
     * values.
     *
     * @param {*} state
     * @memberof Component
     */
    setState(state: any): void;
}
