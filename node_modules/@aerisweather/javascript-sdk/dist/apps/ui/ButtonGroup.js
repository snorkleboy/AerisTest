"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("./Component"));

var _Button = _interopRequireDefault(require("./Button"));

var _SegmentedButton = _interopRequireDefault(require("./SegmentedButton"));

var _utils = require("../../utils");

var _globals = require("../../globals");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `ButtonGroup` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class ButtonGroup
 * @extends {Component<T, S>}
 * @template T
 * @template S
 */
var ButtonGroup =
/** @class */
function (_super) {
  __extends(ButtonGroup, _super);
  /**
   * Initializes and returns a button group instance with the specified configuration options.
   *
   * @param {*} [opts]
   * @memberof ButtonGroup
   */


  function ButtonGroup(opts) {
    var _this = this;

    opts = opts || {};
    opts = (0, _utils.extend)({
      multiselect: true
    }, opts, {
      className: opts.className ? "ui-btn-group " + opts.className : 'ui-btn-group',
      ui: {
        buttons: "." + _globals.Globals.cssPrefix + "ui-btn-group-items"
      }
    });
    _this = _super.call(this, opts) || this;

    _this.setState({
      expanded: true
    });

    return _this;
  }

  Object.defineProperty(ButtonGroup.prototype, "buttons", {
    /**
     * Array of button elements included in the group.
     *
     * @readonly
     * @type {IToggleable[]}
     * @memberof ButtonGroup
     */
    get: function () {
      return this._buttons;
    },
    enumerable: true,
    configurable: true
  });

  ButtonGroup.prototype._render = function (data) {
    return "\n\t\t\t<div class=\"" + _globals.Globals.cssPrefix + "ui-btn-group-label\">" + this.opts.title + "</div>\n\t\t\t<div class=\"" + _globals.Globals.cssPrefix + "ui-btn-group-items\"></div>\n\t\t";
  };

  ButtonGroup.prototype._onAddedToDOM = function () {
    var _this = this;

    _super.prototype._onAddedToDOM.call(this);

    if (this.opts.buttons) {
      this._buttons = (this.opts.buttons || []).map(function (opts) {
        if (opts.segments) {
          return new _SegmentedButton.default(opts);
        } else {
          return new _Button.default(opts);
        }
      });
    }

    if (this.ui.buttons && this.ui.buttons.children().length === 0) {
      this.buttons.forEach(function (button) {
        button.addTo(_this.ui.buttons);
      });
    }
  };

  ButtonGroup.prototype._setupEvents = function () {
    var _this = this;

    _super.prototype._setupEvents.call(this);

    if (this.opts.multiselect === false) {
      this.buttons.forEach(function (button) {
        if (button.selected) {
          _this._selectedButton = button;
        }

        button.on('select', function () {
          if (_this._selectedButton) {
            _this._selectedButton.deselect();
          }

          _this._selectedButton = button;

          _this.trigger('change', {
            value: button.value
          });
        });
      });
    }
  };
  /**
   * Events that can be triggered by a `ButtonGroup` instance.
   *
   * @static
   * @memberof ButtonGroup
   */


  ButtonGroup.Event = {
    /** Fired when the button group is expanded. */
    EXPAND: 'expand',

    /** Fired when the button group is collapsed. */
    COLLAPSE: 'collapse'
  };
  return ButtonGroup;
}(_Component.default);

var _default = ButtonGroup;
exports.default = _default;
module.exports = exports.default;