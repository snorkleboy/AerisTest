import Component, { ComponentState, ComponentOptions } from './Component';
import IToggleable from '../interfaces/IToggleable';
/**
 * A data type that represents the configuration options for a button component.
 */
export declare type ButtonOptions = ComponentOptions & {
    /**
     * Identifier for the button. If not provided, the `value` will be used as the button's identifier.
     *
     * @type {string}
     */
    id?: string;
    /**
     * Button label.
     *
     * @type {string}
     */
    title: string;
    /**
     * Button value.
     *
     * @type {*}
     */
    value?: any;
    /**
     * A Boolean indicating whether the button should be selected.
     *
     * @type {boolean}
     */
    selected?: boolean;
    /**
     * Optional data associated with the button.
     *
     * @type {{ [key: string]: any }}
     */
    options?: {
        [key: string]: any;
    };
};
export declare type ButtonState = ComponentState & {
    selected: boolean;
};
/**
 * A `Button` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class Button
 * @extends {Component<T, S>}
 * @implements {IToggleable}
 * @template T
 * @template S
 */
export default class Button<T extends ButtonOptions, S extends ButtonState> extends Component<T, S> implements IToggleable {
    /**
     * Events that can be triggered by a `Button` instance.
     *
     * @static
     * @memberof Button
     */
    static Event: {
        /** Fired when the button is selected. */
        SELECT: string;
        /** Fired when the button is deselected. */
        DESELECT: string;
    };
    /**
     * Initializes and returns a button instance with the specified configuration options.
     *
     * @param {*} [opts]
     * @memberof Button
     */
    constructor(opts?: any);
    /**
     * Button identifier.
     *
     * @readonly
     * @type {string}
     * @memberof Button
     */
    readonly id: string;
    /**
     * A Boolean indicated whether the button is currently selected.
     *
     * @readonly
     * @type {boolean}
     * @memberof Button
     */
    readonly selected: boolean;
    /**
     * Value associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    readonly value: any;
    /**
     * Custom data associated with the button, if any.
     *
     * @readonly
     * @type {*}
     * @memberof Button
     */
    readonly options: any;
    /**
     * Selects the button.
     *
     * @memberof Button
     */
    select(): void;
    /**
     * Deselects the button.
     *
     * @memberof Button
     */
    deselect(): void;
    protected _onSelect(): void;
    protected _onDeselect(): void;
    protected _render(data?: any): string;
    protected _setupEvents(): void;
}
