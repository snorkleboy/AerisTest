import EventDispatcher from '../../event/EventDispatcher';
import { ISize } from '../../interfaces/ICoordinate';
/**
 * A data type that represents the configuration options for a tooltip.
 */
export declare type TooltipOptions = {
    /**
     * CSS class name to add to the tooltip element.
     *
     * @type {string}
     */
    className?: string;
    /**
     *
     *
     * @type {string}
     */
    place: string;
    /**
     * Animation effect when presenting and dismissing the tooltip.
     *
     * @type {string}
     */
    effect: 'fade' | 'slide' | 'grow';
    /**
     * Position offset relative to the target.
     *
     * @type {number}
     */
    spacing: number;
};
/**
 * A `Tooltip` is a component for displaying additional information or content in a popover when
 * the target element is hovered over or clicked on.
 *
 * @export
 * @class Tooltip
 * @extends {EventDispatcher}
 */
export default class Tooltip extends EventDispatcher {
    private _opts;
    private _hidden;
    private _element;
    private _target;
    private _size;
    private _p;
    private _lastPlace;
    private _hideTimeout;
    /**
     * DOM element.
     *
     * @readonly
     * @type {*}
     * @memberof Tooltip
     */
    readonly $el: any;
    /**
     * Target DOM element.
     *
     * @readonly
     * @type {*}
     * @memberof Tooltip
     */
    readonly $target: any;
    /**
     * Size of the tooltip.
     *
     * @readonly
     * @type {ISize}
     * @memberof Tooltip
     */
    readonly size: ISize;
    /**
     * A Boolean indicating whether the tooltip is currently visible.
     *
     * @readonly
     * @type {boolean}
     * @memberof Tooltip
     */
    readonly visible: boolean;
    /**
     * Initializes and returns a tooltip instance configured with the specified content and options.
     *
     * @param {(string | HTMLElement)} [content]
     * @param {TooltipOptions} [opts]
     * @memberof Tooltip
     */
    constructor(content?: string | HTMLElement, opts?: TooltipOptions);
    /**
     * Shows the tooltip from the previously configured target.
     *
     * To present the tooltip from a different target, call `attachTo()` before showing the
     * tooltip.
     *
     * @param {boolean} [hideOthers=true] A Boolean indicating whether all existing tooltips
     * should be hidden when showing this instance.
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    show(hideOthers?: boolean): Tooltip;
    /**
     * Hides the tooltip.
     *
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    hide(): Tooltip;
    /**
     * Toggles the visibility of the tooltip.
     *
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    toggle(): Tooltip;
    /**
     * Sets the content, which can either be a text string or HTML string.
     *
     * @param {(string | HTMLElement)} content
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    setContent(content: string | HTMLElement): Tooltip;
    /**
     * Sets the current target.
     *
     * @param {*} element
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    attachTo(element: any): Tooltip;
    /**
     * Hides the tooltip and removes its associated with the current target.
     *
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    detach(): Tooltip;
    /**
     * Updates the tooltip's position.
     *
     * This method accepts either an x and y pixel coordinate from which to position the tooltip.
     * Alternatively, a single DOM element argument can be provided which will be used when
     * calculating the new position.
     *
     * @param {(number | Element)} [x]
     * @param {number} [y]
     * @returns {Tooltip}
     * @memberof Tooltip
     */
    position(x?: number | Element, y?: number): Tooltip;
    private _updateSize;
    private _pickPlace;
    private _reposition;
}
