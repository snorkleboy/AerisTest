"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `Component` is a view subclass that contains and manages its own state and is typically used
 * for interactive interface elements.
 *
 * @export
 * @class Component
 * @extends {View<T>}
 * @template T
 * @template S
 */
var Component =
/** @class */
function (_super) {
  __extends(Component, _super);

  function Component() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  Object.defineProperty(Component.prototype, "state", {
    /**
     * Current component state.
     *
     * @readonly
     * @type {S}
     * @memberof Component
     */
    get: function () {
      return (0, _utils.cloneDeep)(this._state);
    },
    enumerable: true,
    configurable: true
  });

  Component.prototype.getState = function (key) {
    return (0, _utils.get)(this.state, key);
  };
  /**
   * Updates the component state with the provided properties. Only those state properties
   * provided will be updated, while all other state properties will retain their existing
   * values.
   *
   * @param {*} state
   * @memberof Component
   */


  Component.prototype.setState = function (state) {
    this._state = (0, _utils.extend)(this._state, state);
  };

  return Component;
}(_View.default);

var _default = Component;
exports.default = _default;
module.exports = exports.default;