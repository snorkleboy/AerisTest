"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _ActivityIndicator = _interopRequireDefault(require("../../ui/ActivityIndicator"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `SearchField` is a view component that displays an text input field and is responsible for
 * performing search requests and displaying search results based on the component's configuration.
 *
 * @export
 * @class SearchField
 * @extends {View<SearchFieldOptions>}
 */
var SearchField =
/** @class */
function (_super) {
  __extends(SearchField, _super);
  /**
   * Initializes and returns a search field instance configured with the specified options.
   *
   * @param {*} [opts]
   * @memberof SearchField
   */


  function SearchField(opts) {
    var _this = this;

    opts = opts || {};
    opts = (0, _utils.extend)({
      placeholder: 'Search',
      autocomplete: true,
      autoselect: true,
      ui: {
        form: '.awxjs__ui-searchfield-form > form',
        input: '.awxjs__ui-searchfield-form input',
        submit: '.awxjs__ui-searchfield-form button',
        results: '.awxjs__ui-searchfield-results'
      }
    }, opts, {
      className: opts.className ? "ui-searchfield " + opts.className : 'ui-searchfield'
    });
    opts.id = opts.id || opts.value;
    _this = _super.call(this, opts) || this;
    _this._selectedIndex = -1;
    _this._indicator = new _ActivityIndicator.default();
    return _this;
  }

  Object.defineProperty(SearchField.prototype, "value", {
    /**
     * The underlying text input field value.
     *
     * @type {string}
     * @memberof SearchField
     */
    get: function () {
      return this.ui.input.val();
    },
    set: function (newValue) {
      this.ui.input.val(newValue);
      this.ui.input.trigger('input');
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Updates the displayed search results.
   *
   * @param {any[]} results
   * @memberof SearchField
   */

  SearchField.prototype.setResults = function (results) {
    this.clear();
    if (!(0, _utils.isArray)(results)) results = [results];
    this._results = (0, _utils.cloneDeep)(results);

    this._renderResults(results);
  };
  /**
   * Resets the field by clearing the input field value and removing all existing results.
   *
   * @memberof SearchField
   */


  SearchField.prototype.reset = function () {
    this.clear();
    this.ui.input.val('');
    this.ui.results.hide();
    (0, _DOM.default)(document).off('click', this._docHandler);
  };
  /**
   * Clears the existing search results.
   *
   * @memberof SearchField
   */


  SearchField.prototype.clear = function () {
    this.ui.results.empty();
    this._results = null;
    this._selectedIndex = -1;
    this.$el.removeClass('awxjs__ui-searchfield-expanded');
  };
  /**
   * Focuses the component's input field.
   *
   * @memberof SearchField
   */


  SearchField.prototype.focus = function () {
    this.ui.input.focus();
  };
  /**
   * Blurs the component's input field.
   *
   * @memberof SearchField
   */


  SearchField.prototype.blur = function () {
    this.ui.input.blur();
  };

  SearchField.prototype._render = function (data) {
    return "\n\t\t\t<div class=\"awxjs__ui-searchfield-container\">\n\t\t\t\t<div class=\"awxjs__ui-searchfield-form\">\n\t\t\t\t\t<form method=\"POST\">\n\t\t\t\t\t\t<input type=\"text\" value=\"\" placeholder=\"" + this.opts.placeholder + "\">\n\t\t\t\t\t\t<button>\n\t\t\t\t\t\t\t<svg version=\"1.1\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t\t<path d=\"m69.777 61.273 26.562 26.562c4.25 4.3672-4.1328 12.75-8.5 8.5l-26.562-26.562c-14.641 10.508-35.066 8.9727-47.934-3.8945-14.523-14.523-14.523-38.016 0-52.539 14.523-14.523 38.016-14.523 52.539 0 12.867 12.867 14.402 33.293 3.8945 47.934zm-48.051-39.551c-9.8008 9.918-9.8008 25.855 0 35.656 9.918 9.918 25.855 9.918 35.656 0 9.918-9.8008 9.918-25.738 0-35.656-9.8008-9.8008-25.738-9.8008-35.656 0z\" fill-rule=\"evenodd\"/>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</form>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"awxjs__ui-searchfield-results\"></div>\n\t\t\t</div>\n\t\t";
  };

  SearchField.prototype._onAddedToDOM = function () {
    _super.prototype._onAddedToDOM.call(this);

    this._indicator.appendTo(this.ui.form);
  };

  SearchField.prototype._setupEvents = function () {
    var _this = this;

    _super.prototype._setupEvents.call(this);

    var field = this.ui.input; // only perform query if user has stopped typing after certain amount of time

    var handleInput = (0, _utils.debounce)(function () {
      var query = field.val();

      _this.trigger(SearchField.Event.CHANGE_VALUE, {
        value: query
      });

      if (query.length > 3) {
        _this._search(field.val());
      } else if (query.length === 0) {
        _this.reset();
      } else {
        _this._renderResults([]);
      }
    }, 300);

    this._docHandler = function (e) {
      _this._handleDocClick(e);
    };

    this._keyHandler = function (e) {
      _this._listenForKeys(e);
    };

    if (this.opts.autocomplete) {
      field.on('input', handleInput);
    } else {
      field.on('input', function (e) {
        if (field.val() === '' || _this._results && _this._results.length > 0) {
          _this.reset();
        }
      });
    }

    this.ui.form.on('submit', function (e) {
      e.preventDefault();

      _this._search(field.val());

      _this.trigger(SearchField.Event.SUBMIT, {
        value: field.val()
      });

      return false;
    });
    this.ui.submit.on('click', function (e) {
      e.preventDefault();
      var query = field.val();

      if (!(0, _utils.isEmpty)(query)) {
        _this._search(query);

        _this.trigger(SearchField.Event.SUBMIT, {
          value: query
        });
      }
    });
    field.on('focus', function (e) {
      _this.$el.addClass('awxjs__ui-searchfield-focused'); // remove any existing listeners for the same events before adding to prevent duplicate triggers!


      (0, _DOM.default)(document).off('keyup keypress', _this._keyHandler);
      (0, _DOM.default)(document).on('keyup keypress', _this._keyHandler);
      (0, _DOM.default)(document).off('click', _this._docHandler);
      (0, _DOM.default)(document).on('click', _this._docHandler);
    });
    field.on('blur', function (e) {
      _this.$el.removeClass('awxjs__ui-searchfield-focused'); // this.reset();


      (0, _DOM.default)(document).off('keyup keypress', _this._keyHandler);
    });
  };

  SearchField.prototype._search = function (query) {
    var _this = this;

    var requestTask = (0, _utils.get)(this.opts, 'data.request');

    if (!requestTask) {
      console.error('No request task defined for SearchField, check your component configuration.');
      return;
    }

    if ((0, _utils.isFunction)(requestTask)) {
      this._indicator.startAnimating();

      requestTask(query).then(function (results) {
        _this._indicator.stopAnimating();

        _this.setResults(results);
      });
    }
  };

  SearchField.prototype._renderResults = function (results) {
    var _this = this;

    this.trigger(SearchField.Event.UPDATE_RESULTS, results);

    if (results) {
      if (results.length === 0) {
        this.ui.results.hide();
        this.$el.removeClass('awxjs__ui-searchfield-expanded');
        return;
      }

      var formatter_1 = (0, _utils.get)(this.opts, 'data.formatter');
      var rows = results.map(function (result, index) {
        return "<li data-result=\"" + index + "\">" + formatter_1(result) + "</li>";
      });
      this.ui.results.html("<ul>" + rows.join('') + "</ul>");
      this.$el.addClass('awxjs__ui-searchfield-expanded');
      (0, _DOM.default)('li', this.ui.results).on('click', function (e) {
        _this._handleResultClick(e);
      }).on('mouseover', function (e) {
        _this._handleResultMouseover(e);
      });
      this.ui.results.show(); // if configured to auto-select, always select the first result in the payload

      if (rows.length > 0 && this.opts.autoselect) {
        this._selectResultAtIndex(0);
      }
    } else {
      this.reset();
    }
  };

  SearchField.prototype._handleResultMouseover = function (e) {
    var $el = (0, _DOM.default)(e.target);
    var index = parseInt($el.data('result'), 10);

    this._selectResultAtIndex(index);
  };

  SearchField.prototype._handleResultClick = function (e) {
    var $el = (0, _DOM.default)(e.target);
    var index = parseInt($el.data('result'), 10);
    this.trigger(SearchField.Event.SELECT, {
      result: (0, _utils.cloneDeep)(this._results[index]),
      index: index
    });
    this.reset();
  };

  SearchField.prototype._selectResultAtIndex = function (index) {
    if (index !== this._selectedIndex) {
      var $li = (0, _DOM.default)('li', this.ui.results);
      $li.removeClass('selected');

      if (index >= 0) {
        $li.eq(index).addClass('selected');
      }

      this._selectedIndex = index;
    }
  };

  SearchField.prototype._handleDocClick = function (e) {
    var closest = (0, _DOM.default)(e.target).closest('.awxjs__ui-searchfield-container');

    if (!closest || closest.length === 0) {
      this.reset();
    }
  };

  SearchField.prototype._listenForKeys = function (e) {
    var key = (e.key || '').toLowerCase();

    if (e.type === 'keypress') {
      if (key === 'enter' || e.keyCode === 13) {
        e.preventDefault();

        if (this.opts.autocomplete || this._results && this._results.length > 0) {
          this.trigger(SearchField.Event.KEY_ENTER); // trigger selection event if user used arrow keys to select value

          if (this._selectedIndex > -1 && this._results) {
            this.trigger(SearchField.Event.SELECT, {
              result: (0, _utils.cloneDeep)(this._results[this._selectedIndex]),
              index: this._selectedIndex
            });
            this.reset();
          }
        } else {
          this._search(this.ui.input.val());
        }
      }
    } else if (e.type === 'keyup') {
      if (key === 'escape' || key === 'esc' || e.keyCode === 27) {
        this.trigger(SearchField.Event.KEY_ESCAPE);
        this.reset();
      } else if (e.keyCode === 40) {
        // down key
        var index = this._selectedIndex;

        if (this._results && index < this._results.length - 1) {
          index += 1;
        } else if (index === -1) {
          index = 0;
        }

        this._selectResultAtIndex(index);
      } else if (e.keyCode === 38) {
        // up key
        var index = this._selectedIndex;

        if (index > 0) {
          index -= 1;
        }

        this._selectResultAtIndex(index);
      }
    }
  };
  /**
   * Events that can be triggered by a `SearchField` instance.
   *
   * @static
   * @memberof Button
   */


  SearchField.Event = {
    /** Fired when the field's input value changes. */
    CHANGE_VALUE: 'change:value',

    /** Fired when the field's form is submitted and a search query is triggered. */
    SUBMIT: 'submit',

    /** Fired when a result is selected from the search results listing. */
    SELECT: 'select',

    /** Fired when the search results are updated. */
    UPDATE_RESULTS: 'update:results',

    /** Fired when the Escape key is detected while the field is focused. */
    KEY_ESCAPE: 'key:escape',

    /** Fired when the Enter key is detected while the field is focused. */
    KEY_ENTER: 'key:enter'
  };
  return SearchField;
}(_View.default);

var _default = SearchField;
exports.default = _default;
module.exports = exports.default;