"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _View = _interopRequireDefault(require("./View"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

var RangeControl =
/** @class */
function (_super) {
  __extends(RangeControl, _super);

  function RangeControl(opts) {
    var _this = this; // allow intervals to be passed in a comma-separated list of values


    if (opts.intervals) {
      if ((0, _utils.isString)(opts.intervals)) {
        opts.intervals = ("" + opts.intervals).replace(/\s/g, '').split(',').map(function (v) {
          return parseInt(v, 10);
        });
      } // make sure intervals are array of RangeItem


      if ((0, _utils.isArray)(opts.intervals)) {
        opts.intervals = opts.intervals.map(function (interval) {
          if ((0, _utils.isPlainObject)(interval) === false) {
            interval = {
              value: interval,
              label: interval
            };
          }

          return interval;
        });
      }
    }

    opts = (0, _utils.extend)({
      className: (0, _utils.get)(opts, 'className') ? "ui-range " + opts.className : 'ui-range',
      range: {
        min: 0,
        max: 1,
        interval: 0.25
      },
      ui: {
        intervals: '.awxjs__ui-range-intervals'
      }
    }, opts);
    _this = _super.call(this, opts) || this;
    _this._range = {
      min: Infinity,
      max: -Infinity
    };

    if (_this.opts.intervals) {
      _this.setIntervals(_this.opts.intervals);
    } else if (_this.opts.range) {
      var _a = _this.opts.range,
          min = _a.min,
          max = _a.max,
          interval = _a.interval;

      _this.setRange(min, max, interval);
    }

    _this.render();

    return _this;
  }

  Object.defineProperty(RangeControl.prototype, "intervals", {
    get: function () {
      return this._intervals;
    },
    enumerable: true,
    configurable: true
  });

  RangeControl.prototype.setIntervals = function (intervals) {
    if ((0, _utils.isArray)(intervals) && intervals.length > 0) {
      if ((0, _utils.isNumber)(intervals[0])) {
        this._intervals = intervals.map(function (interval) {
          return {
            value: interval,
            label: "" + interval
          };
        });
      } else if ((0, _utils.isPlainObject)(intervals[0])) {
        this._intervals = intervals;
      } // const ar: RangeItem[] = [];
      // intervals.forEach((interval: RangeItem | number) => {
      // 	if (isPlainObject(interval)) {
      // 		ar.push(<RangeItem>interval);
      // 	} else if (isNumber(interval)) {
      // 		ar.push({ value: <number>interval, label: `${interval}` });
      // 	}
      // });
      // this._intervals = ar;


      this.render();
    }
  };

  RangeControl.prototype.setRange = function (min, max, interval) {
    this.opts.range = {
      min: min,
      max: max,
      interval: interval
    };
    var items = [];
    var val = min;

    while (val < max) {
      items.push(val);
      val += interval;
    }

    items.push(max);
    this.setIntervals(items);
  };

  RangeControl.prototype.value = function (range) {
    if (range) {
      this._range = range;

      this._select(range.min, range.max);

      return null;
    } else {
      return this._range;
    }
  };

  RangeControl.prototype._render = function () {
    var intervals = [];

    if (this._intervals) {
      intervals = this._intervals.map(function (interval) {
        return "<li data-value=\"" + interval.value + "\">" + interval.label + "</li>";
      });
    }

    return "\n\t\t\t" + (this.opts.title ? "<div class=\"awxjs__ui-range-title\">" + this.opts.title + "</div>" : '') + "\n\t\t\t<ul class=\"awxjs__ui-range-intervals\">" + intervals.join('') + "</ul>\n\t\t";
  };

  RangeControl.prototype._setupEvents = function () {
    var _this = this;

    (0, _DOM.default)('li', this.ui.intervals).on('click', function (e) {
      _this._handleClick(e);
    });
  };

  RangeControl.prototype._handleClick = function (e) {
    var $el = (0, _DOM.default)(e.target);
    var val = parseFloat($el.data('value'));

    var _a = this.value(),
        min = _a.min,
        max = _a.max;

    if (val < min) {
      min = val;
    } else if (val > max) {
      max = val;
    }

    this.value({
      min: min,
      max: max
    });
  };

  RangeControl.prototype._select = function (from, to) {
    if (this.ui.intervals) {
      (0, _DOM.default)('li', this.ui.intervals).forEach(function (item) {
        var val = parseFloat((0, _DOM.default)(item).data('value'));
        var selected = val >= from && val <= to;

        if (selected) {
          (0, _DOM.default)(item).addClass('selected');
        } else {
          (0, _DOM.default)(item).removeClass('selected');
        }
      });
    }
  };

  return RangeControl;
}(_View.default);

var _default = RangeControl;
exports.default = _default;
module.exports = exports.default;