"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Component = _interopRequireDefault(require("./Component"));

var _utils = require("../../utils");

var _DOM = _interopRequireDefault(require("../../display/DOM"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __extends = void 0 && (void 0).__extends || function () {
  var extendStatics = function (d, b) {
    extendStatics = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (d, b) {
      d.__proto__ = b;
    } || function (d, b) {
      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    };

    return extendStatics(d, b);
  };

  return function (d, b) {
    extendStatics(d, b);

    function __() {
      this.constructor = d;
    }

    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();

/**
 * A `Panel` is a view component that functions as a common view container for any type of
 * content within an application.
 *
 * @export
 * @class Panel
 * @extends {Component<T, S>}
 * @template T
 * @template S
 */
var Panel =
/** @class */
function (_super) {
  __extends(Panel, _super);
  /**
   * Initializes and returns a panel instance configured with the specified options.
   *
   * @param {T} [opts]
   * @memberof Panel
   */


  function Panel(opts) {
    var _this = this;

    opts = (0, _utils.extend)({
      toggleable: false,
      ui: {
        container: '.awxjs__app__ui-panel-container',
        toolbar: '.awxjs__app__ui-panel-toolbar',
        content: '.awxjs__app__ui-panel-content',
        toggle: '.awxjs__app__ui-panel-toggle',
        close: '.awxjs__app__ui-panel-close'
      }
    }, opts, {
      className: opts.className ? "app__ui-panel " + opts.className : 'app__ui-panel'
    });
    _this = _super.call(this, opts) || this;
    _this._bounds = {};

    _this.setState({
      visible: _this.opts.toggleable !== true
    });

    return _this;
  }

  Object.defineProperty(Panel.prototype, "visible", {
    /**
     * A Boolean indicating whether the panel is currently visible.
     *
     * @readonly
     * @type {boolean}
     * @memberof Panel
     */
    get: function () {
      var visible = this.state.visible;
      return visible;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Expands the panel if the panel is toggleable and collapsed.
   *
   * @returns
   * @memberof Panel
   */

  Panel.prototype.open = function () {
    if (this.opts.toggleable === false) return;
    this.setState({
      visible: true
    });

    this._updateSize();

    this.$el.addClass('awxjs__app__ui-panel-toggleable-open');
  };
  /**
   * Collapses the panel if the panel is toggleable and expanded.
   *
   * @returns
   * @memberof Panel
   */


  Panel.prototype.close = function () {
    if (this.opts.toggleable === false) return;
    this.setState({
      visible: false
    });

    this._updateSize();

    this.$el.removeClass('awxjs__app__ui-panel-toggleable-open');
  };
  /**
   * Toggles the open/closed state.
   *
   * @memberof Panel
   */


  Panel.prototype.toggle = function () {
    if (this.visible) {
      this.close();
    } else {
      this.open();
    }
  };
  /**
   * Returns the DOM element container for the view content.
   *
   * @returns {*}
   * @memberof Panel
   */


  Panel.prototype.getContentContainer = function () {
    return this.ui.content;
  };
  /**
   * Returns the size required for the panel's content.
   *
   * @returns {ISize}
   * @memberof Panel
   */


  Panel.prototype.contentSize = function () {
    var size = {
      width: 0,
      height: 0
    };
    var $content = this.getContentContainer();
    size.width = $content.outerWidth(true);
    $content.children().forEach(function (child) {
      var style = window.getComputedStyle(child); // don't include absolute positioned children in the size calculation since they aren't
      // in the normal layout flow

      if (style.position !== 'absolute') {
        var $child = (0, _DOM.default)(child);
        size.width = Math.max(size.width, $child.outerWidth(true));
        size.height += $child.outerHeight(true);
      }
    });
    return size;
  };

  Panel.prototype._updateSize = function () {
    if (!this.opts.toggleable) return;
    if (!this.ui.close) return;
    var size = {
      width: 0,
      height: 0
    };

    if (this.visible && this._bounds.content) {
      var _a = this.contentSize(),
          height = _a.height,
          width = _a.width;

      var pad = this.ui.content.padding();
      width += pad.left + pad.right;
      height += pad.bottom + this.ui.toolbar.outerHeight(true);
      size.width = width;
      size.height = height;
    } else if (!this.visible && this._bounds.toggle) {
      var _b = this._bounds.toggle,
          height = _b.height,
          width = _b.width;
      size.width = width;
      size.height = height;
    } // const bounds = this.$el.bounds();
    // size.height = Math.min(size.height, this.parent().height() - bounds.top * 2);


    this.ui.container.css({
      'max-height': size.height + "px",
      'max-width': size.width + "px"
    });
  };

  Panel.prototype._render = function () {
    return "\n\t\t\t<div class=\"awxjs__app__ui-panel-container\">\n\t\t\t\t<div class=\"awxjs__app__ui-panel-toolbar\">\n\t\t\t\t\t" + (this.opts.title ? "<div class=\"awxjs__app__ui-panel-title\">" + this.opts.title + "</div>" : '') + "\n\t\t\t\t\t<button class=\"awxjs__app__ui-panel-close\">\n\t\t\t\t\t\t<svg version=\"1.1\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\n\t\t\t\t\t\t\t<path d=\"m22.699 77.301c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992l21.699-21.602 21.699 21.699c0.80078 0.80078 1.8008 1.1992 2.8008 1.1992s2-0.39844 2.8008-1.1992c1.6016-1.6016 1.6016-4.1016 0-5.6992l-21.602-21.699 21.699-21.699c1.6016-1.6016 1.6016-4.1016 0-5.6992-1.6016-1.6016-4.1016-1.6016-5.6992 0l-21.699 21.699-21.699-21.602c-1.6016-1.6016-4.1016-1.6016-5.6992 0-1.6016 1.6016-1.6016 4.1016 0 5.6992l21.699 21.602-21.602 21.699c-1.5977 1.5-1.5977 4.1016 0 5.6016z\"/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"awxjs__app__ui-panel-content\"></div>\n\t\t\t\t<div class=\"awxjs__app__ui-panel-toggle\">" + this.opts.icon + "</div>\n\t\t\t</div>\n\t\t";
  };

  Panel.prototype._layout = function () {
    _super.prototype._layout.call(this);

    if (this.ui.content) {
      var size = this.contentSize();

      if (size.width > 0 && size.height > 0) {
        var pad = this.ui.content.padding();
        this._bounds.content = (0, _utils.extend)(this.ui.content.bounds(), {
          height: size.height + pad.top + pad.bottom,
          width: size.width + pad.left + pad.right
        });
      }
    }

    if (this.ui.toggle) {
      this.ui.content.css({
        height: "auto",
        width: "auto"
      });
      this._bounds.toggle = this.ui.toggle.bounds();
    }

    if (this._bounds.content) {
      var bounds = this._bounds.content; // set static width and height on container if not toggleable for
      // proper sizing and positioning

      if (this.opts.toggleable === false) {
        this.$el.css({
          height: bounds.height + "px",
          width: bounds.width + "px"
        });
      }
    }

    this._updateSize();
  };

  Panel.prototype._afterRender = function () {
    if (this.opts.toggleable) {
      this.$el.addClass('awxjs__app__ui-panel-toggleable');
    }
  };

  Panel.prototype._onAddedToDOM = function () {
    _super.prototype._onAddedToDOM.call(this);

    if (this.opts.toggleable) {
      this.close();
    }
  };

  Panel.prototype._setupEvents = function () {
    var _this = this;

    if (this.opts.toggleable) {
      this.ui.toggle.on('click', function () {
        _this.open();
      });
      this.ui.close.on('click', function () {
        _this.close();
      });
    }
  };

  return Panel;
}(_Component.default);

var _default = Panel;
exports.default = _default;
module.exports = exports.default;