import Component, { ComponentOptions, ComponentState } from './Component';
import { ButtonOptions } from './Button';
import { SegmentedButtonOptions } from './SegmentedButton';
import IToggleable from '../interfaces/IToggleable';
/**
 * A data type that represents the configuration options for a button group.
 */
export declare type ButtonGroupOptions = ComponentOptions & {
    /**
     * Identifier for the button group.
     *
     * @type {string}
     */
    id?: string;
    /**
     * Button label.
     *
     * @type {string}
     */
    title: string;
    /**
     * An array of button configurations to displayed in the group.
     *
     * @type {((SegmentedButtonOptions | ButtonOptions)[])}
     */
    buttons: (SegmentedButtonOptions | ButtonOptions)[];
    /**
     * A Boolean indicating whether multiple buttons in the group can be selected at once. Default
     * value is `true`.
     *
     * @type {boolean}
     */
    multiselect: boolean;
};
export declare type ButtonGroupState = ComponentState & {
    expanded: boolean;
};
/**
 * A `ButtonGroup` is a component that triggers an event when clicked and supports a toggleable
 * selected state.
 *
 * @export
 * @class ButtonGroup
 * @extends {Component<T, S>}
 * @template T
 * @template S
 */
export default class ButtonGroup<T extends ButtonGroupOptions, S extends ButtonGroupState> extends Component<T, S> {
    private _buttons;
    private _selectedButton;
    /**
     * Events that can be triggered by a `ButtonGroup` instance.
     *
     * @static
     * @memberof ButtonGroup
     */
    static Event: {
        /** Fired when the button group is expanded. */
        EXPAND: string;
        /** Fired when the button group is collapsed. */
        COLLAPSE: string;
    };
    /**
     * Initializes and returns a button group instance with the specified configuration options.
     *
     * @param {*} [opts]
     * @memberof ButtonGroup
     */
    constructor(opts?: any);
    /**
     * Array of button elements included in the group.
     *
     * @readonly
     * @type {IToggleable[]}
     * @memberof ButtonGroup
     */
    readonly buttons: IToggleable[];
    protected _render(data?: any): string;
    protected _onAddedToDOM(): void;
    protected _setupEvents(): void;
}
