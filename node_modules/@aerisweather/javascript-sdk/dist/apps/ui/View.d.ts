import EventDispatcher from '../../event/EventDispatcher';
import { ISize, IPoint } from '../../interfaces/ICoordinate';
import { AnchorType } from '../../utils/layout';
/**
 * A data type that represents the configuration options for a view.
 */
export declare type ViewOptions = {
    /**
     * Unique identifier.
     *
     * @type {string}
     */
    id?: string;
    /**
     * CSS class name to add to the view's element.
     *
     * @type {string}
     */
    className?: string;
    /**
     * An object that defines the CSS selectors for various UI elements in the view and their
     * reference keys. When a view has been rendered and added to the DOM, you can reference and
     * access these UI targets using `this.ui.#key#`, where `#key#` is the key used with this
     * object.
     *
     * @type {{ [key: string]: string }}
     */
    ui?: {
        [key: string]: string;
    };
    /**
     * Renderer for the view, which can either be an HTML string or a function that receives the
     * view's data, if any, and returns the final HTML string to render as the view's content.
     *
     * @type {(Function | string)}
     */
    renderer?: Function | string;
};
/**
 * A `View` object is the base class used for view and component classes.
 *
 * @export
 * @class View
 * @extends {EventDispatcher}
 * @template T
 */
export default class View<T extends ViewOptions> extends EventDispatcher {
    private _target;
    private _opts;
    private _ui;
    private _data;
    private _needsRender;
    private _lastSize;
    private _DOMObserver;
    /**
     * DOM element associated with the view.
     *
     * @readonly
     * @type {*}
     * @memberof View
     */
    readonly $el: any;
    /**
     * Identifier associated with the view.
     *
     * @readonly
     * @type {string}
     * @memberof View
     */
    readonly id: string;
    /**
     * Configuration options.
     *
     * @readonly
     * @type {T}
     * @memberof View
     */
    readonly opts: T;
    /**
     * Interface DOM targets, which are only available after the view has been rendered to the DOM.
     *
     * @readonly
     * @type {{ [key: string]: any }}
     * @memberof View
     */
    readonly ui: {
        [key: string]: any;
    };
    /**
     * Data used when rendering the view, if any.
     *
     * @readonly
     * @type {*}
     * @memberof View
     */
    readonly data: any;
    /**
     * Initializes and returns a view instance using the specified configuration options.
     *
     * @param {T} [opts]
     * @param {*} [data]
     * @memberof View
     */
    constructor(opts?: T, data?: any);
    /**
     * Adds the view's element to the DOM by appending it to the specified target.
     *
     * @param {(HTMLElement | string)} target DOM target in which the view will be appended
     * @param {boolean} [replace=false] Whether the view should replace the target's existing
     * content
     * @param {number} [index=-1] Index within the target's children at which the view is
     * inserted, if applicable. If the value is `-1` or greater than the total number of
     * children, the view is appened to the end of the target.
     * @memberof View
     */
    addTo(target: HTMLElement | string, replace?: boolean, index?: number): void;
    /**
     * Removes the view from the DOM.
     *
     * @memberof View
     */
    remove(): void;
    /**
     * Parent DOM target, if any. Parent will be `null` if the view has not been added to the DOM.
     *
     * @returns {*}
     * @memberof View
     */
    parent(): any;
    /**
     * Returns the view's current size.
     *
     * @returns {ISize}
     * @memberof View
     */
    size(): ISize;
    /**
     * Renders the view using the specified data.
     *
     * @param {*} [data]
     * @memberof View
     */
    setData(data?: any): void;
    /**
     * Assigns the UI targets according to the view's configured interface selectors.
     *
     * Note that this method should only be called after the view has been rendered and added to
     * the DOM.
     *
     * @param {{ [key: string]: string }} mapping
     * @returns
     * @memberof View
     */
    setUI(mapping: {
        [key: string]: string;
    }): void;
    /**
     * Updates the view's position to the specified x and y values with optional offsets. The view
     * must be configured with absolute positioning.
     *
     * @param {IPoint} position
     * @param {{ x: number, y: number }} [offset={ x: 0, y: 0 }]
     * @memberof View
     */
    moveTo(position: IPoint, offset?: {
        x: number;
        y: number;
    }): void;
    /**
     * Positions the view by pinning it relative to its parent container. The view must be
     * configured with absolute positioning.
     *
     * @param {AnchorType} position Anchor position of the view within its container
     * @param {{ x: number, y: number }} [offset] Offsets relative to the pinned position
     * @memberof View
     */
    pinTo(position: AnchorType, offset?: {
        x: number;
        y: number;
    }): void;
    /**
     * Renders the view.
     *
     * If `data` is provided, the view will be rendered with the specified data. Otherwise, the
     * existing data will be used, if any.
     *
     * @param {*} [data]
     * @memberof View
     */
    render(data?: any): void;
    protected _render(data?: any): string;
    protected _layout(): void;
    protected _onData(data: any): any;
    protected _beforeRender(): void;
    protected _afterRender(): void;
    protected _setupEvents(): void;
    protected _afterEvents(): void;
    protected _onAddedToDOM(): void;
    protected _onResize(): void;
    protected _shouldLayout(): boolean;
}
