import Component, { ComponentOptions } from './Component';
/**
 * A data type that represents the configuration options for a range slider component.
 */
export declare type RangeSliderOptions = ComponentOptions & {
    /**
     * Title to render above the component.
     *
     * @type {string}
     */
    title?: string;
    /**
     * Value range.
     *
     * @type {{
     * 		min: number;
     * 		max: number;
     * 	}}
     */
    range?: {
        min: number;
        max: number;
    };
    /**
     *
     *
     * @type {number}
     */
    count?: number;
    /**
     * Interval between snapped values.
     *
     * @type {number}
     */
    step?: number;
    /**
     * Labels to display along the slider, where the key is the value within the range and the
     * value is the label string to display.
     *
     * When used in conjunction with `marksEvery`, the marks defined using this property will
     * always be rendered and will override the automatically generated values.
     *
     * @type {{ [key: number]: string }}
     */
    marks?: {
        [key: string]: string;
    };
    /**
     * Interval to automatically add step marks/labels for within the range.
     *
     * If a number is provided, this interval will be based on the step count/index (e.g. render a mark
     * every `x` steps). If you want to render a mark based on the actual value at each step, provide
     * a string that is prefixed with a percent sign, which will render a mark when a step's value
     * is divisible by the following number (e.g. `% 12` will render a mark when a step's value is
     * evenly divisible by `12`).
     *
     * @type {(number | string)}
     */
    marksEvery?: number | string;
    /**
     * A Boolean indicating whether dots should be rendered at each step.
     *
     * @type {boolean}
     */
    dots?: boolean;
    /**
     * A Boolean indicating whether the control is enabled.
     *
     * @type {boolean}
     */
    disabled?: boolean;
    /**
     * Initial value as an array of numbers, where the first value represents the minimum value
     * in the range, and the second value represents the maximum value.
     *
     * @type {number[]}
     */
    value?: number[];
    /**
     * Width of the slider bar.
     *
     * @type {number}
     */
    width?: number;
    /**
     * A Boolean value indicating whether a tooltip should be displayed while one of the control's
     * handles is focused, in which case the tooltip will display the current value for the
     * handle.
     *
     * Alternatively, a function can be provided which will receive the handle's current
     * value as a parameter and the tooltip content is returned. If `null` is returned, then the
     * tooltip will not be displayed for that value.
     *
     * @type {boolean | ((value: number) => string)}
     */
    tooltip?: boolean | ((value: number) => string);
};
/**
 * A data type that represents a range slider's state.
 */
export declare type RangeSliderState = {
    /**
     * Current bounds values.
     *
     * @type {number[]}
     */
    bounds?: number[];
    /**
     * Current handle elements.
     *
     * @type {number}
     */
    handle?: number;
    /**
     * Index of the last handle interacted with or changed.
     *
     * @type {number}
     */
    recent?: number;
};
/**
 * A `RangeSlider` is a slider component that allows you to define a value range and step interval
 * along the slider to allow a user to change values associated with the control.
 *
 * @export
 * @class RangeSlider
 * @extends {Component<RangeSliderOptions, RangeSliderState>}
 */
export default class RangeSlider extends Component<RangeSliderOptions, RangeSliderState> {
    private _points;
    private _handles;
    private _lastMovedHandle;
    private _tooltip;
    private _dragOffset;
    /**
     * Initializes and returns a range slider instance configured with the specified options.
     *
     * @param {RangeSliderOptions} [opts]
     * @memberof RangeSlider
     */
    constructor(opts?: RangeSliderOptions);
    /**
     * Current value, which is an array of values corresponding to the bounds. The first value is
     * the minimum value in the range, whereas the second value in the array is the maximum value.
     *
     * @readonly
     * @type {number[]}
     * @memberof RangeSlider
     */
    value: number[];
    render(data?: any): void;
    protected _render(): string;
    protected _afterRender(): void;
    protected _setupEvents(): void;
    private _getClosestBound;
    private _getBoundNeedMoving;
    private _getLowerBound;
    private _getUpperBound;
    private _getPoints;
    private _moveTo;
    private _trimAlignValue;
    private _ensureValueNotConflict;
    private _valueAtPosition;
    private _valueAtOffset;
    private _offsetForValue;
    private _updateTooltip;
    private _onBoundsChange;
    private _onChange;
    private _onStart;
    private _onEnd;
    private _onMove;
    private _onKeyboard;
    private _onMouseDown;
    private _onMouseUp;
    private _onMouseMove;
    private _addDocumentEvents;
    private _removeDocumentEvents;
}
