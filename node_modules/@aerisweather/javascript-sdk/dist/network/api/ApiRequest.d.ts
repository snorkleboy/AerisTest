import IRequest from '../../interfaces/IRequest';
import ApiResult from './ApiResult';
import Query from './params/Query';
import { ICoordinateBounds } from '../../interfaces/ICoordinate';
export declare type Parameters = {
    [key: string]: any;
};
/**
 * An enumerated value representing an API endpoint action.
 *
 * @export
 * @enum {string}
 */
export declare enum ApiAction {
    AFFECTS = "affects",
    ALL = ":all",
    CLOSEST = "closest",
    CONTAINS = "contains",
    ID = ":id",
    ROUTE = "route",
    SEARCH = "search",
    WITHIN = "within"
}
/**
 * A data type that represents the configuration options for an API request.
 */
export declare type ApiConfig = {
    /**
     * The API base server path.
     *
     * @type {string}
     */
    server?: string;
    /**
     * API client configuration to use with the request.
     *
     * @type {{
     * 		id: string,
     * 		secret: string
     * 	}}
     */
    client: {
        /**
         * Client access id.
         *
         * @type {string}
         */
        id: string;
        /**
         * Client access secret.
         *
         * @type {string}
         */
        secret: string;
    };
};
/**
 * A data type that represents the configuration options for an API data request.
 */
export declare type ApiRequestOptions = {
    /**
     * Request endpoint (required).
     *
     * @type {string}
     */
    endpoint: string;
    /**
     * Request action.
     *
     * @type {string}
     */
    action?: string;
    /**
     * Coordinate bounds to search within.
     *
     * @type {ICoordinateBounds}
     */
    bounds?: ICoordinateBounds;
    /**
     * A comma-delimited list of response properties for the API to return. This parameter is often
     * used to limit the amount of data returned.
     *
     * @type {string}
     */
    fields?: string;
    /**
     * Predefined filters for limiting the results. The filter value can be a single,
     * comma-delimited or a semicolon delimited string of filter names.
     *
     * @type {string}
     */
    filter?: string;
    /**
     * Either a `Date` or [valid time string](http://php.net/manual/en/datetime.formats.php) from
     * which to return results for.
     *
     * @type {(string | Date)}
     */
    from?: string | Date;
    /**
     * Maximum number of results to return.
     *
     * @type {number}
     */
    limit?: number;
    /**
     * Location to request data for. Refer to the list of
     * [supported place values](https://www.aerisweather.com/support/docs/api/reference/places/).
     *
     * @type {string}
     */
    place?: string;
    /**
     * Applied only on the `periods` response property, the total number of periods to return as
     * an integer.
     *
     * @type {number}
     */
    plimit?: number;
    /**
     * Applied only on the `periods` response property, used to skip over a specific number of
     * periods in the data set.
     *
     * @type {number}
     */
    pskip?: number;
    /**
     * Applied only on the `periods` response property, used to sort results based on certain
     * fields contained within the periods.
     *
     * @type {string}
     */
    psort?: string;
    /**
     * Filters results based on certain fields and values in the dataset. Refer to the
     * [advanced queries](https://www.aerisweather.com/support/docs/api/getting-started/queries/)
     * documentation.
     *
     * @type {string}
     */
    query?: string;
    /**
     * When requesting the closest results within a circle, the radius determines how far from the
     * specified location to search. A valid unit value must be included in your radius value,
     * e.g., `5mi`, `10km`, `25miles`. If no unit is provided, your value is assumed to be in
     * meters by default.
     *
     * @type {string}
     */
    radius?: string;
    /**
     * Skips over a specific number of results in the dataset.
     *
     * @type {number}
     */
    skip?: number;
    /**
     * Sorts results based on certain fields in the dataset. Refer to the
     * [sorting](https://www.aerisweather.com/support/docs/api/getting-started/sorting/)
     * documentation.
     *
     * @type {string}
     */
    sort?: string;
    /**
     * Either a `Date` or [valid time string](http://php.net/manual/en/datetime.formats.php) up to
     * which to return results for. When used in conjunction with `from()`, this value be relative
     * to the *from* value, not relative to the current time.
     *
     * @type {(string | Date)}
     */
    to?: string | Date;
};
/**
 * An object that is responsible for configuring and performing a single request to the Aeris
 * Weather API.
 *
 * @export
 * @class ApiRequest
 * @implements {IRequest}
 */
export default class ApiRequest implements IRequest {
    /**
     * Base configuration for the request.
     *
     * @type {ApiConfig}
     * @memberof ApiRequest
     */
    config: ApiConfig;
    /**
     * The parameters associated with the request.
     *
     * @private
     * @type {ApiRequestOptions}
     * @memberof ApiRequest
     */
    private _params;
    private _http;
    private _endpoint;
    private _action;
    private _requests;
    private _paramKeys;
    private _range;
    /**
     * Initializes a new request instance configured with the specified client access keys.
     *
     * @param {ApiConfig} [config]
     * @memberof ApiRequest
     */
    constructor(config: ApiConfig, opts?: ApiRequestOptions);
    /**
     * Sets or returns the specified parameter.
     *
     * @param {string} key
     * @param {*} [value]
     * @returns {(ApiRequest | any)}
     * @memberof ApiRequest
     */
    param(key: string, value?: any): ApiRequest | any;
    /**
     * Sets multiple request parameters.
     *
     * @param {ApiRequestOptions} params
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    setParams(params: ApiRequestOptions): ApiRequest;
    resetParams(): ApiRequest;
    /**
     * Sets the endpoint for the request (required).
     *
     * @param {string} endpoint
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    endpoint(endpoint: string): ApiRequest;
    /**
     * Returns the endpoint for the request.
     *
     * @returns {string}
     * @memberof ApiRequest
     */
    getEndpoint(): string;
    /**
     * Sets the action for the request.
     *
     * @param {string} action
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    action(action: ApiAction): ApiRequest;
    /**
     * Returns the action for the request.
     *
     * @returns {string}
     * @memberof ApiRequest
     */
    getAction(): ApiAction;
    /**
     * Sets the place for the request.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    place(value: string): ApiRequest;
    /**
     * Sets the request's place to the coordinate bounds string.
     *
     * @param {ICoordinateBounds} bounds
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    bounds(bounds: ICoordinateBounds): ApiRequest;
    /**
     * Sets the limit parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    limit(value: number): ApiRequest;
    /**
     * Sets the radius parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    radius(value: string): ApiRequest;
    /**
     * Sets the filter parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    filter(value: string): ApiRequest;
    /**
     * Sets the fields parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    fields(value: string): ApiRequest;
    /**
     * Sets the query parameter.
     *
     * @param {(string | Query)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    query(value: string | Query): ApiRequest;
    /**
     * Sets the sort parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    sort(value: string): ApiRequest;
    /**
     * Sets the skip parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    skip(value: number): ApiRequest;
    /**
     * Sets the from parameter.
     *
     * @param {(string | Date)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    from(value: string | Date): ApiRequest;
    /**
     * Sets the to parameter.
     *
     * @param {(string | Date)} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    to(value: string | Date): ApiRequest;
    /**
     * Sets the plimit paramter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    plimit(value: number): ApiRequest;
    /**
     * Sets the psort parameter.
     *
     * @param {string} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    psort(value: string): ApiRequest;
    /**
     * Sets the pskip parameter.
     *
     * @param {number} value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    pskip(value: number): ApiRequest;
    /**
     * Sets the format parameters.
     *
     * @param value
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    format(value: string): ApiRequest;
    /**
     * Adds a request to the batch request.
     *
     * Adding child requests to this request automatically converts the containing request to a batch request.
     *
     * @param {ApiRequest} request
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    addRequest(request: ApiRequest): ApiRequest;
    /**
     * Removes a request from the batch request.
     *
     * @param {ApiRequest} request
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    removeRequest(request: ApiRequest): ApiRequest;
    /**
     * Removes all requests from the batch request, converting the request instance to a non-batch request.
     *
     * @memberof ApiRequest
     */
    removeAllRequests(): void;
    /**
     * Perform the request.
     *
     * @returns {Promise<any>}
     * @memberof ApiRequest
     */
    get(callback?: (result: ApiResult) => void): Promise<ApiResult>;
    /**
     * Cancels any active request.
     *
     * @memberof ApiRequest
     */
    cancel(): void;
    /**
     * Returns the url string for the request based on the configured parameters and options.
     *
     * @param {boolean} [isBatch=false]
     * @returns {string}
     * @memberof ApiRequest
     */
    url(isBatch?: boolean): string;
    /**
     * Returns a copy of the request.
     *
     * @returns {ApiRequest}
     * @memberof ApiRequest
     */
    clone(): ApiRequest;
}
