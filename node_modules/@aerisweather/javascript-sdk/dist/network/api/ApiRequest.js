"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ApiAction = void 0;

var _Http = _interopRequireDefault(require("../Http"));

var _ApiResult = _interopRequireDefault(require("./ApiResult"));

var _Query = _interopRequireDefault(require("./params/Query"));

var _utils = require("../../utils");

var strings = _interopRequireWildcard(require("../../utils/strings"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var __awaiter = void 0 && (void 0).__awaiter || function (thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};

var __generator = void 0 && (void 0).__generator || function (thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
};

var normalize = function (params) {
  // Object.keys(params).forEach(key => {
  // 	const val = params[key];
  // 	if (key === 'p') {
  // 		if (isObject(params[key])) {
  // 			const { lat, lon } = params[key];
  // 			if (lat && lon) {
  // 				params[key] = `${lat},${lon}`;
  // 			}
  // 		}
  // 	}
  // });
  return params;
};
/**
 * An enumerated value representing an API endpoint action.
 *
 * @export
 * @enum {string}
 */


var ApiAction;
exports.ApiAction = ApiAction;

(function (ApiAction) {
  ApiAction["AFFECTS"] = "affects";
  ApiAction["ALL"] = ":all";
  ApiAction["CLOSEST"] = "closest";
  ApiAction["CONTAINS"] = "contains";
  ApiAction["ID"] = ":id";
  ApiAction["ROUTE"] = "route";
  ApiAction["SEARCH"] = "search";
  ApiAction["WITHIN"] = "within";
})(ApiAction || (exports.ApiAction = ApiAction = {}));
/**
 * An object that is responsible for configuring and performing a single request to the Aeris
 * Weather API.
 *
 * @export
 * @class ApiRequest
 * @implements {IRequest}
 */


var ApiRequest =
/** @class */
function () {
  /**
   * Initializes a new request instance configured with the specified client access keys.
   *
   * @param {ApiConfig} [config]
   * @memberof ApiRequest
   */
  function ApiRequest(config, opts) {
    /**
     * Base configuration for the request.
     *
     * @type {ApiConfig}
     * @memberof ApiRequest
     */
    this.config = {
      server: 'https://api.aerisapi.com',
      client: {
        id: undefined,
        secret: undefined
      }
    };
    /**
     * The parameters associated with the request.
     *
     * @private
     * @type {ApiRequestOptions}
     * @memberof ApiRequest
     */

    this._params = {
      endpoint: undefined
    };
    this._requests = [];
    this._paramKeys = ['p', 'limit', 'radius', 'filter', 'fields', 'query', 'sort', 'skip', 'from', 'to', 'plimit', 'psort', 'pskip', 'callback', 'metric', 'requests', 'lang', 'format', 'mindist', 'pfilter'];
    this.config = (0, _utils.merge)(this.config, config);
    this._http = new _Http.default(this.config.server);
    this._range = {};

    if (opts) {
      this.setParams(opts);
    } // // add convenience methods for setting params
    // this._paramKeys.forEach((param: string) => {
    // 	const self = this as any;
    // 	if (!self[param]) {
    // 		self[param] = function() {
    // 			var args = Array.prototype.slice.call(arguments);
    // 			this.setParam.apply(this, args);
    // 			return this;
    // 		}.bind(this, param);
    // 	}
    // }, this);

  }
  /**
   * Sets or returns the specified parameter.
   *
   * @param {string} key
   * @param {*} [value]
   * @returns {(ApiRequest | any)}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.param = function (key, value) {
    if (value) {
      if (this._paramKeys.indexOf(key) !== -1) {
        (0, _utils.set)(this._params, key, value);
      }

      return this;
    }

    return (0, _utils.get)(this._params, key);
  };
  /**
   * Sets multiple request parameters.
   *
   * @param {ApiRequestOptions} params
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.setParams = function (params) {
    this._params = (0, _utils.merge)(this._params, params);
    return this;
  };

  ApiRequest.prototype.resetParams = function () {
    this._params = {
      endpoint: this._endpoint
    };
    return this;
  };
  /**
   * Sets the endpoint for the request (required).
   *
   * @param {string} endpoint
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.endpoint = function (endpoint) {
    this._endpoint = endpoint;
    this.param('endpoint', endpoint);
    return this;
  };
  /**
   * Returns the endpoint for the request.
   *
   * @returns {string}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.getEndpoint = function () {
    return this._endpoint;
  };
  /**
   * Sets the action for the request.
   *
   * @param {string} action
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.action = function (action) {
    this._action = action;
    return this;
  };
  /**
   * Returns the action for the request.
   *
   * @returns {string}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.getAction = function () {
    return this._action;
  };
  /**
   * Sets the place for the request.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.place = function (value) {
    this.param('p', value);
    return this;
  };
  /**
   * Sets the request's place to the coordinate bounds string.
   *
   * @param {ICoordinateBounds} bounds
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.bounds = function (bounds) {
    if ((0, _utils.isString)(bounds)) {
      var str = bounds;

      if (/,/.test(str)) {
        var b = str.split(',').map(function (v) {
          return parseFloat(v);
        });

        if (b.length === 4) {
          bounds = {
            north: b[0],
            west: b[1],
            south: b[2],
            east: b[3]
          };
        }
      }
    }

    return this.place(strings.toBounds(bounds));
  };
  /**
   * Sets the limit parameter.
   *
   * @param {number} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.limit = function (value) {
    this.param('limit', value);
    return this;
  };
  /**
   * Sets the radius parameter.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.radius = function (value) {
    this.param('radius', value);
    return this;
  };
  /**
   * Sets the filter parameter.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.filter = function (value) {
    this.param('filter', value);
    return this;
  };
  /**
   * Sets the fields parameter.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.fields = function (value) {
    this.param('fields', value);
    return this;
  };
  /**
   * Sets the query parameter.
   *
   * @param {(string | Query)} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.query = function (value) {
    if (value instanceof _Query.default) {
      value = value.toString();
    }

    this.param('query', value);
    return this;
  };
  /**
   * Sets the sort parameter.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.sort = function (value) {
    this.param('sort', value);
    return this;
  };
  /**
   * Sets the skip parameter.
   *
   * @param {number} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.skip = function (value) {
    this.param('skip', value);
    return this;
  };
  /**
   * Sets the from parameter.
   *
   * @param {(string | Date)} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.from = function (value) {
    if ((0, _utils.isDate)(value)) {
      var date = value; // don't set `from` value if it's a date that's within 1 minute of the current time

      if (Math.abs(date.getTime() - new Date().getTime()) < 60 * 1000) {
        return this;
      }

      value = (0, _utils.toTimeStr)(date);
      this._range.from = date;
    }

    this.param('from', value);
    return this;
  };
  /**
   * Sets the to parameter.
   *
   * @param {(string | Date)} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.to = function (value) {
    if ((0, _utils.isDate)(value)) {
      var date = value; // don't set `to` value if it's a date that's within 1 minute of the current time

      if (Math.abs(date.getTime() - new Date().getTime()) < 60 * 1000) {
        return this;
      }

      value = (0, _utils.toTimeStr)(date, this._range.from);
      this._range.to = date;
    }

    this.param('to', value);
    return this;
  };
  /**
   * Sets the plimit paramter.
   *
   * @param {number} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.plimit = function (value) {
    this.param('plimit', value);
    return this;
  };
  /**
   * Sets the psort parameter.
   *
   * @param {string} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.psort = function (value) {
    this.param('psort', value);
    return this;
  };
  /**
   * Sets the pskip parameter.
   *
   * @param {number} value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.pskip = function (value) {
    this.param('pskip', value);
    return this;
  };
  /**
   * Sets the format parameters.
   *
   * @param value
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.format = function (value) {
    this.param('format', value);
    return this;
  };
  /**
   * Adds a request to the batch request.
   *
   * Adding child requests to this request automatically converts the containing request to a batch request.
   *
   * @param {ApiRequest} request
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.addRequest = function (request) {
    if (this._requests.indexOf(request) === -1) {
      this._requests.push(request);
    }

    return this;
  };
  /**
   * Removes a request from the batch request.
   *
   * @param {ApiRequest} request
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.removeRequest = function (request) {
    var index = this._requests.indexOf(request);

    if (index >= 0) {
      this._requests.splice(index, 1);
    }

    return this;
  };
  /**
   * Removes all requests from the batch request, converting the request instance to a non-batch request.
   *
   * @memberof ApiRequest
   */


  ApiRequest.prototype.removeAllRequests = function () {
    this._requests = [];
  };
  /**
   * Perform the request.
   *
   * @returns {Promise<any>}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.get = function (callback) {
    return __awaiter(this, void 0, void 0, function () {
      var res, json, error, result, e_1;
      return __generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            _a.trys.push([0, 2,, 3]);

            this._http.cancel();

            return [4
            /*yield*/
            , this._http.get(this.url())];

          case 1:
            res = _a.sent();
            json = res && res.data ? res.data : {};
            error = json.error;

            if (error && (error.code === 'warn_no_data' || error.code === 'warn_invalid_param' || error.code === 'invalid_location')) {
              error = null;
            }

            result = new _ApiResult.default(res, json.response || json, error, null);

            if (callback) {
              callback(result);
            }

            return [2
            /*return*/
            , result];

          case 2:
            e_1 = _a.sent();
            console.error('ApiRequest Error', e_1);
            return [2
            /*return*/
            , new _ApiResult.default(null, null, e_1, null)];

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Cancels any active request.
   *
   * @memberof ApiRequest
   */


  ApiRequest.prototype.cancel = function () {
    this._http.cancel();
  };
  /**
   * Returns the url string for the request based on the configured parameters and options.
   *
   * @param {boolean} [isBatch=false]
   * @returns {string}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.url = function (isBatch) {
    if (isBatch === void 0) {
      isBatch = false;
    }

    var url = isBatch ? '' : this.config.server;
    var params = (0, _utils.merge)({}, (0, _utils.pickBy)(this._params, function (o) {
      return !(0, _utils.isEmpty)(o);
    }), isBatch ? {} : {
      client_id: this.config.client.id,
      client_secret: this.config.client.secret
    });

    if (this._requests.length > 0) {
      url += '/batch';
      var urls_1 = [];

      this._requests.forEach(function (request) {
        urls_1.push(request.url(true));
      });

      params.requests = urls_1.join(',');
    } else {
      if (this._endpoint) {
        url += "/" + this._endpoint;
      } else {
        throw new Error('Invalid ApiRequest - No endpoint specified');
      }

      if (this._action && this._action !== ApiAction.ID && this._action !== ApiAction.ALL) {
        url += "/" + this._action;
      } else if (params.p) {
        url += "/" + encodeURIComponent(params.p);
        delete params.p;
      }
    }

    var query = Object.keys(params).map(function (k) {
      return encodeURIComponent(k) + "=" + encodeURIComponent(params[k]);
    }).join('&');

    if (query.length > 0) {
      url += "?" + query;
    }

    return url;
  };
  /**
   * Returns a copy of the request.
   *
   * @returns {ApiRequest}
   * @memberof ApiRequest
   */


  ApiRequest.prototype.clone = function () {
    var request = new ApiRequest(this.config);
    request.setParams(this._params);
    return request;
  };

  return ApiRequest;
}();

var _default = ApiRequest;
exports.default = _default;