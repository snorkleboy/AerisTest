"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.QueryCondition = exports.Sort = exports.Operator = void 0;

/**
 * The supported query operators.
 */
var Operator;
exports.Operator = Operator;

(function (Operator) {
  /** Joins queries using an `OR` operator */
  Operator["OR"] = ";";
  /** Joins queries using an `AND` operator */

  Operator["AND"] = ",";
})(Operator || (exports.Operator = Operator = {}));
/**
 * The supported sort operators.
 */


var Sort;
exports.Sort = Sort;

(function (Sort) {
  /** Sorts the results based on the associated field name in ascending order */
  Sort["ASC"] = "1";
  /** Sorts results based on the associated field name in descending order */

  Sort["DESC"] = "-1";
  /** Disables any specific sorting on the field name */

  Sort["NONE"] = "0";
})(Sort || (exports.Sort = Sort = {}));
/**
 * A `QueryCondition` object stores information about a single property-value condition.
 */


var QueryCondition =
/** @class */
function () {
  /**
   * Initializes a query condition instance for the specified property and value and optional
   * next operator.
   *
   * @param {string} property
   * @param {*} value
   * @param {Operator} [nextOperator=Operator.AND]
   * @memberof QueryCondition
   */
  function QueryCondition(property, value, nextOperator) {
    if (nextOperator === void 0) {
      nextOperator = Operator.AND;
    }

    this.property = property;
    this.value = value;
    this.nextOperator = nextOperator;
  }
  /**
   * Returns the formatted query string to be used with API requests.
   *
   * @returns {string}
   * @memberof QueryCondition
   */


  QueryCondition.prototype.toString = function () {
    return this.property + ":" + this.value;
  };

  return QueryCondition;
}();

exports.QueryCondition = QueryCondition;

/**
 * A `Query` object is a convenience wrapper for setting up and configuring a query string used
 * for API queries.
 */
var Query =
/** @class */
function () {
  /**
   * Initializes a query instance, optionally with an array of query conditions.
   *
   * @param {QueryCondition[]} [conditions=[]]
   * @memberof Query
   */
  function Query(conditions) {
    if (conditions === void 0) {
      conditions = [];
    }

    this._conditions = conditions || [];
  }
  /**
   * Adds a query condition.
   *
   * @param {QueryCondition} condition
   * @returns {Query}
   * @memberof Query
   */


  Query.prototype.addCondition = function (condition) {
    this._conditions.push(condition);

    return this;
  };
  /**
   * Removes a query condition.
   *
   * @param {QueryCondition} condition
   * @returns {Query}
   * @memberof Query
   */


  Query.prototype.removeCondition = function (condition) {
    var index = this._conditions.indexOf(condition);

    if (index !== -1) {
      this._conditions.splice(index, 1);
    }

    return this;
  };
  /**
   * Removes all query conditions.
   *
   * @returns {Query}
   * @memberof Query
   */


  Query.prototype.removeAllConditions = function () {
    this._conditions = [];
    return this;
  };
  /**
   * Returns the formatted string from all query conditions to be used for API requests.
   *
   * @returns {string}
   * @memberof Query
   */


  Query.prototype.toString = function () {
    var last = this._conditions.length - 1;
    return this._conditions.reduce(function (prev, current, index) {
      prev += "" + current.toString() + (index < last ? current.nextOperator : '');
      return prev;
    }, '');
  };

  return Query;
}();

var _default = Query;
exports.default = _default;