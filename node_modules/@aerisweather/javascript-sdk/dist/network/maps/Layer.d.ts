export interface ILayerOpts {
    alpha: number;
    darkStyle: boolean;
    text: boolean;
    largeText: boolean;
    metric: boolean;
    blendMode: string;
    blur: number;
    filters: string[];
    mask: string;
    includeText: boolean;
}
/**
 * A `Layer` object used to configure a single Aeris Maps layer.
 */
export default class Layer {
    /**
     * The layer code associated with the layer
     *
     * @type {string}
     * @memberof Layer
     */
    code: string;
    private _opts;
    /**
     * Initializes a layer instance with the specified AMP layer code.
     *
     * @param {string} code
     * @memberof Layer
     */
    constructor(code: string);
    /**
     * Sets or returns an option value.
     *
     * @param {string} key
     * @param {*} [value]
     * @returns {(Layer|any)}
     * @memberof Layer
     */
    opt(key: string, value?: any): Layer | any;
    /**
     * The layer configuration object.
     *
     * @param {ILayerOpts} [value]
     * @returns {(Layer|ILayerOpts)}
     * @memberof Layer
     */
    options(value?: ILayerOpts): Layer | ILayerOpts;
    /**
     * The alpha (opacity) of the layer.
     *
     * @param {number} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    alpha(value?: number): Layer;
    /**
     * A Boolean indicating whether the layer should use the dark style.
     *
     * @param {boolean} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    darkStyle(value?: boolean): Layer;
    /**
     * A Boolean indicating whether the layer is a text layer.
     *
     * @param {boolean} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    text(value?: boolean): Layer;
    /**
     * A Boolean indicating whether the layer should also include its associated text layer.
     *
     * @param {boolean} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    includeText(value?: boolean): Layer;
    /**
     * A Boolean indicating whether the text layer should use large text.
     *
     * @param {boolean} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    largeText(value?: boolean): Layer;
    /**
     * A Boolean indicating whether the layer should display text values in Metric units.
     *
     * @param {boolean} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    metric(value?: boolean): Layer;
    /**
     * The blend mode to apply to the layer.
     *
     * @param {string} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    blendMode(value?: string): Layer;
    /**
     * The amount to blur the layer, which is a value from `0` meaning no blur (default) to `10`.
     * The higher the value, the greater the blur effect.
     *
     * @param {number} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    blur(value?: number): Layer;
    /**
     * The mask layer to apply to the layer.
     *
     * @param {string} [value]
     * @returns {Layer}
     * @memberof Layer
     */
    mask(value?: string): Layer;
    /**
     * Adds a filter to the layer.
     *
     * @param {string} filter
     * @returns {Layer}
     * @memberof Layer
     */
    addFilter(filter: string): Layer;
    /**
     * Removes a filter from the layer.
     *
     * @param {string} filter
     * @returns {Layer}
     * @memberof Layer
     */
    removeFilter(filter: string): Layer;
    /**
     * Removes all filters from the layer.
     *
     * @returns {Layer}
     * @memberof Layer
     */
    removeAllFilters(): Layer;
    /**
     * Returns the layer string based on the layer configuration.
     *
     * @returns {string}
     * @memberof Layer
     */
    toString(): string;
}
