import { IPoint, ISize } from '../interfaces/ICoordinate';
/**
 * A data type that represents the supported anchor positions for elements.
 */
export declare type AnchorType = 'topleft' | 'top' | 'topright' | 'left' | 'center' | 'right' | 'bottomleft' | 'bottom' | 'bottomleft';
/**
 * A data type that represents SVG shape configuration options.
 */
export declare type SVGShapeOptions = {
    position?: AnchorType | IPoint;
    translate?: IPoint;
    stroke?: {
        width?: number;
        color?: string;
        opacity?: number;
    };
    fill?: {
        color?: string;
        opacity?: number;
    };
    transform?: string;
    size?: number[];
};
/**
 * A data type that represents SVG rectangle configuration options.
 *
 * @type {{
 * 		margin?: number;
 * 		radius?: number;
 * }}
 */
export declare type SVGRectOptions = SVGShapeOptions & {
    margin?: number;
    radius?: number;
};
/**
 * A data type that represents SVG circle configuration options.
 *
 * @type {{
 * 		radius?: number;
 * 		center?: IPoint;
 * }}
 */
export declare type SVGCircleOptions = SVGShapeOptions & {
    radius?: number;
    center?: IPoint;
};
/**
 * A data type that represents SVG path configuration options.
 *
 * @type {{
 * 		viewBox?: string;
 * }}
 */
export declare type SVGPathOptions = SVGShapeOptions & {
    viewBox?: string;
};
/**
 * A data type that represents SVG text configuration options.
 */
export declare type SVGTextOptions = {
    anchor?: string;
    position?: AnchorType | IPoint;
    translate?: IPoint;
    transform?: string;
    font?: string;
    size?: number;
    style?: string;
    color?: string;
    value?: string | number;
    padding?: number[];
};
/**
 * A data type that represents SVG image configuration options.
 */
export declare type SVGImageOptions = {
    url?: string;
    position?: AnchorType | IPoint;
    translate?: IPoint;
    transform?: string;
    size?: number[];
};
/**
 * The `SVG` module provides utility functions for generating the necessary HTML for various SVG
 * elements based on certain configurations and styles.
 */
export declare module SVG {
    const calculateTextSize: (str: string, fontSize: number, fontStyle?: string, padding?: number[]) => number[];
    /**
     * Returns the SVG path string using the specified path value string and style options.
     *
     * @param {string} value
     * @param {SVGPathOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const path: (value: string, opts?: SVGPathOptions) => string;
    /**
     * Returns the SVG rectangle string for the specified width, height and style options.
     *
     * @param {number} width
     * @param {number} height
     * @param {SVGRectOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const rect: (width: number, height: number, opts?: SVGRectOptions) => string;
    /**
     * Returns the SVG circle string for the specified style options.
     *
     * @param {SVGCircleOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const circle: (container: ISize, opts?: SVGCircleOptions) => string;
    /**
     * Returns the SVG text string for the specified value and style options.
     *
     * @param {string | number} value
     * @param {SVGTextOptions} opts
     * @returns {string}
     * @memberof SVG
     */
    const text: (value: string | number, container: ISize, opts?: SVGTextOptions) => string;
    const image: (url: string, container: ISize, opts?: SVGImageOptions) => string;
    /**
     * Returns the SVG HTML string for the specified options and array of drawable elements.
     *
     * @param {number} width
     * @param {number} height
     * @param {string[]} elements
     * @param {string} [viewBox]
     * @returns {string}
     * @memberof SVG
     */
    const svg: (width: number, height: number, elements: string[], viewBox?: string) => string;
    /**
     * Returns the SVG HTML string using the specified size and options.
     *
     * @param {number} width
     * @param {number} height
     * @param {any} opts
     * @returns {string}
     * @memberof SVG
     */
    const draw: (width: number, height: number, opts: any) => string;
}
